{"version":3,"sources":["SortingAlgorithms/HeapSort.js","SortingAlgorithms/BubbleSort.js","SortingAlgorithms/InsertionSort.js","SortingAlgorithms/MergeSort.js","SortingAlgorithms/ModifiedQuickSort.js","SortingAlgorithms/QuickSort.js","SortingAlgorithms/SelectionSort.js","Components/Chart.js","SortingVisualizer/SortingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["array_length","getBubbleSortAnimations","array","animations","auxillaryArray","slice","N","length","i","j","push","swap","animatedBubbleSort","javaScriptSortedArray","sort","a","b","console","log","firstArray","secondArray","arraysAreEqual","firstIndex","secondIndex","temp","bubbleSort","arr","list","getHeapSortAnimations","Math","floor","heapify","animatedHeapSort","input","left","right","max","heap_root","heapSort","index_A","index_B","insertionSort","forEach","item","num","getMergeSortAnimations","animatedMergeSort","startIndex","endIndex","middleIndex","sortArray","merge","mergeSort","mid","arr1","arr2","sorted","shift","concat","mergeArrays","getModifiedQuickSortAnimations","animatedModifiedQuickSort","pivotIndex","pivot","partitionArray","modifiedQuickSort","low","high","middle","swapReferences","index1","index2","tmp","p","getQuickSortAnimations","animatedQuickSort","partition","quickSort","rQuickSort","pi","getSelectionSortAnimations","minIndex","animatedSelectionSort","selectionSort","min","Chart","props","state","chartData","className","data","this","options","title","display","displayTitle","text","fontSize","legend","displayLegend","position","legendPosition","scales","yAxes","scaleLabel","labelString","xAxes","Component","defaultProps","WINDOW_WIDTH","window","innerWidth","WINDOW_HEIGHT","innerHeight","NUMBER_OF_ARRAY_BARS","parseInt","bubbleSortData","heapSortData","insertionSortData","mergeSortData","modifiedQuickSortData","quickSortData","selectionSortData","onresize","document","DISABLED_BUTTON","ENABLED_BUTTON","SortingVisualizer","chartDataRandom","chartDataSorted","chartDataReversed","showGraphs","resetArray","random","setState","restoreButtons","reverse","getElementById","disabled","buttonStyle","style","cursor","background","disableButtons","isColorChange","arrayBars","getElementsByClassName","color","barOneIndex","barTwoIndex","barOneStyle","barTwoStyle","setTimeout","backgroundColor","barIndex","newHeight","barStyle","height","RESTORE_TIME","ANIMATION_SPEED_MS","key","animatedInsertionSort","getInsertionSortAnimations","barOneIdx","resetData","t0","arraySizes","t1","index","performance","now","average","getChartRandomData","labels","datasets","label","getChartSortedData","getChartReverseData","render","alert","getAllData","map","value","idx","id","top","onClick","reverseArray","modQuickSort","comparisonPlot","React","reduce","sume","el","App","Boolean","location","hostname","match","ReactDOM","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iKAWIA,E,sFCXG,SAASC,EAAwBC,GACpC,IAAIC,EAAa,GACbC,EAAiBF,EAAMG,SAQ/B,SAA4BD,EAAgBD,GAExC,IADA,IAAMG,EAAIF,EAAeG,OAChBC,EAAI,EAAGA,EAAIF,EAAI,EAAGE,IACvB,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAIE,EAAI,EAAGC,IAC3BN,EAAWO,KAAK,CAACD,EAAGA,EAAI,IACxBN,EAAWO,KAAK,CAACD,EAAGA,EAAI,IACpBL,EAAeK,GAAKL,EAAeK,EAAI,IACvCN,EAAWO,KAAK,CAACD,EAAGL,EAAeK,EAAI,KACvCN,EAAWO,KAAK,CAACD,EAAI,EAAGL,EAAeK,KACvCE,EAAKP,EAAgBK,EAAGA,EAAI,KAG5BN,EAAWO,KAAK,EAAE,GAAI,IACtBP,EAAWO,KAAK,EAAE,GAAI,KApBlCE,CAAmBR,EAAgBD,GACnC,IAAMU,EAAwBX,EAAMG,QAAQS,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,KAG/D,OAFAC,QAAQC,IAAI,gCA8BhB,SAAwBC,EAAYC,GAChC,GAAID,EAAWZ,SAAWa,EAAYb,OAClC,OAAO,EAEX,IAAK,IAAIC,EAAI,EAAGA,EAAIW,EAAWZ,OAAQC,IACnC,GAAIW,EAAWX,KAAOY,EAAYZ,GAC9B,OAAO,EAGf,OAAO,EAvCsCa,CAAeR,EAAuBT,IAE5E,CAACD,EADRD,EAAQE,GAuBZ,SAASO,EAAKP,EAAgBkB,EAAYC,GACtC,IAAIC,EAAOpB,EAAekB,GAC1BlB,EAAekB,GAAclB,EAAemB,GAC5CnB,EAAemB,GAAeC,EAe3B,SAASC,EAAWC,GAGvB,IAFA,IAAMf,EAAO,SAACgB,EAAMZ,EAAGC,GAAV,eAAqC,CAACW,EAAKX,GAAIW,EAAKZ,IAAnCY,EAAKZ,GAAtB,KAA0BY,EAAKX,GAA/B,QAEJR,EAAIkB,EAAInB,OAAQC,EAAI,EAAGA,IAC5B,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAI,EAAGC,IACnBiB,EAAIjB,GAAKiB,EAAIjB,EAAI,IAAIE,EAAKe,EAAKjB,EAAGA,EAAI,GAIlD,OAAOiB,EDvDJ,SAASE,EAAsB1B,GAClC,IAAIC,EAAa,GACbC,EAAiBF,EAAMG,SAW/B,SAA0BD,EAAgBD,GACtCH,EAAeI,EAAeG,OAE9B,IAAK,IAAIC,EAAIqB,KAAKC,MAAM9B,EAAe,GAAIQ,GAAK,EAAGA,GAAK,EACpDuB,EAAQ3B,EAAgBI,EAAGL,GAG/B,IAAKK,EAAIJ,EAAeG,OAAS,EAAGC,EAAI,EAAGA,IACvCG,EAAKP,EAAgB,EAAGI,GACxBR,IACAG,EAAWO,KAAK,CAAC,OAAQ,EAAGF,IAC5BuB,EAAQ3B,EAAgB,EAAGD,GArB/B6B,CAAiB5B,EAAgBD,GACjC,IAAMU,EAAwBX,EAAMG,QAAQS,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,KAG/D,OAFAC,QAAQC,IAAI,8BAsFhB,SAAwBC,EAAYC,GAChC,GAAID,EAAWZ,SAAWa,EAAYb,OAClC,OAAO,EAEX,IAAK,IAAIC,EAAI,EAAGA,EAAIW,EAAWZ,OAAQC,IACnC,GAAIW,EAAWX,KAAOY,EAAYZ,GAC9B,OAAO,EAGf,OAAO,EA/FoCa,CAAeR,EAAuBT,IAE1E,CAACD,EADRD,EAAQE,GAsBZ,SAAS2B,EAAQE,EAAOzB,EAAGL,GACvB,IAAI+B,EAAO,EAAI1B,EAAI,EACf2B,EAAQ,EAAI3B,EAAI,EAChB4B,EAAM5B,EAEN0B,EAAOlC,GAAgBiC,EAAMC,GAAQD,EAAMG,KAC3CA,EAAMF,GAGNC,EAAQnC,GAAgBiC,EAAME,GAASF,EAAMG,KAC7CA,EAAMD,GAGNC,IAAQ5B,IACRG,EAAKsB,EAAOzB,EAAG4B,GACfjC,EAAWO,KAAK,CAAC,OAAQF,EAAG4B,IAC5BL,EAAQE,EAAOG,EAAKjC,IAM5B,SAASkC,EAAUJ,EAAOzB,GACtB,IAAI0B,EAAO,EAAI1B,EAAI,EACf2B,EAAQ,EAAI3B,EAAI,EAChB4B,EAAM5B,EAEN0B,EAAOlC,GAAgBiC,EAAMC,GAAQD,EAAMG,KAC3CA,EAAMF,GAGNC,EAAQnC,GAAgBiC,EAAME,GAASF,EAAMG,KAC7CA,EAAMD,GAGNC,IAAQ5B,IACRG,EAAKsB,EAAOzB,EAAG4B,GACfC,EAAUJ,EAAOG,IAKlB,SAASE,EAASlC,GACrBJ,EAAeI,EAAeG,OAE9B,IAAK,IAAIC,EAAIqB,KAAKC,MAAM9B,EAAe,GAAIQ,GAAK,EAAGA,GAAK,EACpD6B,EAAUjC,EAAgBI,GAG9B,IAAKA,EAAIJ,EAAeG,OAAS,EAAGC,EAAI,EAAGA,IACvCG,EAAKP,EAAgB,EAAGI,GACxBR,IACAqC,EAAUjC,EAAgB,GAIlC,SAASO,EAAKsB,EAAOM,EAASC,GAC1B,IAAIhB,EAAOS,EAAMM,GAEjBN,EAAMM,GAAWN,EAAMO,GACvBP,EAAMO,GAAWhB,EE7Cd,SAASiB,EAAcf,GAW1B,OAVAA,EAAIgB,SAAQ,SAACC,EAAMnC,GACf,IACIC,EADAmC,EAAMlB,EAAIlB,GAGd,IAAKC,EAAID,EAAI,EAAGC,GAAK,GAAKiB,EAAIjB,GAAKmC,EAAKnC,IACpCiB,EAAIjB,EAAI,GAAKiB,EAAIjB,GAErBiB,EAAIjB,EAAI,GAAKmC,KAGVlB,ECvDJ,SAASmB,EAAuB3C,GACnC,IAAIC,EAAa,GACbC,EAAiBF,EAAMG,SAQ/B,SAASyC,EAAkB1C,EAAgB2C,EAAYC,EAAU7C,GAC7D,GAAI4C,IAAeC,EACf,OACJ,IAAMC,EAAcpB,KAAKC,OAAOiB,EAAaC,GAAY,GACzDF,EAAkB1C,EAAgB2C,EAAYE,EAAa9C,GAC3D2C,EAAkB1C,EAAgB6C,EAAc,EAAGD,EAAU7C,GAIjE,SAAeC,EAAgB2C,EAAYE,EAAaD,EAAU7C,GAC9D,IAAI+C,EAAY,GACZ1C,EAAIuC,EACJtC,EAAIwC,EAAc,EACtB,KAAOzC,GAAKyC,GAAexC,GAAKuC,GAE5B7C,EAAWO,KAAK,CAACF,EAAGC,IAEpBN,EAAWO,KAAK,CAACF,EAAGC,IAChBL,EAAeI,IAAMJ,EAAeK,IAEpCN,EAAWO,KAAK,CAACwC,EAAU3C,OAASwC,EAAY3C,EAAeI,KAC/D0C,EAAUxC,KAAKN,EAAeI,QAI9BL,EAAWO,KAAK,CAACwC,EAAU3C,OAASwC,EAAY3C,EAAeK,KAC/DyC,EAAUxC,KAAKN,EAAeK,OAGtC,KAAOD,GAAKyC,GACR9C,EAAWO,KAAK,CAACF,EAAGA,IACpBL,EAAWO,KAAK,CAACF,EAAGA,IACpBL,EAAWO,KAAK,CAACwC,EAAU3C,OAASwC,EAAY3C,EAAeI,KAC/D0C,EAAUxC,KAAKN,EAAeI,MAElC,KAAOC,GAAKuC,GACR7C,EAAWO,KAAK,CAACD,EAAGA,IACpBN,EAAWO,KAAK,CAACD,EAAGA,IACpBN,EAAWO,KAAK,CAACwC,EAAU3C,OAASwC,EAAY3C,EAAeK,KAC/DyC,EAAUxC,KAAKN,EAAeK,MAElC,IAAK,IAAID,EAAIuC,EAAYvC,GAAKwC,EAAUxC,IACpCJ,EAAeI,GAAK0C,EAAU1C,EAAIuC,GApCtCI,CAAM/C,EAAgB2C,EAAYE,EAAaD,EAAU7C,GAbzD2C,CAAkB1C,EAAgB,EAAGA,EAAeG,OAAS,EAAGJ,GAChE,IAAMU,EAAwBX,EAAMG,QAAQS,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,KAG/D,OAFAC,QAAQC,IAAI,+BAmDhB,SAAwBC,EAAYC,GAChC,GAAID,EAAWZ,SAAWa,EAAYb,OAClC,OAAO,EAEX,IAAK,IAAIC,EAAI,EAAGA,EAAIW,EAAWZ,OAAQC,IACnC,GAAIW,EAAWX,KAAOY,EAAYZ,GAC9B,OAAO,EAGf,OAAO,EA5DqCa,CAAeR,EAAuBT,IAE3E,CAACD,EADRD,EAAQE,GAyEL,SAASgD,EAAU1B,GACtB,GAAIA,EAAInB,QAAU,EAAG,OAAOmB,EAC5B,IAAI2B,EAAMxB,KAAKC,MAAMJ,EAAInB,OAAS,GAIlC,OAjBgB,SAAC+C,EAAMC,GAGvB,IAFA,IAAIC,EAAS,GAENF,EAAK/C,QAAUgD,EAAKhD,QACnB+C,EAAK,GAAKC,EAAK,GAAIC,EAAO9C,KAAK4C,EAAKG,SACnCD,EAAO9C,KAAK6C,EAAKE,SAG1B,OAAOD,EAAOE,OAAOJ,EAAKjD,QAAQqD,OAAOH,EAAKlD,UASvCsD,CAHIP,EAAU1B,EAAIrB,MAAM,EAAGgD,IACtBD,EAAU1B,EAAIrB,MAAMgD,KClF7B,SAASO,EAA+B1D,GAC3C,IAAIC,EAAa,GACbC,EAAiBF,EAAMG,SAU/B,SAASwD,EAA0BzD,EAAgB2C,EAAYC,EAAU7C,GACrE,IAAI2D,EACAf,EAAaC,IACbc,EAMR,SAAwB1D,EAAgB2C,EAAYC,EAAU7C,GAG1D,IAFA,IAAI4D,EAAQ3D,EAAe4C,GACvBc,EAAaf,EACRvC,EAAIuC,EAAYvC,GAAKwC,EAAW,EAAGxC,IACxCL,EAAWO,KAAK,CAACF,EAAGwC,IACpB7C,EAAWO,KAAK,CAACF,EAAGwC,IAChB5C,EAAeI,IAAMuD,GAErB5D,EAAWO,KAAK,CAACF,EAAGJ,EAAe0D,KACnC3D,EAAWO,KAAK,CAACoD,EAAY1D,EAAeI,KAC5CG,EAAKP,EAAgBI,EAAGsD,GACxBA,MAGA3D,EAAWO,KAAK,EAAE,GAAI,IACtBP,EAAWO,KAAK,EAAE,GAAI,KAE1BP,EAAWO,KAAK,EAAE,GAAI,IACtBP,EAAWO,KAAK,EAAE,GAAI,IAU1B,OARAP,EAAWO,KAAK,EAAE,GAAI,IACtBP,EAAWO,KAAK,EAAE,GAAI,IACtBP,EAAWO,KAAK,EAAE,GAAI,IACtBP,EAAWO,KAAK,EAAE,GAAI,IAEtBP,EAAWO,KAAK,CAACoD,EAAY1D,EAAe4C,KAC5C7C,EAAWO,KAAK,CAACsC,EAAU5C,EAAe0D,KAC1CnD,EAAKP,EAAgB0D,EAAYd,GAC1Bc,EAlCUE,CAAe5D,EAAgB2C,EAAYC,EAAU7C,GAClE0D,EAA0BzD,EAAgB2C,EAAYe,EAAa,EAAG3D,GACtE0D,EAA0BzD,EAAgB0D,EAAa,EAAGd,EAAU7C,IAdxE0D,CAA0BzD,EAAgB,EAAGA,EAAeG,OAAS,EAAGJ,GACxE,IAAMU,EAAwBX,EAAMG,QAAQS,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,KAG/D,OAFAC,QAAQC,IAAI,+BAyGhB,SAAwBC,EAAYC,GAChC,GAAID,EAAWZ,SAAWa,EAAYb,OAClC,OAAO,EAEX,IAAK,IAAIC,EAAI,EAAGA,EAAIW,EAAWZ,OAAQC,IACnC,GAAIW,EAAWX,KAAOY,EAAYZ,GAC9B,OAAO,EAGf,OAAO,EAlHqCa,CAAeR,EAAuBT,IAE3E,CAACD,EADRD,EAAQE,GA8CZ,SAASO,EAAKP,EAAgBkB,EAAYC,GACtC,IAAIC,EAAOpB,EAAekB,GAC1BlB,EAAekB,GAAclB,EAAemB,GAC5CnB,EAAemB,GAAeC,EAI3B,SAASyC,EAAkBlD,GAA8B,IAA3BmD,EAA0B,uDAApB,EAAGC,EAAiB,uDAAVpD,EAAER,OACnD,GAAI2D,EAlDO,IAkDSC,EAAK,CAErB,IAAIC,EAASvC,KAAKC,OAAOoC,EAAMC,GAAQ,GACnCpD,EAAEqD,GAAUrD,EAAEmD,IACdG,EAAetD,EAAGmD,EAAKE,GACvBrD,EAAEoD,GAAQpD,EAAEmD,IACZG,EAAetD,EAAGmD,EAAKC,GACvBpD,EAAEoD,GAAQpD,EAAEqD,IACZC,EAAetD,EAAGqD,EAAQD,GAG9BE,EAAetD,EAAGqD,EAAQD,EAAO,GACjC,IAGI3D,EAAGC,EAHHsD,EAAQhD,EAAEoD,EAAO,GAIrB,IAAK3D,EAAI0D,EAAKzD,EAAI0D,EAAO,IAAM,CAC3B,KAAOpD,IAAIP,GAAKuD,IAChB,KAAOA,EAAQhD,IAAIN,KACnB,KAAID,EAAIC,GAEH,MADD4D,EAAetD,EAAGP,EAAGC,GAI7B4D,EAAetD,EAAGP,EAAG2D,EAAO,GAE5BF,EAAkBlD,EAAGmD,EAAK1D,EAAI,GAC9ByD,EAAkBlD,EAAGP,EAAI,EAAG2D,QAE5B1B,EAAc1B,EAAGmD,EAAKC,GAI9B,SAASE,EAAetD,EAAGuD,EAAQC,GAC/B,IAAIC,EAAMzD,EAAEuD,GACZvD,EAAEuD,GAAUvD,EAAEwD,GACdxD,EAAEwD,GAAUC,EAGhB,SAAS/B,EAAc1B,GACnB,IADiD,IAA3BmD,EAA0B,uDAApB,EAAGC,EAAiB,uDAAVpD,EAAER,OAC/BkE,EAAIP,EAAM,EAAGO,GAAKN,EAAMM,IAAK,CAClC,IAAID,EAAMzD,EAAE0D,GACRhE,OAAC,EAEL,IAAKA,EAAIgE,EAAGhE,EAAIyD,GAAOM,EAAMzD,EAAEN,EAAI,GAAIA,IACnCM,EAAEN,GAAKM,EAAEN,EAAI,GACjBM,EAAEN,GAAK+D,GCvGR,SAASE,EAAuBxE,GACnC,IAAIC,EAAa,GACbC,EAAiBF,EAAMG,SAQ/B,SAASsE,EAAkBvE,EAAgB2C,EAAYC,EAAU7C,GAC7D,IAAI2D,EACAf,EAAaC,IACbc,EAMR,SAAwB1D,EAAgB2C,EAAYC,EAAU7C,GAG1D,IAFA,IAAI4D,EAAQ3D,EAAe4C,GACvBc,EAAaf,EACRvC,EAAIuC,EAAYvC,GAAKwC,EAAW,EAAGxC,IACxCL,EAAWO,KAAK,CAACF,EAAGwC,IACpB7C,EAAWO,KAAK,CAACF,EAAGwC,IAChB5C,EAAeI,IAAMuD,GAErB5D,EAAWO,KAAK,CAACF,EAAGJ,EAAe0D,KACnC3D,EAAWO,KAAK,CAACoD,EAAY1D,EAAeI,KAC5CG,EAAKP,EAAgBI,EAAGsD,GACxBA,MAGA3D,EAAWO,KAAK,EAAE,GAAI,IACtBP,EAAWO,KAAK,EAAE,GAAI,KAE1BP,EAAWO,KAAK,EAAE,GAAI,IACtBP,EAAWO,KAAK,EAAE,GAAI,IAU1B,OARAP,EAAWO,KAAK,EAAE,GAAI,IACtBP,EAAWO,KAAK,EAAE,GAAI,IACtBP,EAAWO,KAAK,EAAE,GAAI,IACtBP,EAAWO,KAAK,EAAE,GAAI,IAEtBP,EAAWO,KAAK,CAACoD,EAAY1D,EAAe4C,KAC5C7C,EAAWO,KAAK,CAACsC,EAAU5C,EAAe0D,KAC1CnD,EAAKP,EAAgB0D,EAAYd,GAC1Bc,EAlCUE,CAAe5D,EAAgB2C,EAAYC,EAAU7C,GAClEwE,EAAkBvE,EAAgB2C,EAAYe,EAAa,EAAG3D,GAC9DwE,EAAkBvE,EAAgB0D,EAAa,EAAGd,EAAU7C,IAZhEwE,CAAkBvE,EAAgB,EAAGA,EAAeG,OAAS,EAAGJ,GAChE,IAAMU,EAAwBX,EAAMG,QAAQS,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,KAG/D,OAFAC,QAAQC,IAAI,+BAoGhB,SAAwBC,EAAYC,GAChC,GAAID,EAAWZ,SAAWa,EAAYb,OAClC,OAAO,EAEX,IAAK,IAAIC,EAAI,EAAGA,EAAIW,EAAWZ,OAAQC,IACnC,GAAIW,EAAWX,KAAOY,EAAYZ,GAC9B,OAAO,EAGf,OAAO,EA7GqCa,CAAeR,EAAuBT,IAE3E,CAACD,EADRD,EAAQE,GA4CZ,SAASO,EAAKP,EAAgBkB,EAAYC,GACtC,IAAIC,EAAOpB,EAAekB,GAC1BlB,EAAekB,GAAclB,EAAemB,GAC5CnB,EAAemB,GAAeC,EAQlC,SAASoD,EAAUlD,EAAKwC,EAAKC,GAIzB,IAHA,IAAIJ,EAAQrC,EAAIyC,GACZ3D,EAAK0D,EAAM,EAENzD,EAAIyD,EAAKzD,GAAK0D,EAAO,EAAG1D,IAGzBiB,EAAIjB,IAAMsD,GAEVpD,EAAKe,IADLlB,EACaC,GAIrB,OADAE,EAAKe,EAAKlB,EAAI,EAAG2D,GACT3D,EAAI,EAyBT,SAASqE,EAAUnD,GAEtB,OArBJ,SAASoD,EAAWpD,EAAKwC,EAAKC,GAE1B,KAAOD,EAAMC,GAAM,CAGf,IAAIY,EAAKH,EAAUlD,EAAKwC,EAAKC,GAEzBY,EAAKb,EAAMC,EAAOY,GAClBD,EAAWpD,EAAKwC,EAAKa,EAAK,GAC1Bb,EAAMa,EAAK,IAGXD,EAAWpD,EAAKqD,EAAK,EAAGZ,GACxBA,EAAOY,EAAK,IAOpBD,CAAWpD,EAAK,EAAGA,EAAInB,OAAS,GACzBmB,ECzGJ,SAASsD,EAA2B9E,GACvC,IAAIC,EAAa,GACbC,EAAiBF,EAAMG,SAQ/B,SAA+BD,EAAgBD,GAE3C,IADA,IAAMG,EAAIF,EAAeG,OAChBC,EAAI,EAAGA,EAAIF,EAAI,EAAGE,IAAK,CAE5B,IADA,IAAIyE,EAAWzE,EACNC,EAAID,EAAI,EAAGC,EAAIH,EAAGG,IACvBN,EAAWO,KAAK,CAAC,eAAgBD,EAAGwE,IACpC9E,EAAWO,KAAK,CAAC,eAAgBD,EAAGwE,IAChC7E,EAAeK,GAAKL,EAAe6E,KACnCA,EAAWxE,GAGnBN,EAAWO,KAAK,CAAC,OAAQuE,EAAU7E,EAAeI,KAClDL,EAAWO,KAAK,CAAC,OAAQF,EAAGJ,EAAe6E,KAE3CtE,EAAKP,EAAgB6E,EAAUzE,IArBnC0E,CAAsB9E,EAAgBD,GACtC,IAAMU,EAAwBX,EAAMG,QAAQS,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,KAG/D,OAFAC,QAAQC,IAAI,mCA6BhB,SAAwBC,EAAYC,GAChC,GAAID,EAAWZ,SAAWa,EAAYb,OAClC,OAAO,EAEX,IAAK,IAAIC,EAAI,EAAGA,EAAIW,EAAWZ,OAAQC,IACnC,GAAIW,EAAWX,KAAOY,EAAYZ,GAC9B,OAAO,EAGf,OAAO,EAtCyCa,CAAeR,EAAuBT,IAE/E,CAACD,EADRD,EAAQE,GAsBZ,SAASO,EAAKP,EAAgBkB,EAAYC,GACtC,IAAIC,EAAOpB,EAAekB,GAC1BlB,EAAekB,GAAclB,EAAemB,GAC5CnB,EAAemB,GAAeC,EAgB3B,SAAS2D,EAAczD,GAW1B,OARAA,EAAIgB,SAAQ,SAACC,EAAMnC,GAEf,IADA,IAAI4E,EAAM5E,EACDC,EAAID,EAAI,EAAGC,EAAIiB,EAAInB,OAAQE,IAC5BiB,EAAIjB,GAAKiB,EAAI0D,KAAMA,EAAM3E,IALxB,SAACkB,EAAMZ,EAAGC,GAAV,QAAqC,CAACW,EAAKX,GAAIW,EAAKZ,IAAnCY,EAAKZ,GAAtB,KAA0BY,EAAKX,GAA/B,KAOTL,CAAKe,EAAKlB,EAAG4E,MAGV1D,E,YCvDL2D,E,kDACF,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,UAAWF,EAAME,WAHN,E,qDAef,OACI,yBAAKC,UAAU,SACX,kBAAC,IAAD,CACIC,KAAMC,KAAKJ,MAAMC,UACjBI,QAAS,CACLC,MAAO,CACHC,QAASH,KAAKL,MAAMS,aACpBC,KAAML,KAAKL,MAAMO,MACjBI,SAAU,IAEdC,OAAQ,CACJJ,QAASH,KAAKL,MAAMa,cACpBC,SAAUT,KAAKL,MAAMe,gBAEzBC,OAAQ,CACJC,MAAO,CAAC,CACJC,WAAY,CACRV,SAAS,EACTW,YAAa,kCAGrBC,MAAO,CAAC,CACJF,WAAY,CACRV,SAAS,EACTW,YAAa,yB,GAxC7BE,aAAdtB,EAQKuB,aAAe,CAClBb,cAAc,EACdI,eAAe,EACfE,eAAgB,QAChBR,MAAO,aAsDAR,QCzDXwB,EAAeC,OAAOC,WACtBC,EAAgBF,OAAOG,YACvBC,EAAuBC,UAAUN,EAAe,KAAO,GAEvDO,EAAiB,GACjBC,EAAe,GACfC,EAAoB,GACpBC,EAAgB,GAChBC,EAAwB,GACxBC,EAAgB,GAChBC,EAAoB,GAQxBZ,OAAOa,SALP,WACId,EAAeC,OAAOC,WACtBC,EAAgBF,OAAOG,YACvBC,EAAuBC,UAAUN,EAAe,KAAO,IAG3De,SAAS/B,MAAQ,qBAEjB,IAKMgC,EAAkB,qBAClBC,EACa,mCADbA,EAEU,iCAFVA,EAGa,iCAHbA,EAIQ,kDAJRA,GAKS,6CALTA,GAMS,kDANTA,GAOW,mDAPXA,GAQmB,wCARnBA,GASmB,+BATnBA,GAUqB,iCAGrBC,G,kDACF,WAAYzC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTrF,MAAO,GACP8H,gBAAiB,GACjBC,gBAAiB,GACjBC,kBAAmB,GACnBC,YAAY,GAPD,E,gEAYfxC,KAAKyC,e,mCAOL,IADA,IAqzBuBhD,EAAKhD,EArzBtBlC,EAAQ,GACLM,EAAI,EAAGA,EAAI0G,EAAsB1G,IACtCN,EAAMQ,MAmzBa0E,EAnzBc,GAmzBThD,EAnzBa4E,EAAgB,GAmzBfnF,KAAKC,MAAMD,KAAKwG,UAAYjG,EAAMgD,EAAM,GAAKA,KAjzBvFO,KAAK2C,SAAS,CAAEpI,MAAOA,IACvByF,KAAK4C,mB,kCAKL5C,KAAKyC,aACL,IAAM5E,EAASmC,KAAKJ,MAAMrF,MAAMG,QAAQS,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,KAC3D2E,KAAK2C,SAAS,CAAEpI,MAAOsD,M,qCAKvBmC,KAAKyC,aACL,IAAMI,EAAU7C,KAAKJ,MAAMrF,MAAMG,QAAQS,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,KAAGwH,UAC/D7C,KAAK2C,SAAS,CAAEpI,MAAOsI,M,uCAIvBZ,SAASa,eAAe,YAAYC,UAAW,EAC/C,IAAIC,EAAcf,SAASa,eAAe,YAAYG,MACtDhB,SAASa,eAAe,YAAY5C,MAAQgC,EAC5Cc,EAAYE,OAAS,OACrBF,EAAYG,WAAa,UAEzBlB,SAASa,eAAe,aAAaC,UAAW,EAChDC,EAAcf,SAASa,eAAe,aAAaG,MACnDhB,SAASa,eAAe,aAAa5C,MAAQgC,EAC7Cc,EAAYE,OAAS,OACrBF,EAAYG,WAAa,UAEzBlB,SAASa,eAAe,gBAAgBC,UAAW,EACnDC,EAAcf,SAASa,eAAe,gBAAgBG,MACtDhB,SAASa,eAAe,gBAAgB5C,MAAQgC,EAChDc,EAAYE,OAAS,OACrBF,EAAYG,WAAa,UAEzBlB,SAASa,eAAe,aAAaC,UAAW,EAChDC,EAAcf,SAASa,eAAe,aAAaG,MACnDhB,SAASa,eAAe,aAAa5C,MAAQgC,EAC7Cc,EAAYE,OAAS,OACrBF,EAAYG,WAAa,UAEzBlB,SAASa,eAAe,aAAaC,UAAW,EAChDC,EAAcf,SAASa,eAAe,aAAaG,MACnDhB,SAASa,eAAe,aAAa5C,MAAQgC,EAC7Cc,EAAYE,OAAS,OACrBF,EAAYG,WAAa,UAEzBlB,SAASa,eAAe,iBAAiBC,UAAW,EACpDC,EAAcf,SAASa,eAAe,iBAAiBG,MACvDhB,SAASa,eAAe,iBAAiB5C,MAAQgC,EACjDc,EAAYE,OAAS,OACrBF,EAAYG,WAAa,UAEzBlB,SAASa,eAAe,YAAYC,UAAW,EAC/CC,EAAcf,SAASa,eAAe,YAAYG,MAClDhB,SAASa,eAAe,YAAY5C,MAAQgC,EAC5Cc,EAAYE,OAAS,OACrBF,EAAYG,WAAa,UAEzBlB,SAASa,eAAe,iBAAiBC,UAAW,EACpDC,EAAcf,SAASa,eAAe,iBAAiBG,MACvDhB,SAASa,eAAe,iBAAiB5C,MAAQgC,EACjDc,EAAYE,OAAS,OACrBF,EAAYG,WAAa,UAEzBlB,SAASa,eAAe,cAAcC,UAAW,EACjDC,EAAcf,SAASa,eAAe,cAAcG,MACpDhB,SAASa,eAAe,cAAc5C,MAAQgC,EAC9Cc,EAAYE,OAAS,OACrBF,EAAYG,WAAa,UAEzBlB,SAASa,eAAe,gBAAgBC,UAAW,EACnDC,EAAcf,SAASa,eAAe,gBAAgBG,MACtDhB,SAASa,eAAe,gBAAgB5C,MAAQgC,EAChDc,EAAYE,OAAS,OACrBF,EAAYG,WAAa,UAEzBlB,SAASa,eAAe,kBAAkBC,UAAW,EACrDC,EAAcf,SAASa,eAAe,kBAAkBG,MACxDhB,SAASa,eAAe,kBAAkB5C,MAAQgC,EAClDc,EAAYE,OAAS,OACrBF,EAAYG,WAAa,Y,uCAIzBlB,SAASa,eAAe,YAAYC,UAAW,EAC/C,IAAIC,EAAcf,SAASa,eAAe,YAAYG,MACtDhB,SAASa,eAAe,YAAY5C,MAAQiC,GAC5Ca,EAAYG,WAAa,UACzBH,EAAYE,OAAS,UAErBjB,SAASa,eAAe,aAAaC,UAAW,EAChDC,EAAcf,SAASa,eAAe,aAAaG,MACnDhB,SAASa,eAAe,aAAa5C,MAAQiC,GAC7Ca,EAAYG,WAAa,UACzBH,EAAYE,OAAS,UAErBjB,SAASa,eAAe,gBAAgBC,UAAW,EACnDC,EAAcf,SAASa,eAAe,gBAAgBG,MACtDhB,SAASa,eAAe,gBAAgB5C,MAAQiC,GAChDa,EAAYG,WAAa,UACzBH,EAAYE,OAAS,UAErBjB,SAASa,eAAe,aAAaC,UAAW,EAChDC,EAAcf,SAASa,eAAe,aAAaG,MACnDhB,SAASa,eAAe,aAAa5C,MAAQiC,GAC7Ca,EAAYG,WAAa,UACzBH,EAAYE,OAAS,UAErBjB,SAASa,eAAe,aAAaC,UAAW,EAChDC,EAAcf,SAASa,eAAe,aAAaG,MACnDhB,SAASa,eAAe,aAAa5C,MAAQiC,GAC7Ca,EAAYG,WAAa,UACzBH,EAAYE,OAAS,UAErBjB,SAASa,eAAe,cAAcC,UAAW,EACjDC,EAAcf,SAASa,eAAe,cAAcG,MACpDhB,SAASa,eAAe,cAAc5C,MAAQiC,EAC9Ca,EAAYG,WAAa,UACzBH,EAAYE,OAAS,UAErBjB,SAASa,eAAe,iBAAiBC,UAAW,EACpDC,EAAcf,SAASa,eAAe,iBAAiBG,MACvDhB,SAASa,eAAe,iBAAiB5C,MAAQiC,EACjDa,EAAYG,WAAa,UACzBH,EAAYE,OAAS,UAErBjB,SAASa,eAAe,iBAAiBC,UAAW,EACpDC,EAAcf,SAASa,eAAe,iBAAiBG,MACvDhB,SAASa,eAAe,iBAAiB5C,MAAQiC,EACjDa,EAAYG,WAAa,UACzBH,EAAYE,OAAS,UAErBjB,SAASa,eAAe,YAAYC,UAAW,EAC/CC,EAAcf,SAASa,eAAe,YAAYG,MAClDhB,SAASa,eAAe,YAAY5C,MAAQiC,EAC5Ca,EAAYG,WAAa,UACzBH,EAAYE,OAAS,UAErBjB,SAASa,eAAe,gBAAgBC,UAAW,EACnDC,EAAcf,SAASa,eAAe,gBAAgBG,MACtDhB,SAASa,eAAe,gBAAgB5C,MAAQiC,GAChDa,EAAYG,WAAa,UACzBH,EAAYE,OAAS,UAErBjB,SAASa,eAAe,kBAAkBC,UAAW,EACrDC,EAAcf,SAASa,eAAe,kBAAkBG,MACxDhB,SAASa,eAAe,kBAAkB5C,MAAQiC,GAClDa,EAAYG,WAAa,UACzBH,EAAYE,OAAS,Y,mCAKX,IAAD,OACTlD,KAAKoD,iBAEL,IAHS,MAEuB9I,EAAwB0F,KAAKJ,MAAMrF,OAF1D,mBAEFC,EAFE,KAEU+C,EAFV,KAGA1C,EAAI,EAAGA,EAAIL,EAAWI,OAAQC,IAAK,CACxC,IAAMwI,EAAiBxI,EAAI,IAAM,GAAOA,EAAI,IAAM,EAC5CyI,EAAYrB,SAASsB,uBAAuB,aAClD,IAAsB,IAAlBF,GAAyB,WACzB,IAAMG,EAAS3I,EAAI,IAAM,EA5MjB,YADF,aA4MkB,cAEWL,EAAWK,GAFtB,GAEjB4I,EAFiB,KAEJC,EAFI,KAGlBC,EAAcL,EAAUG,GAAaR,MACrCW,EAAcN,EAAUI,GAAaT,MAC3CY,YAAW,WACPF,EAAYG,gBAAkBN,EAC9BI,EAAYE,gBAAkBN,IAjNvB,EAkNR3I,GARsB,QAUxB,6CAC6BL,EAAWK,GADxC,GACMkJ,EADN,KACgBC,EADhB,KAED,IAAkB,IAAdD,EACA,iBAEJ,IAAME,EAAWX,EAAUS,GAAUd,MACrCY,YAAW,WACPI,EAASC,OAAT,UAAqBF,EAArB,QA3NO,EA4NRnJ,GARF,GAGG,SASZ,IAAMsJ,EAAe3C,SAhOF,EAgOgChH,EAAWI,OAAS,EAAI,KAC3EiJ,YAAW,kBAAM,EAAKjB,mBAAkBuB,GACxCN,YAAW,kBAAM,EAAKlB,SAAS,CAAEpI,MAAOgD,MAAc4G,K,iCAG9C,IAAD,OACPnE,KAAKoD,iBAEL,IAHO,MAEyBnH,EAAsB+D,KAAKJ,MAAMrF,OAF1D,mBAEAC,EAFA,KAEY+C,EAFZ,gBAGE1C,GACL,IAAMyI,EAAYrB,SAASsB,uBAAuB,aAJ/C,cAKsC/I,EAAWK,GALjD,GAKU4I,GALV,WAKuBC,EALvB,KAMGC,EAAcL,EAAUG,GAAaR,MACrCW,EAAcN,EAAUI,GAAaT,MAC3CY,YAAW,WACPF,EAAYG,gBA/OJ,YAgPRF,EAAYE,gBAhPJ,cACG,EAgPXjJ,EAA2B,EAAMuJ,GACrCP,YAAW,WACP,IAAIG,EAAYJ,EAAYM,OAC5BN,EAAYM,OAASP,EAAYO,OACjCP,EAAYO,OAASF,IApPV,EAqPXnJ,EAA2B,EAAMuJ,GACrCP,YAAW,WACPF,EAAYG,gBAzPN,aA0PNF,EAAYE,gBA1PN,eAEK,EAyPXjJ,EAA2B,EAAMuJ,IAjBhCvJ,EAAI,EAAGA,EAAIL,EAAWI,OAAQC,IAAM,EAApCA,GAmBT,IAAMsJ,EAAe3C,SA3PF,EA2PgChH,EAAWI,OAAS,GACvEiJ,YAAW,kBAAM,EAAKjB,mBAAkBuB,GACxCN,YAAW,kBAAM,EAAKlB,SAAS,CAAEpI,MAAOgD,MAAc4G,K,sCAGzC,IAAD,OACZnE,KAAKoD,iBAEL,IAHY,MNnSb,SAAoC7I,GACvC,IAAIC,EAAa,GACbC,EAAiBF,EAAMG,SAQ/B,SAA+BD,EAAgBD,GAE3C,IADA,IAAMG,EAAIF,EAAeG,OAChBC,EAAI,EAAGA,EAAIF,EAAGE,IAAK,CACxB,IAAIwJ,EAAM5J,EAAeI,GACrBC,EAAID,EAAI,EAGZ,IAFAL,EAAWO,KAAK,CAAC,eAAgBD,EAAGD,IACpCL,EAAWO,KAAK,CAAC,eAAgBD,EAAGD,IAC7BC,GAAK,GAAKL,EAAeK,GAAKuJ,GACjC7J,EAAWO,KAAK,CAAC,YAAaD,EAAI,EAAGL,EAAeK,KACpDL,EAAeK,EAAI,GAAKL,EAAeK,IACvCA,GAAQ,IACC,IACLN,EAAWO,KAAK,CAAC,eAAgBD,EAAGD,IACpCL,EAAWO,KAAK,CAAC,eAAgBD,EAAGD,KAG5CL,EAAWO,KAAK,CAAC,YAAaD,EAAI,EAAGuJ,IACrC5J,EAAeK,EAAI,GAAKuJ,GAxB5BC,CAAsB7J,EAAgBD,GACtC,IAAMU,EAAwBX,EAAMG,QAAQS,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,KAG/D,OAFAC,QAAQC,IAAI,mCA0BhB,SAAwBC,EAAYC,GAChC,GAAID,EAAWZ,SAAWa,EAAYb,OAClC,OAAO,EAEX,IAAK,IAAIC,EAAI,EAAGA,EAAIW,EAAWZ,OAAQC,IACnC,GAAIW,EAAWX,KAAOY,EAAYZ,GAC9B,OAAO,EAGf,OAAO,EAnCyCa,CAAeR,EAAuBT,IAE/E,CAACD,EADRD,EAAQE,GM+R4B8J,CAA2BvE,KAAKJ,MAAMrF,OAF1D,mBAELC,EAFK,KAEO+C,EAFP,KAGH1C,EAAI,EAAGA,EAAIL,EAAWI,OAAQC,IAAK,CACxC,IAAMwI,EAAsC,iBAArB7I,EAAWK,GAAG,IAAgD,iBAArBL,EAAWK,GAAG,GACxEyI,EAAYrB,SAASsB,uBAAuB,cAC5B,IAAlBF,EAAyB,WACzB,IAAMG,EAA8B,iBAArBhJ,EAAWK,GAAG,GAxQrB,YADF,aAwQkB,cAEiBL,EAAWK,GAF5B,GAEX4I,GAFW,WAEEC,EAFF,KAGlBC,EAAcL,EAAUG,GAAaR,MACrCW,EAAcN,EAAUI,GAAaT,MAC3CY,YAAW,WACPF,EAAYG,gBAAkBN,EAC9BI,EAAYE,gBAAkBN,IA7QvB,EA8QR3I,GARsB,GAUvB,WAAD,kBACmCL,EAAWK,GAD9C,GACYkJ,GADZ,WACsBC,EADtB,KAEKC,EAAWX,EAAUS,GAAUd,MACrCY,YAAW,WACPI,EAASC,OAAT,UAAqBF,EAArB,QApRO,EAqRRnJ,GALD,GASV,IAAMsJ,EAAe3C,SAzRF,EAyRgChH,EAAWI,QAC9DiJ,YAAW,kBAAM,EAAKjB,mBAAkBuB,GACxCN,YAAW,kBAAM,EAAKlB,SAAS,CAAEpI,MAAOgD,MAAc4G,K,kCAG7C,IAAD,OACRnE,KAAKoD,iBAEL,IAHQ,MAEwBlG,EAAuB8C,KAAKJ,MAAMrF,OAF1D,mBAEDC,EAFC,KAEW+C,EAFX,gBAGC1C,GACL,IAAMwI,EAAiBxI,EAAI,IAAM,EAC3ByI,EAAYrB,SAASsB,uBAAuB,aAClD,IAAsB,IAAlBF,EAAwB,CAAC,IAAD,cACW7I,EAAWK,GADtB,GACjB4I,EADiB,KACJC,EADI,KAElBF,EAAS3I,EAAI,IAAM,EAvSjB,YADF,aAySA8I,EAAcL,EAAUG,GAAaR,MACrCW,EAAcN,EAAUI,GAAaT,MAE3CY,YAAW,WACPF,EAAYG,gBAAkBN,EAC9BI,EAAYE,gBAAkBN,IA5SvB,EA6SR3I,QAIHgJ,YAAW,WAAO,IAAD,cACkBrJ,EAAWK,GAD7B,GACN2J,EADM,KACKR,EADL,KAEOV,EAAUkB,GAAWvB,MAC7BiB,OAAZ,UAAwBF,EAAxB,QApTO,EAqTRnJ,IApBFA,EAAI,EAAGA,EAAIL,EAAWI,OAAQC,IAAM,EAApCA,GAwBT,IAAMsJ,EAAe3C,SAzTF,EAyTgChH,EAAWI,OAAS,EAAI,KAC3EiJ,YAAW,kBAAM,EAAKjB,mBAAkBuB,GACxCN,YAAW,kBAAM,EAAKlB,SAAS,CAAEpI,MAAOgD,MAAc4G,K,qCAG1C,IAAD,OACXnE,KAAKoD,iBAEL,IAHW,MAEqBnF,EAA+B+B,KAAKJ,MAAMrF,OAF/D,mBAEJC,EAFI,KAEQ+C,EAFR,KAGF1C,EAAI,EAAGA,EAAIL,EAAWI,OAAS,EAAGC,IAAK,CAC5C,IAAMwI,EAAiBxI,EAAI,IAAM,GAAOA,EAAI,IAAM,EAC5CyI,EAAYrB,SAASsB,uBAAuB,aAClD,IAAsB,IAAlBF,GAAwB,2BACxB,IAAMG,EAAS3I,EAAI,IAAM,EAtUjB,YADF,aAsUkB,cAEWL,EAAWK,GAFtB,GAEjB4I,EAFiB,KAEJC,EAFI,KAGxB,IAAqB,IAAjBD,EACA,iBAEJ,IAAME,EAAcL,EAAUG,GAAaR,MACrCW,EAAcN,EAAUI,GAAaT,MAC3CY,YAAW,WACPF,EAAYG,gBAAkBN,EAC9BI,EAAYE,gBAAkBN,IA9UvB,EA+UR3I,GAXqB,GAIpB,cASH,6CAC6BL,EAAWK,GADxC,GACMkJ,EADN,KACgBC,EADhB,KAED,IAAkB,IAAdD,EACA,iBAEJ,IAAME,EAAWX,EAAUS,GAAUd,MACrCY,YAAW,WACPI,EAASC,OAAT,UAAqBF,EAArB,QAxVO,EAyVRnJ,GARF,GAGG,SAQZ,IAAMsJ,EAAe3C,SA5VF,EA4VgChH,EAAWI,OAAS,EAAI,KAC3EiJ,YAAW,kBAAM,EAAKjB,mBAAkBuB,GACxCN,YAAW,kBAAM,EAAKlB,SAAS,CAAEpI,MAAOgD,MAAc4G,K,kCAG7C,IAAD,OACRnE,KAAKoD,iBAEL,IAHQ,MAEwBrE,EAAuBiB,KAAKJ,MAAMrF,OAF1D,mBAEDC,EAFC,KAEW+C,EAFX,KAGC1C,EAAI,EAAGA,EAAIL,EAAWI,OAAS,EAAGC,IAAK,CAC5C,IAAMwI,EAAiBxI,EAAI,IAAM,GAAOA,EAAI,IAAM,EAC5CyI,EAAYrB,SAASsB,uBAAuB,aAClD,IAAsB,IAAlBF,GAAwB,2BACxB,IAAMG,EAAS3I,EAAI,IAAM,EAzWjB,YADF,aAyWkB,cAEWL,EAAWK,GAFtB,GAEjB4I,EAFiB,KAEJC,EAFI,KAGxB,IAAqB,IAAjBD,EACA,iBAEJ,IAAME,EAAcL,EAAUG,GAAaR,MACrCW,EAAcN,EAAUI,GAAaT,MAC3CY,YAAW,WACPF,EAAYG,gBAAkBN,EAC9BI,EAAYE,gBAAkBN,IAjXvB,EAkXR3I,GAXqB,GAIpB,cASH,6CAC6BL,EAAWK,GADxC,GACMkJ,EADN,KACgBC,EADhB,KAED,IAAkB,IAAdD,EACA,iBAEJ,IAAME,EAAWX,EAAUS,GAAUd,MACrCY,YAAW,WACPI,EAASC,OAAT,UAAqBF,EAArB,QA3XO,EA4XRnJ,GARF,GAGG,SAQZ,IAAMsJ,EAAe3C,SA/XF,EA+XgChH,EAAWI,OAAS,EAAI,KAC3EiJ,YAAW,kBAAM,EAAKjB,mBAAkBuB,GACxCN,YAAW,kBAAM,EAAKlB,SAAS,CAAEpI,MAAOgD,MAAc4G,K,sCAIzC,IAAD,OACZnE,KAAKoD,iBAEL,IAHY,MAEoB/D,EAA2BW,KAAKJ,MAAMrF,OAF1D,mBAELC,EAFK,KAEO+C,EAFP,KAGH1C,EAAI,EAAGA,EAAIL,EAAWI,OAAQC,IAAK,CACxC,IAAMwI,EAAsC,iBAArB7I,EAAWK,GAAG,IAAgD,iBAArBL,EAAWK,GAAG,GACxEyI,EAAYrB,SAASsB,uBAAuB,cAC5B,IAAlBF,EAAyB,WACzB,IAAMG,EAA8B,iBAArBhJ,EAAWK,GAAG,GA7YrB,YADF,aA6YkB,cAEiBL,EAAWK,GAF5B,GAEX4I,GAFW,WAEEC,EAFF,KAGlBC,EAAcL,EAAUG,GAAaR,MACrCW,EAAcN,EAAUI,GAAaT,MAC3CY,YAAW,WACPF,EAAYG,gBAAkBN,EAC9BI,EAAYE,gBAAkBN,IAlZvB,EAmZR3I,GARsB,GAUvB,WAAD,kBACmCL,EAAWK,GAD9C,GACYkJ,GADZ,WACsBC,EADtB,KAEKC,EAAWX,EAAUS,GAAUd,MACrCY,YAAW,WACPI,EAASC,OAAT,UAAqBF,EAArB,QAzZO,EA0ZRnJ,GALD,GASV,IAAMsJ,EAAe3C,SA9ZF,EA8ZgChH,EAAWI,OAAS,EAAI,KAC3EiJ,YAAW,kBAAM,EAAKjB,mBAAkBuB,GACxCN,YAAW,kBAAM,EAAKlB,SAAS,CAAEpI,MAAOgD,MAAc4G,K,2CAKtDnE,KAAKyE,YAIL,IAHA,IAEIC,EAFAC,EAAa,CAAC,IAAM,IAAM,IAAM,IAAM,IAAO,IAAO,KACpDpK,EAAQ,GACJqK,EAAK,EACJC,EAAQ,EAAGA,EAAQF,EAAW/J,SAAUiK,EAAO,CACpDtK,EAAQ,GACR,IAAK,IAAIM,EAAI,EAAGA,EAAI8J,EAAWE,GAAQhK,IAAON,EAAMQ,KAAKmB,KAAKwG,UAE9D,IADA,IAAI7D,EAAM,GACDhE,EAAI,EAAGA,EAAK8J,EAAW/J,OAASiK,EAAQhK,IAC7C6J,EAAKI,YAAYC,MACjBjJ,EAAWvB,EAAMG,SACjBkK,EAAKE,YAAYC,MACjBlG,EAAI9D,KAAK6J,EAAKF,GAElBjD,EAAe1G,KAAKiK,GAAQnG,IAG5BA,EAAM,GACN,IAAK,IAAIhE,EAAI,EAAGA,EAAK8J,EAAW/J,OAASiK,EAAQhK,IAC7C6J,EAAKI,YAAYC,MACjBpI,EAASpC,EAAMG,SACfkK,EAAKE,YAAYC,MACjBlG,EAAI9D,KAAK6J,EAAKF,GAElBhD,EAAa3G,KAAKiK,GAAQnG,IAE1BA,EAAM,GACN,IAAK,IAAIhE,EAAI,EAAGA,EAAK8J,EAAW/J,OAASiK,EAAQhK,IAC7C6J,EAAKI,YAAYC,MACjBjI,EAAcvC,EAAMG,SACpBkK,EAAKE,YAAYC,MACjBlG,EAAI9D,KAAK6J,EAAKF,GAElB/C,EAAkB5G,KAAKiK,GAAQnG,IAE/BA,EAAM,GACN,IAAK,IAAIhE,EAAI,EAAGA,EAAK8J,EAAW/J,OAASiK,EAAQhK,IAC7C6J,EAAKI,YAAYC,MACjBtH,EAAUlD,EAAMG,SAChBkK,EAAKE,YAAYC,MACjBlG,EAAI9D,KAAK6J,EAAKF,GAElB9C,EAAc7G,KAAKiK,GAAQnG,IAE3BA,EAAM,GACN,IAAK,IAAIhE,EAAI,EAAGA,EAAK8J,EAAW/J,OAASiK,EAAQhK,IAC7C6J,EAAKI,YAAYC,MACjBzG,EAAkB/D,EAAMG,SACxBkK,EAAKE,YAAYC,MACjBlG,EAAI9D,KAAK6J,EAAKF,GAElB7C,EAAsB9G,KAAKiK,GAAQnG,IAEnCA,EAAM,GACN,IAAK,IAAIhE,EAAI,EAAGA,EAAK8J,EAAW/J,OAASiK,EAAQhK,IAC7C6J,EAAKI,YAAYC,MACjB7F,EAAU3E,EAAMG,SAChBkK,EAAKE,YAAYC,MACjBlG,EAAI9D,KAAK6J,EAAKF,GAElB5C,EAAc/G,KAAKiK,GAAQnG,IAE3BA,EAAM,GACN,IAAK,IAAIhE,EAAI,EAAGA,EAAK8J,EAAW/J,OAASiK,EAAQhK,IAC7C6J,EAAKI,YAAYC,MACjBvF,EAAcjF,EAAMG,SACpBkK,EAAKE,YAAYC,MACjBlG,EAAI9D,KAAK6J,EAAKF,GAElB3C,EAAkBhH,KAAKiK,GAAQnG,O,2CAInCmB,KAAKyE,YAIL,IAHA,IAEIC,EAFAC,EAAa,CAAC,IAAM,IAAM,IAAM,IAAM,IAAO,IAAO,KACpDpK,EAAQ,GACJqK,EAAK,EACJC,EAAQ,EAAGA,EAAQF,EAAW/J,SAAUiK,EAAO,CACpDtK,EAAQ,GACR,IAAK,IAAIM,EAAI,EAAGA,EAAI8J,EAAWE,GAAQhK,IAAON,EAAMQ,KAAKmB,KAAKwG,UAC9DnI,EAAMY,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,KAEzB,IADA,IAAIwD,EAAM,GACDhE,EAAI,EAAGA,EAAK8J,EAAW/J,OAASiK,EAAQhK,IAC7C6J,EAAKI,YAAYC,MACjBjJ,EAAWvB,EAAMG,SACjBkK,EAAKE,YAAYC,MACjBlG,EAAI9D,KAAK6J,EAAKF,GAElBjD,EAAe1G,KAAKiK,GAAQnG,IAG5BA,EAAM,GACN,IAAK,IAAIhE,EAAI,EAAGA,EAAK8J,EAAW/J,OAASiK,EAAQhK,IAC7C6J,EAAKI,YAAYC,MACjBpI,EAASpC,EAAMG,SACfkK,EAAKE,YAAYC,MACjBlG,EAAI9D,KAAK6J,EAAKF,GAElBhD,EAAa3G,KAAKiK,GAAQnG,IAE1BA,EAAM,GACN,IAAK,IAAIhE,EAAI,EAAGA,EAAK8J,EAAW/J,OAASiK,EAAQhK,IAC7C6J,EAAKI,YAAYC,MACjBjI,EAAcvC,EAAMG,SACpBkK,EAAKE,YAAYC,MACjBlG,EAAI9D,KAAK6J,EAAKF,GAElB/C,EAAkB5G,KAAKiK,GAAQnG,IAE/BA,EAAM,GACN,IAAK,IAAIhE,EAAI,EAAGA,EAAK8J,EAAW/J,OAASiK,EAAQhK,IAC7C6J,EAAKI,YAAYC,MACjBtH,EAAUlD,EAAMG,SAChBkK,EAAKE,YAAYC,MACjBlG,EAAI9D,KAAK6J,EAAKF,GAElB9C,EAAc7G,KAAKiK,GAAQnG,IAE3BA,EAAM,GACN,IAAK,IAAIhE,EAAI,EAAGA,EAAK8J,EAAW/J,OAASiK,EAAQhK,IAC7C6J,EAAKI,YAAYC,MACjBzG,EAAkB/D,EAAMG,SACxBkK,EAAKE,YAAYC,MACjBlG,EAAI9D,KAAK6J,EAAKF,GAElB7C,EAAsB9G,KAAKiK,GAAQnG,IAEnCA,EAAM,GACN,IAAK,IAAIhE,EAAI,EAAGA,EAAK8J,EAAW/J,OAASiK,EAAQhK,IAC7C6J,EAAKI,YAAYC,MACjB7F,EAAU3E,EAAMG,SAChBkK,EAAKE,YAAYC,MACjBlG,EAAI9D,KAAK6J,EAAKF,GAElB5C,EAAc/G,KAAKiK,GAAQnG,IAE3BA,EAAM,GACN,IAAK,IAAIhE,EAAI,EAAGA,EAAK8J,EAAW/J,OAASiK,EAAQhK,IAC7C6J,EAAKI,YAAYC,MACjBvF,EAAcjF,EAAMG,SACpBkK,EAAKE,YAAYC,MACjBlG,EAAI9D,KAAK6J,EAAKF,GAElB3C,EAAkBhH,KAAKiK,GAAQnG,O,4CAInCmB,KAAKyE,YAIL,IAHA,IAEIC,EAFAC,EAAa,CAAC,IAAM,IAAM,IAAM,IAAM,IAAO,IAAO,KACpDpK,EAAQ,GACJqK,EAAK,EACJC,EAAQ,EAAGA,EAAQF,EAAW/J,SAAUiK,EAAO,CACpDtK,EAAQ,GACR,IAAK,IAAIM,EAAI,EAAGA,EAAI8J,EAAWE,GAAQhK,IAAON,EAAMQ,KAAKmB,KAAKwG,UAC9DnI,EAAMY,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,KAAGwH,UAG5B,IADA,IAAIhE,EAAM,GACDhE,EAAI,EAAGA,EAAK8J,EAAW/J,OAASiK,EAAQhK,IAC7C6J,EAAKI,YAAYC,MACjBjJ,EAAWvB,EAAMG,SACjBkK,EAAKE,YAAYC,MACjBlG,EAAI9D,KAAK6J,EAAKF,GAElBjD,EAAe1G,KAAKiK,GAAQnG,IAG5BA,EAAM,GACN,IAAK,IAAIhE,EAAI,EAAGA,EAAK8J,EAAW/J,OAASiK,EAAQhK,IAC7C6J,EAAKI,YAAYC,MACjBpI,EAASpC,EAAMG,SACfkK,EAAKE,YAAYC,MACjBlG,EAAI9D,KAAK6J,EAAKF,GAElBhD,EAAa3G,KAAKiK,GAAQnG,IAE1BA,EAAM,GACN,IAAK,IAAIhE,EAAI,EAAGA,EAAK8J,EAAW/J,OAASiK,EAAQhK,IAC7C6J,EAAKI,YAAYC,MACjBjI,EAAcvC,EAAMG,SACpBkK,EAAKE,YAAYC,MACjBlG,EAAI9D,KAAK6J,EAAKF,GAElB/C,EAAkB5G,KAAKiK,GAAQnG,IAE/BA,EAAM,GACN,IAAK,IAAIhE,EAAI,EAAGA,EAAK8J,EAAW/J,OAASiK,EAAQhK,IAC7C6J,EAAKI,YAAYC,MACjBtH,EAAUlD,EAAMG,SAChBkK,EAAKE,YAAYC,MACjBlG,EAAI9D,KAAK6J,EAAKF,GAElB9C,EAAc7G,KAAKiK,GAAQnG,IAE3BA,EAAM,GACN,IAAK,IAAIhE,EAAI,EAAGA,EAAK8J,EAAW/J,OAASiK,EAAQhK,IAC7C6J,EAAKI,YAAYC,MACjBzG,EAAkB/D,EAAMG,SACxBkK,EAAKE,YAAYC,MACjBlG,EAAI9D,KAAK6J,EAAKF,GAElB7C,EAAsB9G,KAAKiK,GAAQnG,IAEnCA,EAAM,GACN,IAAK,IAAIhE,EAAI,EAAGA,EAAK8J,EAAW/J,OAASiK,EAAQhK,IAC7C6J,EAAKI,YAAYC,MACjB7F,EAAU3E,EAAMG,SAChBkK,EAAKE,YAAYC,MACjBlG,EAAI9D,KAAK6J,EAAKF,GAElB5C,EAAc/G,KAAKiK,GAAQnG,IAE3BA,EAAM,GACN,IAAK,IAAIhE,EAAI,EAAGA,EAAK8J,EAAW/J,OAASiK,EAAQhK,IAC7C6J,EAAKI,YAAYC,MACjBvF,EAAcjF,EAAMG,SACpBkK,EAAKE,YAAYC,MACjBlG,EAAI9D,KAAK6J,EAAKF,GAElB3C,EAAkBhH,KAAKiK,GAAQnG,O,kCAInC4C,EAAiB,GACjBC,EAAe,GACfC,EAAoB,GACpBC,EAAgB,GAChBC,EAAwB,GACxBC,EAAgB,GAChBC,EAAoB,K,mCAGpB/B,KAAKiF,qBAELjF,KAAK2C,SAAS,CACVN,gBAAiB,CACb6C,OAAQ,CAAC,QAAS,QAAS,QAAS,QAAS,SAAU,SAAU,UACjEC,SAAU,CACN,CACIC,MAAO,cACPtB,gBAAiB,0BACjB/D,KAAM0B,GACP,CACC2D,MAAO,YACPtB,gBAAiB,0BACjB/D,KAAM2B,GACP,CACC0D,MAAO,iBACPtB,gBAAiB,0BACjB/D,KAAM4B,GACP,CACCyD,MAAO,aACPtB,gBAAiB,0BACjB/D,KAAM6B,GACP,CACCwD,MAAO,sBACPtB,gBAAiB,2BACjB/D,KAAM8B,GACP,CACCuD,MAAO,aACPtB,gBAAiB,0BACjB/D,KAAM+B,GACP,CACCsD,MAAO,iBACPtB,gBAAiB,0BACjB/D,KAAMgC,OAMtB/B,KAAKqF,qBAELrF,KAAK2C,SAAS,CACVL,gBAAiB,CACb4C,OAAQ,CAAC,QAAS,QAAS,QAAS,QAAS,SAAU,SAAU,UACjEC,SAAU,CACN,CACIC,MAAO,cACPtB,gBAAiB,0BACjB/D,KAAM0B,GACP,CACC2D,MAAO,YACPtB,gBAAiB,0BACjB/D,KAAM2B,GACP,CACC0D,MAAO,iBACPtB,gBAAiB,0BACjB/D,KAAM4B,GACP,CACCyD,MAAO,aACPtB,gBAAiB,0BACjB/D,KAAM6B,GACP,CACCwD,MAAO,sBACPtB,gBAAiB,2BACjB/D,KAAM8B,GACP,CACCuD,MAAO,aACPtB,gBAAiB,0BACjB/D,KAAM+B,GACP,CACCsD,MAAO,iBACPtB,gBAAiB,0BACjB/D,KAAMgC,OAMtB/B,KAAKsF,sBAELtF,KAAK2C,SAAS,CACVJ,kBAAmB,CACf2C,OAAQ,CAAC,QAAS,QAAS,QAAS,QAAS,SAAU,SAAU,UACjEC,SAAU,CACN,CACIC,MAAO,cACPtB,gBAAiB,0BACjB/D,KAAM0B,GACP,CACC2D,MAAO,YACPtB,gBAAiB,0BACjB/D,KAAM2B,GACP,CACC0D,MAAO,iBACPtB,gBAAiB,0BACjB/D,KAAM4B,GACP,CACCyD,MAAO,aACPtB,gBAAiB,0BACjB/D,KAAM6B,GACP,CACCwD,MAAO,sBACPtB,gBAAiB,2BACjB/D,KAAM8B,GACP,CACCuD,MAAO,aACPtB,gBAAiB,0BACjB/D,KAAM+B,GACP,CACCsD,MAAO,iBACPtB,gBAAiB,0BACjB/D,KAAMgC,S,uCAQtB/B,KAAKoD,iBACLpD,KAAKuF,SACLC,MAAM,iGACNxF,KAAKyF,aACLxD,SAAS/B,MAAQ,2BACjBF,KAAK2C,SAAS,CAAEH,YAAY,M,+BAGtB,IAAD,OACCjI,EAAQyF,KAAKJ,MAAMrF,MAGzB,OAAIyF,KAAKJ,MAAM4C,WAEP,oCACI,yBAAK1C,UAAU,UACX,yBAAKA,UAAU,cACX,yDAEJ,kBAAC,EAAD,CAAOD,UAAWG,KAAKJ,MAAMyC,gBAAiBnC,MAAM,uCACpD,yBAAK+C,MAAO,CAAEiB,OAAO,UACrB,kBAAC,EAAD,CAAOrE,UAAWG,KAAKJ,MAAM0C,gBAAiBpC,MAAM,uCACpD,yBAAK+C,MAAO,CAAEiB,OAAO,UACrB,kBAAC,EAAD,CAAOrE,UAAWG,KAAKJ,MAAM2C,kBAAmBrC,MAAM,mDAO9D,oCACI,yBAAKJ,UAAU,kBAAkBmD,MAAO,CAAExC,SAAU,WAAYjE,MAAM,SACjEjC,EAAMmL,KAAI,SAACC,EAAOC,GAAR,OACP,yBACI9F,UAAU,YACVuE,IAAKuB,EACL3C,MAAO,CACHa,gBA1yBd,aA2yBcI,OAAO,GAAD,OAAKyB,EAAL,aAKtB,yBAAK7F,UAAU,WACX,4BAAQI,MAAM,wCAAwC2F,GAAG,WAAW5C,MAAO,CAAExC,SAAU,WAAYqF,IAAI,GAAD,OAAK,GAAKzE,EAAgB,IAjC1H,EAiCgG,OAAqD0E,QAAS,kBAAM,EAAKtD,eAA/K,8BAGA,4BAAQvC,MAAM,+BAA+B2F,GAAG,YAAY5C,MAAO,CAAExC,SAAU,WAAYqF,IAAI,GAAD,OAAK,GAAKzE,EAAgB,IApClH,EAoCwF,OAAqD0E,QAAS,kBAAM,EAAKxI,cAAvK,2BAGA,4BAAQ2C,MAAM,iCAAiC2F,GAAG,eAAe5C,MAAO,CAAExC,SAAU,WAAYqF,IAAI,GAAD,OAAK,GAAKzE,EAAgB,IAvCvH,EAuC6F,OAAqD0E,QAAS,kBAAM,EAAKC,iBAA5K,oCAGJ,4BAAQ9F,MAAM,kDAAwC2F,GAAG,YAAY5C,MAAO,CAAExC,SAAU,WAAYqF,IAAI,GAAD,OAAK,IAAOzE,EAAgB,IA1CzH,EA0C6F,OAAuD0E,QAAS,kBAAM,EAAKtI,cAAlL,cAGA,4BAAQyC,MAAM,6CAAmC2F,GAAG,YAAY5C,MAAO,CAAExC,SAAU,WAAYqF,IAAI,GAAD,OAAK,IAAOzE,EAAgB,IA7CpH,EA6CwF,OAAuD0E,QAAS,kBAAM,EAAK7G,cAA7K,cAGA,4BAAQgB,MAAM,kDAAwC2F,GAAG,WAAW5C,MAAO,CAAExC,SAAU,WAAYqF,IAAI,GAAD,OAAK,IAAOzE,EAAgB,IAhDxH,EAgD4F,OAAuD0E,QAAS,kBAAM,EAAKpJ,aAAjL,aAGA,4BAAQuD,MAAM,6CAAmC2F,GAAG,eAAe5C,MAAO,CAAExC,SAAU,WAAYqF,IAAI,GAAD,OAAK,IAAOzE,EAAgB,IAnDvH,EAmD2F,OAAuD0E,QAAS,kBAAM,EAAKE,iBAAhL,uBAGA,4BAAQ/F,MAAM,iCAAuB2F,GAAG,gBAAgB5C,MAAO,CAAExC,SAAU,WAAYqF,IAAI,GAAD,OAAK,IAAOzE,EAAgB,IAtD5G,EAsDgF,OAAuD0E,QAAS,kBAAM,EAAKjJ,kBAArK,kBAGI,4BAAQoD,MAAM,iCAAuB2F,GAAG,aAAa5C,MAAO,CAAExC,SAAU,WAAYqF,IAAI,GAAD,OAAK,IAAOzE,EAAgB,IAzD7G,EAyDiF,OAAuD0E,QAAS,kBAAM,EAAKjK,eAAlK,eAGJ,4BAAQoE,MAAM,mCAAyB2F,GAAG,gBAAgB5C,MAAO,CAAExC,SAAU,WAAYqF,IAAI,GAAD,OAAK,IAAOzE,EAAgB,IA5D9G,EA4DkF,OAAuD0E,QAAS,kBAAM,EAAKvG,kBAAvK,kBAGI,4BAAQU,MAAM,mDAAmD2F,GAAG,iBAAiB5C,MAAO,CAAExC,SAAU,WAAYqF,IAAI,GAAD,OAAK,GAAOzE,EAAgB,IA/D7I,EA+DiH,OAAuD0E,QAAS,kBAAM,EAAKG,mBAAlM,kC,GA5zBQC,IAAMnF,WAy0BtC,IAAMgE,GAAU,SAAAjJ,GAAG,OAAIA,EAAIqK,QAAO,SAACC,EAAMC,GAAP,OAAcD,EAAOC,IAAI,GAAKvK,EAAInB,QACrDwH,M,OCl3BAmE,OARf,WACE,OACE,yBAAKzG,UAAU,OACb,kBAAC,GAAD,QCKc0G,QACW,cAA7BrF,OAAOsF,SAASC,UAEe,UAA7BvF,OAAOsF,SAASC,UAEhBvF,OAAOsF,SAASC,SAASC,MACvB,2DCZNC,IAASrB,OACP,kBAAC,IAAMsB,WAAP,KACE,kBAAC,GAAD,OAEF5E,SAASa,eAAe,SDyHpB,kBAAmBgE,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/L,QAAQ+L,MAAMA,EAAMC,a","file":"static/js/main.ea898f82.chunk.js","sourcesContent":["// vector based and insert one item at a time\r\nexport function getHeapSortAnimations(array) {\r\n    let animations = [];\r\n    let auxillaryArray = array.slice();\r\n    animatedHeapSort(auxillaryArray, animations);\r\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n    console.log(\"Heap sort works correctly? \", arraysAreEqual(javaScriptSortedArray, auxillaryArray));\r\n    array = auxillaryArray;\r\n    return [animations, array];\r\n}\r\n\r\nvar array_length;\r\n\r\n//Used in animation creation\r\nfunction animatedHeapSort(auxillaryArray, animations) {\r\n    array_length = auxillaryArray.length;\r\n\r\n    for (var i = Math.floor(array_length / 2); i >= 0; i -= 1) {\r\n        heapify(auxillaryArray, i, animations);\r\n    }\r\n\r\n    for (i = auxillaryArray.length - 1; i > 0; i--) {\r\n        swap(auxillaryArray, 0, i);\r\n        array_length--;\r\n        animations.push([\"swap\", 0, i]);\r\n        heapify(auxillaryArray, 0, animations);\r\n    }\r\n}\r\n//Used in animation creation\r\nfunction heapify(input, i, animations) {\r\n    var left = 2 * i + 1;\r\n    var right = 2 * i + 2;\r\n    var max = i;\r\n\r\n    if (left < array_length && input[left] > input[max]) {\r\n        max = left;\r\n    }\r\n\r\n    if (right < array_length && input[right] > input[max]) {\r\n        max = right;\r\n    }\r\n\r\n    if (max !== i) {\r\n        swap(input, i, max);\r\n        animations.push([\"swap\", i, max]);\r\n        heapify(input, max, animations);\r\n    }\r\n}\r\n\r\n\r\n//Used in Time Complexity Analysis\r\nfunction heap_root(input, i) {\r\n    var left = 2 * i + 1;\r\n    var right = 2 * i + 2;\r\n    var max = i;\r\n\r\n    if (left < array_length && input[left] > input[max]) {\r\n        max = left;\r\n    }\r\n\r\n    if (right < array_length && input[right] > input[max]) {\r\n        max = right;\r\n    }\r\n\r\n    if (max !== i) {\r\n        swap(input, i, max);\r\n        heap_root(input, max);\r\n\r\n    }\r\n}\r\n//Used in Time Complexity Analysis\r\nexport function heapSort(auxillaryArray){\r\n    array_length = auxillaryArray.length;\r\n\r\n    for (var i = Math.floor(array_length / 2); i >= 0; i -= 1) {\r\n        heap_root(auxillaryArray, i);\r\n    }\r\n\r\n    for (i = auxillaryArray.length - 1; i > 0; i--) {\r\n        swap(auxillaryArray, 0, i);\r\n        array_length--;\r\n        heap_root(auxillaryArray, 0);\r\n    }\r\n}\r\n//Shared\r\nfunction swap(input, index_A, index_B) {\r\n    var temp = input[index_A];\r\n\r\n    input[index_A] = input[index_B];\r\n    input[index_B] = temp;\r\n}\r\n//Used in final array equal check\r\nfunction arraysAreEqual(firstArray, secondArray) {\r\n    if (firstArray.length !== secondArray.length) {\r\n        return false;\r\n    }\r\n    for (let i = 0; i < firstArray.length; i++) {\r\n        if (firstArray[i] !== secondArray[i]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\n","export function getBubbleSortAnimations(array) {\n    let animations = [];\n    let auxillaryArray = array.slice();\n    animatedBubbleSort(auxillaryArray, animations);\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n    console.log(\"Bubble sort works correctly? \", arraysAreEqual(javaScriptSortedArray, auxillaryArray));\n    array = auxillaryArray;\n    return [animations, array];\n}\n\nfunction animatedBubbleSort(auxillaryArray, animations) {\n    const N = auxillaryArray.length;\n    for (let i = 0; i < N - 1; i++) {\n        for (let j = 0; j < N - i - 1; j++) {\n            animations.push([j, j + 1]);\n            animations.push([j, j + 1]);\n            if (auxillaryArray[j] > auxillaryArray[j + 1]) {\n                animations.push([j, auxillaryArray[j + 1]]);\n                animations.push([j + 1, auxillaryArray[j]]);\n                swap(auxillaryArray, j, j + 1);\n            }\n            else {\n                animations.push([-1, -1]);\n                animations.push([-1, -1]);\n            }\n        }\n    }\n}\n\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\n    let temp = auxillaryArray[firstIndex];\n    auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\n    auxillaryArray[secondIndex] = temp;\n}\n\nfunction arraysAreEqual(firstArray, secondArray) {\n    if (firstArray.length !== secondArray.length) {\n        return false;\n    }\n    for (let i = 0; i < firstArray.length; i++) {\n        if (firstArray[i] !== secondArray[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nexport function bubbleSort(arr) {\n    const swap = (list, a, b) => [list[a], list[b]] = [list[b], list[a]];\n\n    for (let i = arr.length; i > 0; i--) {\n        for (let j = 0; j < i - 1; j++) {\n            if (arr[j] > arr[j + 1]) swap(arr, j, j + 1);\n        };\n    };\n\n    return arr;\n}","export function getInsertionSortAnimations(array) {\n    let animations = [];\n    let auxillaryArray = array.slice();\n    animatedInsertionSort(auxillaryArray, animations);\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n    console.log(\"Insertion sort works correctly? \", arraysAreEqual(javaScriptSortedArray, auxillaryArray));\n    array = auxillaryArray;\n    return [animations, array];\n}\n\nfunction animatedInsertionSort(auxillaryArray, animations) {\n    const N = auxillaryArray.length;\n    for (let i = 1; i < N; i++) {\n        let key = auxillaryArray[i];\n        let j = i - 1;\n        animations.push([\"comparision1\", j, i]);\n        animations.push([\"comparision2\", j, i]);\n        while (j >= 0 && auxillaryArray[j] > key) {\n            animations.push([\"overwrite\", j + 1, auxillaryArray[j]]);\n            auxillaryArray[j + 1] = auxillaryArray[j];\n            j = j - 1;\n            if (j >= 0) {\n                animations.push([\"comparision1\", j, i]);\n                animations.push([\"comparision2\", j, i]);\n            }\n        }\n        animations.push([\"overwrite\", j + 1, key]);\n        auxillaryArray[j + 1] = key;\n    }\n}\n\nfunction arraysAreEqual(firstArray, secondArray) {\n    if (firstArray.length !== secondArray.length) {\n        return false;\n    }\n    for (let i = 0; i < firstArray.length; i++) {\n        if (firstArray[i] !== secondArray[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n\nexport function insertionSort(arr) {\n    arr.forEach((item, i) => {\n        let num = arr[i];\n        let j;\n\n        for (j = i - 1; j >= 0 && arr[j] > num; j--) {\n            arr[j + 1] = arr[j];\n        };\n        arr[j + 1] = num;\n    });\n\n    return arr;\n}","export function getMergeSortAnimations(array) {\n    let animations = [];\n    let auxillaryArray = array.slice();\n    animatedMergeSort(auxillaryArray, 0, auxillaryArray.length - 1, animations);\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n    console.log(\"Merge sort works correctly? \", arraysAreEqual(javaScriptSortedArray, auxillaryArray));\n    array = auxillaryArray;\n    return [animations, array];\n}\n\nfunction animatedMergeSort(auxillaryArray, startIndex, endIndex, animations) {\n    if (startIndex === endIndex)\n        return;\n    const middleIndex = Math.floor((startIndex + endIndex) / 2);\n    animatedMergeSort(auxillaryArray, startIndex, middleIndex, animations);\n    animatedMergeSort(auxillaryArray, middleIndex + 1, endIndex, animations);\n    merge(auxillaryArray, startIndex, middleIndex, endIndex, animations);\n}\n\nfunction merge(auxillaryArray, startIndex, middleIndex, endIndex, animations) {\n    let sortArray = [];\n    let i = startIndex;\n    let j = middleIndex + 1;\n    while (i <= middleIndex && j <= endIndex) {\n        //Comparing value at ith and jth index so push them to change their color\n        animations.push([i, j]);\n        //By changing color we imply that we are comparing those two values and then again we should revert back to their original color so push them again\n        animations.push([i, j]);\n        if (auxillaryArray[i] <= auxillaryArray[j]) {\n            //We should overwrite the value at (i+startIndex)th index with ith index so push them to highlight swap their heights\n            animations.push([sortArray.length + startIndex, auxillaryArray[i]]);\n            sortArray.push(auxillaryArray[i++]);\n        }\n        else {\n            //We should overwrite the value at (i+startIndex)th index with jth index so push them to highlight swap their heights\n            animations.push([sortArray.length + startIndex, auxillaryArray[j]]);\n            sortArray.push(auxillaryArray[j++]);\n        }\n    }\n    while (i <= middleIndex) {\n        animations.push([i, i]);\n        animations.push([i, i]);\n        animations.push([sortArray.length + startIndex, auxillaryArray[i]]);\n        sortArray.push(auxillaryArray[i++]);\n    }\n    while (j <= endIndex) {\n        animations.push([j, j]);\n        animations.push([j, j]);\n        animations.push([sortArray.length + startIndex, auxillaryArray[j]]);\n        sortArray.push(auxillaryArray[j++]);\n    }\n    for (let i = startIndex; i <= endIndex; i++) {\n        auxillaryArray[i] = sortArray[i - startIndex];\n    }\n}\n\nfunction arraysAreEqual(firstArray, secondArray) {\n    if (firstArray.length !== secondArray.length) {\n        return false;\n    }\n    for (let i = 0; i < firstArray.length; i++) {\n        if (firstArray[i] !== secondArray[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nconst mergeArrays = (arr1, arr2) => {\n    let sorted = [];\n\n    while (arr1.length && arr2.length) {\n        if (arr1[0] < arr2[0]) sorted.push(arr1.shift());\n        else sorted.push(arr2.shift());\n    };\n\n    return sorted.concat(arr1.slice().concat(arr2.slice()));\n};\n\nexport function mergeSort(arr) {\n    if (arr.length <= 1) return arr;\n    let mid = Math.floor(arr.length / 2),\n        left = mergeSort(arr.slice(0, mid)),\n        right = mergeSort(arr.slice(mid));\n\n    return mergeArrays(left, right);\n};","//Use median-of-three as pivot. For small sub-problem of size ≤ 10, use insertion sort.\r\nexport function getModifiedQuickSortAnimations(array) {\r\n    let animations = [];\r\n    let auxillaryArray = array.slice();\r\n    animatedModifiedQuickSort(auxillaryArray, 0, auxillaryArray.length - 1, animations);\r\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n    console.log(\"Quick sort works correctly? \", arraysAreEqual(javaScriptSortedArray, auxillaryArray));\r\n    array = auxillaryArray;\r\n    return [animations, array];\r\n}\r\n\r\nconst CUTOFF = 10;\r\n\r\nfunction animatedModifiedQuickSort(auxillaryArray, startIndex, endIndex, animations) {\r\n    let pivotIndex;\r\n    if (startIndex < endIndex) {\r\n        pivotIndex = partitionArray(auxillaryArray, startIndex, endIndex, animations);\r\n        animatedModifiedQuickSort(auxillaryArray, startIndex, pivotIndex - 1, animations);\r\n        animatedModifiedQuickSort(auxillaryArray, pivotIndex + 1, endIndex, animations);\r\n    }\r\n}\r\n\r\nfunction partitionArray(auxillaryArray, startIndex, endIndex, animations) {\r\n    let pivot = auxillaryArray[endIndex];\r\n    let pivotIndex = startIndex;\r\n    for (let i = startIndex; i <= endIndex - 1; i++) {\r\n        animations.push([i, endIndex]);\r\n        animations.push([i, endIndex]);\r\n        if (auxillaryArray[i] <= pivot) {\r\n            //Swap these two heights\r\n            animations.push([i, auxillaryArray[pivotIndex]]);\r\n            animations.push([pivotIndex, auxillaryArray[i]]);\r\n            swap(auxillaryArray, i, pivotIndex);\r\n            pivotIndex++;\r\n        }\r\n        else {\r\n            animations.push([-1, -1]);\r\n            animations.push([-1, -1]);\r\n        }\r\n        animations.push([-1, -1]);\r\n        animations.push([-1, -1]);\r\n    }\r\n    animations.push([-1, -1]);\r\n    animations.push([-1, -1]);\r\n    animations.push([-1, -1]);\r\n    animations.push([-1, -1]);\r\n    //Swap these two heights\r\n    animations.push([pivotIndex, auxillaryArray[endIndex]]);\r\n    animations.push([endIndex, auxillaryArray[pivotIndex]]);\r\n    swap(auxillaryArray, pivotIndex, endIndex);\r\n    return pivotIndex;\r\n}\r\n\r\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\r\n    let temp = auxillaryArray[firstIndex];\r\n    auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\r\n    auxillaryArray[secondIndex] = temp;\r\n}\r\n\r\n\r\nexport function modifiedQuickSort(a, low = 0, high = a.length) {\r\n    if (low + CUTOFF <= high){\r\n        // Sort low, middle, high\r\n        let middle = Math.floor((low + high) / 2);\r\n        if (a[middle] < a[low])\r\n            swapReferences(a, low, middle);\r\n        if (a[high] < a[low])\r\n            swapReferences(a, low, high);\r\n        if (a[high] < a[middle])\r\n            swapReferences(a, middle, high);\r\n\r\n        // Place pivot at position high - 1\r\n        swapReferences(a, middle, high - 1);\r\n        let pivot = a[high - 1];\r\n\r\n        // Begin partitioning\r\n        let i, j;\r\n        for (i = low, j = high - 1; ;) {\r\n            while (a[++i] < pivot);\r\n            while (pivot < a[--j]);\r\n            if (i < j)\r\n                swapReferences(a, i, j);\r\n            else break;\r\n        }\r\n        // Restore pivot\r\n        swapReferences(a, i, high - 1);\r\n\r\n        modifiedQuickSort(a, low, i - 1);    // Sort small elements\r\n        modifiedQuickSort(a, i + 1, high);   // Sort large elements\r\n    } else { \r\n        insertionSort(a, low, high);\r\n    }\r\n}\r\n\r\nfunction swapReferences(a, index1, index2) {\r\n    let tmp = a[index1];\r\n    a[index1] = a[index2];\r\n    a[index2] = tmp;\r\n}\r\n\r\nfunction insertionSort(a, low = 0, high = a.length) {\r\n    for (let p = low + 1; p <= high; p++) {\r\n        let tmp = a[p];\r\n        let j;\r\n\r\n        for (j = p; j > low && tmp < a[j - 1]; j--)\r\n            a[j] = a[j - 1];\r\n        a[j] = tmp;\r\n    }\r\n}\r\n\r\nfunction arraysAreEqual(firstArray, secondArray) {\r\n    if (firstArray.length !== secondArray.length) {\r\n        return false;\r\n    }\r\n    for (let i = 0; i < firstArray.length; i++) {\r\n        if (firstArray[i] !== secondArray[i]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}","// any random item or the first or the last item of your input can be pivot\nvar globalArray = [];\n\n\nexport function getQuickSortAnimations(array) {\n    let animations = [];\n    let auxillaryArray = array.slice();\n    animatedQuickSort(auxillaryArray, 0, auxillaryArray.length - 1, animations);\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n    console.log(\"Quick sort works correctly? \", arraysAreEqual(javaScriptSortedArray, auxillaryArray));\n    array = auxillaryArray;\n    return [animations, array];\n}\n\nfunction animatedQuickSort(auxillaryArray, startIndex, endIndex, animations) {\n    let pivotIndex;\n    if (startIndex < endIndex) {\n        pivotIndex = partitionArray(auxillaryArray, startIndex, endIndex, animations);\n        animatedQuickSort(auxillaryArray, startIndex, pivotIndex - 1, animations);\n        animatedQuickSort(auxillaryArray, pivotIndex + 1, endIndex, animations);\n    }\n}\n\nfunction partitionArray(auxillaryArray, startIndex, endIndex, animations) {\n    let pivot = auxillaryArray[endIndex];\n    let pivotIndex = startIndex;\n    for (let i = startIndex; i <= endIndex - 1; i++) {\n        animations.push([i, endIndex]);\n        animations.push([i, endIndex]);\n        if (auxillaryArray[i] <= pivot) {\n            //Swap these two heights\n            animations.push([i, auxillaryArray[pivotIndex]]);\n            animations.push([pivotIndex, auxillaryArray[i]]);\n            swap(auxillaryArray, i, pivotIndex);\n            pivotIndex++;\n        }\n        else {\n            animations.push([-1, -1]);\n            animations.push([-1, -1]);\n        }\n        animations.push([-1, -1]);\n        animations.push([-1, -1]);\n    }\n    animations.push([-1, -1]);\n    animations.push([-1, -1]);\n    animations.push([-1, -1]);\n    animations.push([-1, -1]);\n    //Swap these two heights\n    animations.push([pivotIndex, auxillaryArray[endIndex]]);\n    animations.push([endIndex, auxillaryArray[pivotIndex]]);\n    swap(auxillaryArray, pivotIndex, endIndex);\n    return pivotIndex;\n}\n\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\n    let temp = auxillaryArray[firstIndex];\n    auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\n    auxillaryArray[secondIndex] = temp;\n}\n\n/* This function takes last element as pivot, places\n   the pivot element at its correct position in sorted\n    array, and places all smaller (smaller than pivot)\n   to left of pivot and all greater elements to right\n   of pivot */\nfunction partition(arr, low, high) {\n    let pivot = arr[high];    // pivot\n    let i = (low - 1);  // Index of smaller element\n\n    for (let j = low; j <= high - 1; j++) {\n        // If current element is smaller than or\n        // equal to pivot\n        if (arr[j] <= pivot) {\n            i++;    // increment index of smaller element\n            swap(arr, i, j);\n        }\n    }\n    swap(arr, i + 1, high);\n    return (i + 1);\n}\n\n// For the time complexity analysis I implemented Tail Call Elimination: https://www.geeksforgeeks.org/quicksort-tail-call-optimization-reducing-worst-case-space-log-n/\n// Because JS stack size is limited by browser: https://stackoverflow.com/questions/7826992/browser-javascript-stack-size-limit\n\nfunction rQuickSort(arr, low, high)\n{\n    while (low < high) {\n        /* pi is partitioning index, arr[p] is now\n           at right place */\n        let pi = partition(arr, low, high);\n\n        if (pi - low < high - pi) {\n            rQuickSort(arr, low, pi - 1);\n            low = pi + 1;\n        }\n        else {\n            rQuickSort(arr, pi + 1, high);\n            high = pi - 1;\n        }\n    }\n}\n\n\nexport function quickSort(arr) {\n    rQuickSort(arr, 0, arr.length - 1)\n    return arr\n}\n\n\nfunction arraysAreEqual(firstArray, secondArray) {\n    if (firstArray.length !== secondArray.length) {\n        return false;\n    }\n    for (let i = 0; i < firstArray.length; i++) {\n        if (firstArray[i] !== secondArray[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n// Testing functions\n// let tmpArr = []\n// for (let i = 0; i < 50000; i++) { tmpArr.push(Math.random()); }\n// let tmpSorted = quickSort(tmpArr.slice());\n// console.log(tmpSorted)\n\n// const javaScriptSortedArray = tmpArr.slice().sort((a, b) => a - b);\n// console.log(\"Quick sort works correctly? \", arraysAreEqual(javaScriptSortedArray, tmpSorted));","export function getSelectionSortAnimations(array) {\n    let animations = [];\n    let auxillaryArray = array.slice();\n    animatedSelectionSort(auxillaryArray, animations);\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n    console.log(\"Selection sort works correctly? \", arraysAreEqual(javaScriptSortedArray, auxillaryArray));\n    array = auxillaryArray;\n    return [animations, array];\n}\n\nfunction animatedSelectionSort(auxillaryArray, animations) {\n    const N = auxillaryArray.length;\n    for (let i = 0; i < N - 1; i++) {\n        let minIndex = i; //Finding minimum element in unsorted array\n        for (let j = i + 1; j < N; j++) {\n            animations.push([\"comparision1\", j, minIndex]);\n            animations.push([\"comparision2\", j, minIndex]);\n            if (auxillaryArray[j] < auxillaryArray[minIndex]) {\n                minIndex = j;\n            }\n        }\n        animations.push([\"swap\", minIndex, auxillaryArray[i]]);\n        animations.push([\"swap\", i, auxillaryArray[minIndex]]);\n        // Swap the found minimum element with the first element\n        swap(auxillaryArray, minIndex, i);\n    }\n}\n\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\n    let temp = auxillaryArray[firstIndex];\n    auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\n    auxillaryArray[secondIndex] = temp;\n}\n\nfunction arraysAreEqual(firstArray, secondArray) {\n    if (firstArray.length !== secondArray.length) {\n        return false;\n    }\n    for (let i = 0; i < firstArray.length; i++) {\n        if (firstArray[i] !== secondArray[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n\nexport function selectionSort(arr) {\n    const swap = (list, a, b) => [list[a], list[b]] = [list[b], list[a]];\n\n    arr.forEach((item, i) => {\n        let min = i;\n        for (let j = i + 1; j < arr.length; j++) {\n            if (arr[j] < arr[min]) min = j;\n        };\n        swap(arr, i, min);\n    });\n\n    return arr;\n}","import React, { Component } from 'react';\r\n//import { Bar, Line, Pie } from 'react-chartjs-2';\r\nimport { Line } from 'react-chartjs-2';\r\nclass Chart extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            chartData: props.chartData\r\n        }\r\n    }\r\n\r\n    static defaultProps = {\r\n        displayTitle: true,\r\n        displayLegend: true,\r\n        legendPosition: 'right',\r\n        title: 'algorithm'\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"chart\">\r\n                <Line\r\n                    data={this.state.chartData}\r\n                    options={{\r\n                        title: {\r\n                            display: this.props.displayTitle,\r\n                            text: this.props.title,\r\n                            fontSize: 25\r\n                        },\r\n                        legend: {\r\n                            display: this.props.displayLegend,\r\n                            position: this.props.legendPosition\r\n                        },\r\n                        scales: {\r\n                            yAxes: [{\r\n                                scaleLabel: {\r\n                                    display: true,\r\n                                    labelString: 'Average Time to Execute (ms)'\r\n                                }\r\n                            }],\r\n                            xAxes: [{\r\n                                scaleLabel: {\r\n                                    display: true,\r\n                                    labelString: 'Input Size'\r\n                                }\r\n                            }]\r\n                        },\r\n                        // backgroundColor: [\r\n                        //     'rgba(255, 99, 132, 0.6)',\r\n                        //     'rgba(54, 162, 235, 0.6)',\r\n                        //     'rgba(255, 206, 86, 0.6)',\r\n                        //     'rgba(75, 192, 192, 0.6)',\r\n                        //     'rgba(153, 102, 255, 0.6)',\r\n                        //     'rgba(255, 159, 64, 0.6)',\r\n                        //     'rgba(255, 99, 132, 0.6)'\r\n                        // ]\r\n                        //   \"Heap Sort\"\r\n                        //   \"Insertion Sort\"\r\n                        //   \"Merge Sort\"\r\n                        //   \"Modified Quick Sort\"\r\n                        //   \"Quick Sort\"\r\n                        //   \"Selection Sort\"\r\n                    }}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Chart;\r\n","import React from 'react';\nimport './SortingVisualizer.css';\nimport { getBubbleSortAnimations, bubbleSort } from '../SortingAlgorithms/BubbleSort';\nimport { getHeapSortAnimations, heapSort } from '../SortingAlgorithms/HeapSort';\nimport { getInsertionSortAnimations, insertionSort } from '../SortingAlgorithms/InsertionSort';\nimport { getMergeSortAnimations, mergeSort } from '../SortingAlgorithms/MergeSort';\nimport { getModifiedQuickSortAnimations, modifiedQuickSort } from '../SortingAlgorithms/ModifiedQuickSort';\nimport { getQuickSortAnimations, quickSort } from '../SortingAlgorithms/QuickSort';\nimport { getSelectionSortAnimations, selectionSort } from '../SortingAlgorithms/SelectionSort';\nimport Chart from '../Components/Chart';\n\n//Changing width,height accordingly with the browser\nlet WINDOW_WIDTH = window.innerWidth;\nlet WINDOW_HEIGHT = window.innerHeight;\nlet NUMBER_OF_ARRAY_BARS = parseInt((WINDOW_WIDTH - 200) / 8);\n\nlet bubbleSortData = [];\nlet heapSortData = [];\nlet insertionSortData = [];\nlet mergeSortData = [];\nlet modifiedQuickSortData = [];\nlet quickSortData = [];\nlet selectionSortData = [];\n\n\nfunction reportWindowSize() {\n    WINDOW_WIDTH = window.innerWidth;\n    WINDOW_HEIGHT = window.innerHeight;\n    NUMBER_OF_ARRAY_BARS = parseInt((WINDOW_WIDTH - 200) / 8);\n}\nwindow.onresize = reportWindowSize; //TBD -> find a way to update state also when resized\ndocument.title = \"Sorting Algorithms\";\n\nconst PRIMARY_COLOR = 'dodgerblue'; //Normal color of bars\nconst SECONDARY_COLOR = 'orangered'; //Color of bars when they are being compared\nconst ANIMATION_SPEED_MS = 1; //Animation Speed (how fast color changes, how fast height gets overwritten)\n\n//Tooltips for buttons\nconst DISABLED_BUTTON = \"Currently Disabled\"\nconst ENABLED_BUTTON = {\n    SelectionSort: \"Ω(n^2), θ(n^2), O(n^2)\",\n    BubbleSort: \"Ω(n), θ(n^2), O(n^2)\",\n    InsertionSort: \"Ω(n), θ(n^2), O(n^2)\",\n    HeapSort: \"Ω(n log(n)), θ(n log(n)), O(n log(n))\",\n    QuickSort: \"Ω(n log(n)), θ(n log(n)), O(n^2)\",\n    MergeSort: \"Ω(n log(n)), θ(n log(n)), O(n log(n))\",\n    plotToolTip: \"Compare all algorithms for different input sizes\",\n    generateRandomArray: \"Generates a new random unsorted array\",\n    generateSortedArray: \"Generates a new sorted array\",\n    generateReversedArray: \"Generates a new reversed array\"\n}\n\nclass SortingVisualizer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            array: [],\n            chartDataRandom: {},\n            chartDataSorted: {},\n            chartDataReversed: {},\n            showGraphs: false\n        };\n    }\n\n    componentDidMount() {\n        this.resetArray();\n        //this.getChartData();\n    }\n\n    //Generates new random array \n    resetArray() {\n        const array = []\n        for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n            array.push(randomIntFromInterval(25, WINDOW_HEIGHT - 30));\n        }\n        this.setState({ array: array });\n        this.restoreButtons();\n    }\n\n    //Sorts a new array\n    sortArray() {\n        this.resetArray();\n        const sorted = this.state.array.slice().sort((a, b) => a - b); //Adjusted sort function because sort w/o args uses string comparison, not number\n        this.setState({ array: sorted });\n    }\n\n    //Sorts and reverses a new array\n    reverseArray() {\n        this.resetArray();\n        const reverse = this.state.array.slice().sort((a, b) => a - b).reverse(); //Adjusted sort function because sort w/o args uses string comparison, not number\n        this.setState({ array: reverse });\n    }\n\n    disableButtons() {\n        document.getElementById(\"arrayGen\").disabled = true;\n        let buttonStyle = document.getElementById(\"arrayGen\").style;\n        document.getElementById(\"arrayGen\").title = DISABLED_BUTTON;\n        buttonStyle.cursor = \"wait\";\n        buttonStyle.background = \"#000000\";\n\n        document.getElementById(\"sortArray\").disabled = true;\n        buttonStyle = document.getElementById(\"sortArray\").style;\n        document.getElementById(\"sortArray\").title = DISABLED_BUTTON;\n        buttonStyle.cursor = \"wait\";\n        buttonStyle.background = \"#000000\";\n\n        document.getElementById(\"reverseArray\").disabled = true;\n        buttonStyle = document.getElementById(\"reverseArray\").style;\n        document.getElementById(\"reverseArray\").title = DISABLED_BUTTON;\n        buttonStyle.cursor = \"wait\";\n        buttonStyle.background = \"#000000\";\n\n        document.getElementById(\"mergeSort\").disabled = true;\n        buttonStyle = document.getElementById(\"mergeSort\").style;\n        document.getElementById(\"mergeSort\").title = DISABLED_BUTTON;\n        buttonStyle.cursor = \"wait\";\n        buttonStyle.background = \"#000000\";\n\n        document.getElementById(\"quickSort\").disabled = true;\n        buttonStyle = document.getElementById(\"quickSort\").style;\n        document.getElementById(\"quickSort\").title = DISABLED_BUTTON;\n        buttonStyle.cursor = \"wait\";\n        buttonStyle.background = \"#000000\";\n\n        document.getElementById(\"insertionSort\").disabled = true;\n        buttonStyle = document.getElementById(\"insertionSort\").style;\n        document.getElementById(\"insertionSort\").title = DISABLED_BUTTON;\n        buttonStyle.cursor = \"wait\";\n        buttonStyle.background = \"#000000\";\n\n        document.getElementById(\"heapSort\").disabled = true;\n        buttonStyle = document.getElementById(\"heapSort\").style;\n        document.getElementById(\"heapSort\").title = DISABLED_BUTTON;\n        buttonStyle.cursor = \"wait\";\n        buttonStyle.background = \"#000000\";\n\n        document.getElementById(\"selectionSort\").disabled = true;\n        buttonStyle = document.getElementById(\"selectionSort\").style;\n        document.getElementById(\"selectionSort\").title = DISABLED_BUTTON;\n        buttonStyle.cursor = \"wait\";\n        buttonStyle.background = \"#000000\";\n\n        document.getElementById(\"bubbleSort\").disabled = true;\n        buttonStyle = document.getElementById(\"bubbleSort\").style;\n        document.getElementById(\"bubbleSort\").title = DISABLED_BUTTON;\n        buttonStyle.cursor = \"wait\";\n        buttonStyle.background = \"#000000\";\n\n        document.getElementById(\"modQuickSort\").disabled = true;\n        buttonStyle = document.getElementById(\"modQuickSort\").style;\n        document.getElementById(\"modQuickSort\").title = DISABLED_BUTTON;\n        buttonStyle.cursor = \"wait\";\n        buttonStyle.background = \"#000000\";\n\n        document.getElementById(\"comparisonPlot\").disabled = true;\n        buttonStyle = document.getElementById(\"comparisonPlot\").style;\n        document.getElementById(\"comparisonPlot\").title = DISABLED_BUTTON;\n        buttonStyle.cursor = \"wait\";\n        buttonStyle.background = \"#000000\";\n    }\n\n    restoreButtons() {\n        document.getElementById(\"arrayGen\").disabled = false;\n        let buttonStyle = document.getElementById(\"arrayGen\").style;\n        document.getElementById(\"arrayGen\").title = ENABLED_BUTTON.generateRandomArray;\n        buttonStyle.background = \"#47535E\";\n        buttonStyle.cursor = \"pointer\";\n\n        document.getElementById(\"sortArray\").disabled = false;\n        buttonStyle = document.getElementById(\"sortArray\").style;\n        document.getElementById(\"sortArray\").title = ENABLED_BUTTON.generateSortedArray;\n        buttonStyle.background = \"#47535E\";\n        buttonStyle.cursor = \"pointer\";\n\n        document.getElementById(\"reverseArray\").disabled = false;\n        buttonStyle = document.getElementById(\"reverseArray\").style;\n        document.getElementById(\"reverseArray\").title = ENABLED_BUTTON.generateReversedArray;\n        buttonStyle.background = \"#47535E\";\n        buttonStyle.cursor = \"pointer\";\n\n        document.getElementById(\"mergeSort\").disabled = false;\n        buttonStyle = document.getElementById(\"mergeSort\").style;\n        document.getElementById(\"mergeSort\").title = ENABLED_BUTTON.MergeSort;\n        buttonStyle.background = \"#47535E\";\n        buttonStyle.cursor = \"pointer\";\n\n        document.getElementById(\"quickSort\").disabled = false;\n        buttonStyle = document.getElementById(\"quickSort\").style;\n        document.getElementById(\"quickSort\").title = ENABLED_BUTTON.QuickSort;\n        buttonStyle.background = \"#47535E\";\n        buttonStyle.cursor = \"pointer\";\n\n        document.getElementById(\"bubbleSort\").disabled = false;\n        buttonStyle = document.getElementById(\"bubbleSort\").style;\n        document.getElementById(\"bubbleSort\").title = ENABLED_BUTTON.BubbleSort;\n        buttonStyle.background = \"#47535E\";\n        buttonStyle.cursor = \"pointer\";\n\n        document.getElementById(\"selectionSort\").disabled = false;\n        buttonStyle = document.getElementById(\"selectionSort\").style;\n        document.getElementById(\"selectionSort\").title = ENABLED_BUTTON.SelectionSort;\n        buttonStyle.background = \"#47535E\";\n        buttonStyle.cursor = \"pointer\";\n\n        document.getElementById(\"insertionSort\").disabled = false;\n        buttonStyle = document.getElementById(\"insertionSort\").style;\n        document.getElementById(\"insertionSort\").title = ENABLED_BUTTON.InsertionSort;\n        buttonStyle.background = \"#47535E\";\n        buttonStyle.cursor = \"pointer\";\n\n        document.getElementById(\"heapSort\").disabled = false;\n        buttonStyle = document.getElementById(\"heapSort\").style;\n        document.getElementById(\"heapSort\").title = ENABLED_BUTTON.HeapSort;\n        buttonStyle.background = \"#47535E\";\n        buttonStyle.cursor = \"pointer\";\n\n        document.getElementById(\"modQuickSort\").disabled = false;\n        buttonStyle = document.getElementById(\"modQuickSort\").style;\n        document.getElementById(\"modQuickSort\").title = ENABLED_BUTTON.QuickSort;\n        buttonStyle.background = \"#47535E\";\n        buttonStyle.cursor = \"pointer\";\n\n        document.getElementById(\"comparisonPlot\").disabled = false;\n        buttonStyle = document.getElementById(\"comparisonPlot\").style;\n        document.getElementById(\"comparisonPlot\").title = ENABLED_BUTTON.plotToolTip;\n        buttonStyle.background = \"#47535E\";\n        buttonStyle.cursor = \"pointer\";\n    }\n\n\n    //Sorting Algorithms\n    bubbleSort() {\n        this.disableButtons();\n        const [animations, sortArray] = getBubbleSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const isColorChange = (i % 4 === 0) || (i % 4 === 1);\n            const arrayBars = document.getElementsByClassName('array-bar');\n            if (isColorChange === true) {\n                const color = (i % 4 === 0) ? SECONDARY_COLOR : PRIMARY_COLOR;\n                const [barOneIndex, barTwoIndex] = animations[i];\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                }, i * ANIMATION_SPEED_MS);\n            }\n            else {\n                const [barIndex, newHeight] = animations[i];\n                if (barIndex === -1) {\n                    continue;\n                }\n                const barStyle = arrayBars[barIndex].style;\n                setTimeout(() => {\n                    barStyle.height = `${newHeight}px`;\n                }, i * ANIMATION_SPEED_MS);\n            }\n        }\n        // this.setState({array: sortArray})\n        const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS * animations.length / 2 + 3000);\n        setTimeout(() => this.restoreButtons(), RESTORE_TIME);\n        setTimeout(() => this.setState({ array: sortArray }), RESTORE_TIME);\n    }\n\n    heapSort() {\n        this.disableButtons();\n        const [animations, sortArray] = getHeapSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const arrayBars = document.getElementsByClassName('array-bar');\n            const [type, barOneIndex, barTwoIndex] = animations[i];\n            const barOneStyle = arrayBars[barOneIndex].style;\n            const barTwoStyle = arrayBars[barTwoIndex].style;\n            setTimeout(() => {\n                barOneStyle.backgroundColor = SECONDARY_COLOR;\n                barTwoStyle.backgroundColor = SECONDARY_COLOR;\n            }, (i * (ANIMATION_SPEED_MS) * 3) - (ANIMATION_SPEED_MS * 2));\n            setTimeout(() => {\n                let newHeight = barTwoStyle.height\n                barTwoStyle.height = barOneStyle.height\n                barOneStyle.height = newHeight\n            }, (i * (ANIMATION_SPEED_MS) * 3) - (ANIMATION_SPEED_MS * 1));\n            setTimeout(() => {\n                barOneStyle.backgroundColor = PRIMARY_COLOR;\n                barTwoStyle.backgroundColor = PRIMARY_COLOR;\n            }, (i * (ANIMATION_SPEED_MS) * 3) - (ANIMATION_SPEED_MS * 0));\n        }\n        const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS * animations.length * 3);\n        setTimeout(() => this.restoreButtons(), RESTORE_TIME);\n        setTimeout(() => this.setState({ array: sortArray }), RESTORE_TIME);\n    }\n\n    insertionSort() {\n        this.disableButtons();\n        const [animations, sortArray] = getInsertionSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const isColorChange = (animations[i][0] === \"comparision1\") || (animations[i][0] === \"comparision2\");\n            const arrayBars = document.getElementsByClassName('array-bar');\n            if (isColorChange === true) {\n                const color = (animations[i][0] === \"comparision1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\n                const [temp, barOneIndex, barTwoIndex] = animations[i];\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                }, i * ANIMATION_SPEED_MS);\n            }\n            else {\n                const [temp, barIndex, newHeight] = animations[i];\n                const barStyle = arrayBars[barIndex].style;\n                setTimeout(() => {\n                    barStyle.height = `${newHeight}px`;\n                }, i * ANIMATION_SPEED_MS);\n            }\n        }\n        // this.setState({array: sortArray})\n        const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS * animations.length);\n        setTimeout(() => this.restoreButtons(), RESTORE_TIME);\n        setTimeout(() => this.setState({ array: sortArray }), RESTORE_TIME);\n    }\n\n    mergeSort() {\n        this.disableButtons();\n        const [animations, sortArray] = getMergeSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const isColorChange = (i % 3 !== 2);\n            const arrayBars = document.getElementsByClassName('array-bar');\n            if (isColorChange === true) {\n                const [barOneIndex, barTwoIndex] = animations[i];\n                const color = (i % 3 === 0) ? SECONDARY_COLOR : PRIMARY_COLOR;\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n                //If we don't multiply by the index then every animations[i] wait for exactly ANIMATION_SPEED_MS and immediately change into final state\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                }, i * ANIMATION_SPEED_MS);\n\n            }\n            else {\n                setTimeout(() => {\n                    const [barOneIdx, newHeight] = animations[i];\n                    const barOneStyle = arrayBars[barOneIdx].style;\n                    barOneStyle.height = `${newHeight}px`;\n                }, i * ANIMATION_SPEED_MS);\n            }\n        }\n        // this.setState({array: sortArray})\n        const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS * animations.length / 2 + 3000);\n        setTimeout(() => this.restoreButtons(), RESTORE_TIME);\n        setTimeout(() => this.setState({ array: sortArray }), RESTORE_TIME);\n    }\n\n    modQuickSort() {\n        this.disableButtons();\n        const [animations, sortArray] = getModifiedQuickSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length - 1; i++) {\n            const isColorChange = (i % 6 === 0) || (i % 6 === 1);\n            const arrayBars = document.getElementsByClassName('array-bar');\n            if (isColorChange === true) {\n                const color = (i % 6 === 0) ? SECONDARY_COLOR : PRIMARY_COLOR;\n                const [barOneIndex, barTwoIndex] = animations[i];\n                if (barOneIndex === -1) {\n                    continue;\n                }\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                }, i * ANIMATION_SPEED_MS);\n            }\n            else {\n                const [barIndex, newHeight] = animations[i];\n                if (barIndex === -1) {\n                    continue;\n                }\n                const barStyle = arrayBars[barIndex].style;\n                setTimeout(() => {\n                    barStyle.height = `${newHeight}px`;\n                }, i * ANIMATION_SPEED_MS);\n            }\n        }\n        const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS * animations.length / 2 + 3000);\n        setTimeout(() => this.restoreButtons(), RESTORE_TIME);\n        setTimeout(() => this.setState({ array: sortArray }), RESTORE_TIME);\n    }\n\n    quickSort() {\n        this.disableButtons();\n        const [animations, sortArray] = getQuickSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length - 1; i++) {\n            const isColorChange = (i % 6 === 0) || (i % 6 === 1);\n            const arrayBars = document.getElementsByClassName('array-bar');\n            if (isColorChange === true) {\n                const color = (i % 6 === 0) ? SECONDARY_COLOR : PRIMARY_COLOR;\n                const [barOneIndex, barTwoIndex] = animations[i];\n                if (barOneIndex === -1) {\n                    continue;\n                }\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                }, i * ANIMATION_SPEED_MS);\n            }\n            else {\n                const [barIndex, newHeight] = animations[i];\n                if (barIndex === -1) {\n                    continue;\n                }\n                const barStyle = arrayBars[barIndex].style;\n                setTimeout(() => {\n                    barStyle.height = `${newHeight}px`;\n                }, i * ANIMATION_SPEED_MS);\n            }\n        }\n        const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS * animations.length / 2 + 3000);\n        setTimeout(() => this.restoreButtons(), RESTORE_TIME);\n        setTimeout(() => this.setState({ array: sortArray }), RESTORE_TIME);\n\n    }\n\n    selectionSort() {\n        this.disableButtons();\n        const [animations, sortArray] = getSelectionSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const isColorChange = (animations[i][0] === \"comparision1\") || (animations[i][0] === \"comparision2\");\n            const arrayBars = document.getElementsByClassName('array-bar');\n            if (isColorChange === true) {\n                const color = (animations[i][0] === \"comparision1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\n                const [temp, barOneIndex, barTwoIndex] = animations[i];\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                }, i * ANIMATION_SPEED_MS);\n            }\n            else {\n                const [temp, barIndex, newHeight] = animations[i];\n                const barStyle = arrayBars[barIndex].style;\n                setTimeout(() => {\n                    barStyle.height = `${newHeight}px`;\n                }, i * ANIMATION_SPEED_MS);\n            }\n        }\n        // this.setState({array: sortArray})\n        const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS * animations.length / 2 + 3000);\n        setTimeout(() => this.restoreButtons(), RESTORE_TIME);\n        setTimeout(() => this.setState({ array: sortArray }), RESTORE_TIME);\n    }\n\n\n    getChartRandomData() {\n        this.resetData();\n        var arraySizes = [1000, 2000, 4000, 5000, 10000, 40000, 50000];\n        var array = []\n        var t0, t1 = 0;\n        for (var index = 0; index < arraySizes.length; ++index) { //Iterate through each array size\n            array = [];\n            for (let i = 0; i < arraySizes[index]; i++) { array.push(Math.random()); } //Generate an array based on the current array size\n            var tmp = []\n            for (let i = 0; i < (arraySizes.length - index); i++) {\n                t0 = performance.now();\n                bubbleSort(array.slice());\n                t1 = performance.now();\n                tmp.push(t1 - t0)\n            }\n            bubbleSortData.push(average(tmp));\n\n\n            tmp = []\n            for (let i = 0; i < (arraySizes.length - index); i++) {\n                t0 = performance.now();\n                heapSort(array.slice());\n                t1 = performance.now();\n                tmp.push(t1 - t0)\n            }\n            heapSortData.push(average(tmp));\n\n            tmp = []\n            for (let i = 0; i < (arraySizes.length - index); i++) {\n                t0 = performance.now();\n                insertionSort(array.slice());\n                t1 = performance.now();\n                tmp.push(t1 - t0)\n            }\n            insertionSortData.push(average(tmp));\n\n            tmp = []\n            for (let i = 0; i < (arraySizes.length - index); i++) {\n                t0 = performance.now();\n                mergeSort(array.slice());\n                t1 = performance.now();\n                tmp.push(t1 - t0)\n            }\n            mergeSortData.push(average(tmp));\n\n            tmp = []\n            for (let i = 0; i < (arraySizes.length - index); i++) {\n                t0 = performance.now();\n                modifiedQuickSort(array.slice());\n                t1 = performance.now();\n                tmp.push(t1 - t0)\n            }\n            modifiedQuickSortData.push(average(tmp));\n\n            tmp = []\n            for (let i = 0; i < (arraySizes.length - index); i++) {\n                t0 = performance.now();\n                quickSort(array.slice());\n                t1 = performance.now();\n                tmp.push(t1 - t0)\n            }\n            quickSortData.push(average(tmp));\n\n            tmp = []\n            for (let i = 0; i < (arraySizes.length - index); i++) {\n                t0 = performance.now();\n                selectionSort(array.slice());\n                t1 = performance.now();\n                tmp.push(t1 - t0)\n            }\n            selectionSortData.push(average(tmp));\n        }\n    }\n    getChartSortedData() {\n        this.resetData();\n        var arraySizes = [1000, 2000, 4000, 5000, 10000, 40000, 50000];\n        var array = []\n        var t0, t1 = 0;\n        for (var index = 0; index < arraySizes.length; ++index) { //Iterate through each array size\n            array = [];\n            for (let i = 0; i < arraySizes[index]; i++) { array.push(Math.random()); } //Generate an array based on the current array size\n            array.sort((a, b) => a - b); //Adjusted sort function because sort w/o args uses string comparison, not number\n            var tmp = []\n            for (let i = 0; i < (arraySizes.length - index); i++) {\n                t0 = performance.now();\n                bubbleSort(array.slice());\n                t1 = performance.now();\n                tmp.push(t1 - t0)\n            }\n            bubbleSortData.push(average(tmp));\n\n\n            tmp = []\n            for (let i = 0; i < (arraySizes.length - index); i++) {\n                t0 = performance.now();\n                heapSort(array.slice());\n                t1 = performance.now();\n                tmp.push(t1 - t0)\n            }\n            heapSortData.push(average(tmp));\n\n            tmp = []\n            for (let i = 0; i < (arraySizes.length - index); i++) {\n                t0 = performance.now();\n                insertionSort(array.slice());\n                t1 = performance.now();\n                tmp.push(t1 - t0)\n            }\n            insertionSortData.push(average(tmp));\n\n            tmp = []\n            for (let i = 0; i < (arraySizes.length - index); i++) {\n                t0 = performance.now();\n                mergeSort(array.slice());\n                t1 = performance.now();\n                tmp.push(t1 - t0)\n            }\n            mergeSortData.push(average(tmp));\n\n            tmp = []\n            for (let i = 0; i < (arraySizes.length - index); i++) {\n                t0 = performance.now();\n                modifiedQuickSort(array.slice());\n                t1 = performance.now();\n                tmp.push(t1 - t0)\n            }\n            modifiedQuickSortData.push(average(tmp));\n\n            tmp = []\n            for (let i = 0; i < (arraySizes.length - index); i++) {\n                t0 = performance.now();\n                quickSort(array.slice());\n                t1 = performance.now();\n                tmp.push(t1 - t0)\n            }\n            quickSortData.push(average(tmp));\n\n            tmp = []\n            for (let i = 0; i < (arraySizes.length - index); i++) {\n                t0 = performance.now();\n                selectionSort(array.slice());\n                t1 = performance.now();\n                tmp.push(t1 - t0)\n            }\n            selectionSortData.push(average(tmp));\n        }\n    }\n    getChartReverseData() {\n        this.resetData();\n        var arraySizes = [1000, 2000, 4000, 5000, 10000, 40000, 50000];\n        var array = []\n        var t0, t1 = 0;\n        for (var index = 0; index < arraySizes.length; ++index) { //Iterate through each array size\n            array = [];\n            for (let i = 0; i < arraySizes[index]; i++) { array.push(Math.random()); } //Generate an array based on the current array size\n            array.sort((a, b) => a - b).reverse();\n\n            var tmp = []\n            for (let i = 0; i < (arraySizes.length - index); i++) {\n                t0 = performance.now();\n                bubbleSort(array.slice());\n                t1 = performance.now();\n                tmp.push(t1 - t0)\n            }\n            bubbleSortData.push(average(tmp));\n\n\n            tmp = []\n            for (let i = 0; i < (arraySizes.length - index); i++) {\n                t0 = performance.now();\n                heapSort(array.slice());\n                t1 = performance.now();\n                tmp.push(t1 - t0)\n            }\n            heapSortData.push(average(tmp));\n\n            tmp = []\n            for (let i = 0; i < (arraySizes.length - index); i++) {\n                t0 = performance.now();\n                insertionSort(array.slice());\n                t1 = performance.now();\n                tmp.push(t1 - t0)\n            }\n            insertionSortData.push(average(tmp));\n\n            tmp = []\n            for (let i = 0; i < (arraySizes.length - index); i++) {\n                t0 = performance.now();\n                mergeSort(array.slice());\n                t1 = performance.now();\n                tmp.push(t1 - t0)\n            }\n            mergeSortData.push(average(tmp));\n\n            tmp = []\n            for (let i = 0; i < (arraySizes.length - index); i++) {\n                t0 = performance.now();\n                modifiedQuickSort(array.slice());\n                t1 = performance.now();\n                tmp.push(t1 - t0)\n            }\n            modifiedQuickSortData.push(average(tmp));\n\n            tmp = []\n            for (let i = 0; i < (arraySizes.length - index); i++) {\n                t0 = performance.now();\n                quickSort(array.slice());\n                t1 = performance.now();\n                tmp.push(t1 - t0)\n            }\n            quickSortData.push(average(tmp));\n\n            tmp = []\n            for (let i = 0; i < (arraySizes.length - index); i++) {\n                t0 = performance.now();\n                selectionSort(array.slice());\n                t1 = performance.now();\n                tmp.push(t1 - t0)\n            }\n            selectionSortData.push(average(tmp));\n        }\n    }\n    resetData() {\n        bubbleSortData = [];\n        heapSortData = [];\n        insertionSortData = [];\n        mergeSortData = [];\n        modifiedQuickSortData = [];\n        quickSortData = [];\n        selectionSortData = [];\n    }\n    getAllData() {\n        this.getChartRandomData();\n        //console.log(\"bubble\", bubbleSortData);\n        this.setState({\n            chartDataRandom: {\n                labels: ['1,000', '2,000', '4,000', '5,000', '10,000', '40,000', '50,000'],\n                datasets: [\n                    {\n                        label: 'Bubble Sort',\n                        backgroundColor: 'rgba(255, 99, 132, 0.6)',\n                        data: bubbleSortData,\n                    }, {\n                        label: 'Heap Sort',\n                        backgroundColor: 'rgba(54, 162, 235, 0.6)',\n                        data: heapSortData,\n                    }, {\n                        label: 'Insertion Sort',\n                        backgroundColor: 'rgba(255, 206, 86, 0.6)',\n                        data: insertionSortData,\n                    }, {\n                        label: 'Merge Sort',\n                        backgroundColor: 'rgba(75, 192, 192, 0.6)',\n                        data: mergeSortData,\n                    }, {\n                        label: 'Modified Quick Sort',\n                        backgroundColor: 'rgba(153, 102, 255, 0.6)',\n                        data: modifiedQuickSortData,\n                    }, {\n                        label: 'Quick Sort',\n                        backgroundColor: 'rgba(255, 159, 64, 0.6)',\n                        data: quickSortData,\n                    }, {\n                        label: 'Selection Sort',\n                        backgroundColor: 'rgba(99, 255, 132, 0.6)',\n                        data: selectionSortData,\n                    }\n                ]\n            }\n        });\n\n        this.getChartSortedData();\n        //console.log(\"bubblesort\", bubbleSortData);\n        this.setState({\n            chartDataSorted: {\n                labels: ['1,000', '2,000', '4,000', '5,000', '10,000', '40,000', '50,000'],\n                datasets: [\n                    {\n                        label: 'Bubble Sort',\n                        backgroundColor: 'rgba(255, 99, 132, 0.6)',\n                        data: bubbleSortData,\n                    }, {\n                        label: 'Heap Sort',\n                        backgroundColor: 'rgba(54, 162, 235, 0.6)',\n                        data: heapSortData,\n                    }, {\n                        label: 'Insertion Sort',\n                        backgroundColor: 'rgba(255, 206, 86, 0.6)',\n                        data: insertionSortData,\n                    }, {\n                        label: 'Merge Sort',\n                        backgroundColor: 'rgba(75, 192, 192, 0.6)',\n                        data: mergeSortData,\n                    }, {\n                        label: 'Modified Quick Sort',\n                        backgroundColor: 'rgba(153, 102, 255, 0.6)',\n                        data: modifiedQuickSortData,\n                    }, {\n                        label: 'Quick Sort',\n                        backgroundColor: 'rgba(255, 159, 64, 0.6)',\n                        data: quickSortData,\n                    }, {\n                        label: 'Selection Sort',\n                        backgroundColor: 'rgba(99, 255, 132, 0.6)',\n                        data: selectionSortData,\n                    }\n                ]\n            }\n        });\n\n        this.getChartReverseData();\n        //console.log(\"bubblereverse\", bubbleSortData);\n        this.setState({\n            chartDataReversed: {\n                labels: ['1,000', '2,000', '4,000', '5,000', '10,000', '40,000', '50,000'],\n                datasets: [\n                    {\n                        label: 'Bubble Sort',\n                        backgroundColor: 'rgba(255, 99, 132, 0.6)',\n                        data: bubbleSortData,\n                    }, {\n                        label: 'Heap Sort',\n                        backgroundColor: 'rgba(54, 162, 235, 0.6)',\n                        data: heapSortData,\n                    }, {\n                        label: 'Insertion Sort',\n                        backgroundColor: 'rgba(255, 206, 86, 0.6)',\n                        data: insertionSortData,\n                    }, {\n                        label: 'Merge Sort',\n                        backgroundColor: 'rgba(75, 192, 192, 0.6)',\n                        data: mergeSortData,\n                    }, {\n                        label: 'Modified Quick Sort',\n                        backgroundColor: 'rgba(153, 102, 255, 0.6)',\n                        data: modifiedQuickSortData,\n                    }, {\n                        label: 'Quick Sort',\n                        backgroundColor: 'rgba(255, 159, 64, 0.6)',\n                        data: quickSortData,\n                    }, {\n                        label: 'Selection Sort',\n                        backgroundColor: 'rgba(99, 255, 132, 0.6)',\n                        data: selectionSortData,\n                    }\n                ]\n            }\n        });\n    }\n\n    comparisonPlot() {\n        this.disableButtons()\n        this.render()\n        alert(\"This will take about 1 minute to complete, if your browser asks you to Wait please allow it. \");\n        this.getAllData()\n        document.title = \"Time Complexity Analysis\";\n        this.setState({ showGraphs: true })\n    }\n\n    render() {\n        const array = this.state.array;\n        const SORT_BUTTONS = 6;\n        const TOTAL_BUTTONS = 1 + SORT_BUTTONS;\n        if (this.state.showGraphs) {\n            return (\n                <>\n                    <div className=\"Charts\">\n                        <div className=\"App-header\" >\n                            <h1>Time Complexity Analysis</h1>\n                        </div>\n                        <Chart chartData={this.state.chartDataRandom} title=\"Algorithms Tested With Random Data\" />\n                        <div style={{ height: `50px` }}></div>\n                        <Chart chartData={this.state.chartDataSorted} title=\"Algorithms Tested With Sorted Data\" />\n                        <div style={{ height: `50px` }}></div>\n                        <Chart chartData={this.state.chartDataReversed} title=\"Algorithms Tested With Reversely Sorted Data\" />\n                    </div>\n                </>\n            );\n\n        } else {\n            return (\n                <>\n                    <div className=\"array-container\" style={{ position: 'absolute', right: `20px` }}>\n                        {array.map((value, idx) => (\n                            <div\n                                className=\"array-bar\"\n                                key={idx}\n                                style={{\n                                    backgroundColor: PRIMARY_COLOR,\n                                    height: `${value}px`\n                                }}\n                            ></div>\n                        ))}\n                    </div>\n                    <div className=\"buttons\" >\n                        <button title=\"Generates a new random unsorted array\" id=\"arrayGen\" style={{ position: 'relative', top: `${0 * (WINDOW_HEIGHT - 20) / TOTAL_BUTTONS}px` }} onClick={() => this.resetArray()}>\n                            Generate an Unsorted Array\n                    </button>\n                        <button title=\"Generates a new sorted array\" id=\"sortArray\" style={{ position: 'relative', top: `${0 * (WINDOW_HEIGHT - 20) / TOTAL_BUTTONS}px` }} onClick={() => this.sortArray()}>\n                            Generate a Sorted Array\n                    </button>\n                        <button title=\"Generates a new reversed array\" id=\"reverseArray\" style={{ position: 'relative', top: `${0 * (WINDOW_HEIGHT - 20) / TOTAL_BUTTONS}px` }} onClick={() => this.reverseArray()}>\n                            Generate a Sorted Reversed Array\n                    </button>\n                    <button title=\"Ω(n log(n)), θ(n log(n)), O(n log(n))\" id=\"mergeSort\" style={{ position: 'relative', top: `${0.5 * (WINDOW_HEIGHT - 20) / TOTAL_BUTTONS}px` }} onClick={() => this.mergeSort()}>\n                            Merge Sort\n                    </button>\n                    <button title=\"Ω(n log(n)), θ(n log(n)), O(n^2)\" id=\"quickSort\" style={{ position: 'relative', top: `${0.5 * (WINDOW_HEIGHT - 20) / TOTAL_BUTTONS}px` }} onClick={() => this.quickSort()}>\n                            Quick Sort\n                    </button>\n                    <button title=\"Ω(n log(n)), θ(n log(n)), O(n log(n))\" id=\"heapSort\" style={{ position: 'relative', top: `${0.5 * (WINDOW_HEIGHT - 20) / TOTAL_BUTTONS}px` }} onClick={() => this.heapSort()}>\n                            Heap Sort\n                    </button>\n                    <button title=\"Ω(n log(n)), θ(n log(n)), O(n^2)\" id=\"modQuickSort\" style={{ position: 'relative', top: `${0.5 * (WINDOW_HEIGHT - 20) / TOTAL_BUTTONS}px` }} onClick={() => this.modQuickSort()}>\n                            Modified Quick Sort\n                    </button>\n                    <button title=\"Ω(n), θ(n^2), O(n^2)\" id=\"insertionSort\" style={{ position: 'relative', top: `${0.5 * (WINDOW_HEIGHT - 20) / TOTAL_BUTTONS}px` }} onClick={() => this.insertionSort()}>\n                            Insertion Sort\n                    </button>\n                        <button title=\"Ω(n), θ(n^2), O(n^2)\" id=\"bubbleSort\" style={{ position: 'relative', top: `${0.5 * (WINDOW_HEIGHT - 20) / TOTAL_BUTTONS}px` }} onClick={() => this.bubbleSort()}>\n                            Bubble Sort\n                    </button>\n                    <button title=\"Ω(n^2), θ(n^2), O(n^2)\" id=\"selectionSort\" style={{ position: 'relative', top: `${0.5 * (WINDOW_HEIGHT - 20) / TOTAL_BUTTONS}px` }} onClick={() => this.selectionSort()}>\n                            Selection Sort\n                    </button>\n                        <button title=\"Compare all algorithms for different input sizes\" id=\"comparisonPlot\" style={{ position: 'relative', top: `${1.0 * (WINDOW_HEIGHT - 20) / TOTAL_BUTTONS}px` }} onClick={() => this.comparisonPlot()}>\n                            Time Complexity Analysis\n                    </button>\n\n                    </div>\n                </>\n            );\n        }\n    }\n}\n\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\nfunction randomIntFromInterval(min, max) { return Math.floor(Math.random() * (max - min + 1) + min); }//min max inclusive\nconst average = arr => arr.reduce((sume, el) => sume + el, 0) / arr.length;\nexport default SortingVisualizer;","import React from 'react';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}