{"version":3,"sources":["SortingAlgorithms/BubbleSort.js","SortingAlgorithms/MergeSort.js","SortingAlgorithms/QuickSort.js","SortingAlgorithms/SelectionSort.js","SortingVisualizer/SortingVisualizer.jsx","SortingAlgorithms/InsertionSort.js","App.js","serviceWorker.js","index.js"],"names":["getBubbleSortAnimations","array","animations","auxillaryArray","slice","N","length","i","j","push","swap","bubbleSort","javaScriptSortedArray","sort","a","b","console","log","firstArray","secondArray","arraysAreEqual","firstIndex","secondIndex","temp","getMergeSortAnimations","mergeSort","startIndex","endIndex","middleIndex","Math","floor","sortArray","merge","getQuickSortAnimations","quickSort","pivotIndex","pivot","partitionArray","getSelectionSortAnimations","minIndex","selectionSort","WINDOW_WIDTH","window","innerWidth","WINDOW_HEIGHT","innerHeight","NUMBER_OF_ARRAY_BARS","parseInt","onresize","DISABLED_BUTTON","ENABLED_BUTTON","SortingVisualizer","props","state","this","resetArray","min","max","random","setState","restoreButtons","document","getElementById","disabled","buttonStyle","style","title","cursor","background","disableButtons","isColorChange","arrayBars","getElementsByClassName","color","barOneIndex","barTwoIndex","barOneStyle","barTwoStyle","setTimeout","backgroundColor","barIndex","newHeight","barStyle","height","RESTORE_TIME","key","insertionSort","getInsertionSortAnimations","barOneIdx","className","position","right","map","value","idx","id","top","onClick","heapSort","modQuickSort","comparisonPlot","React","Component","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6b9009bb.chunk.js","sourcesContent":["export function getBubbleSortAnimations(array) {\n    let animations  = [];\n    let auxillaryArray = array.slice();\n    bubbleSort(auxillaryArray, animations);\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n    console.log(\"sort works correctly? \",arraysAreEqual(javaScriptSortedArray, auxillaryArray));\n    array = auxillaryArray;\n    return [animations, array];\n}\n\nfunction bubbleSort(auxillaryArray, animations) {\n    const N = auxillaryArray.length;\n    for (let i = 0; i < N - 1; i++) {\n        for (let j = 0; j < N - i -1; j++) {\n            animations.push([j, j + 1]);\n            animations.push([j, j + 1]);\n            if (auxillaryArray[j] > auxillaryArray[j + 1]) {\n                animations.push([j, auxillaryArray[j + 1]]);\n                animations.push([j + 1, auxillaryArray[j]]);\n                swap(auxillaryArray, j, j + 1);\n            }\n            else {\n                animations.push([-1, -1]);\n                animations.push([-1, -1]);\n            }\n        }\n    }\n}\n\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\n    let temp = auxillaryArray[firstIndex];\n    auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\n    auxillaryArray[secondIndex] = temp;\n}\n\nfunction arraysAreEqual(firstArray, secondArray) {\n    if (firstArray.length !== secondArray.length) {\n        return false;\n    }\n    for (let i = 0; i < firstArray.length; i++) {\n      if (firstArray[i] !== secondArray[i]) {\n        return false;\n      }\n    }\n    return true;\n}","export function getMergeSortAnimations(array) {\n    let animations  = [];\n    let auxillaryArray = array.slice();\n    mergeSort(auxillaryArray, 0, auxillaryArray.length - 1, animations);\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n    console.log(arraysAreEqual(javaScriptSortedArray, auxillaryArray));\n    array = auxillaryArray;\n    return [animations, array];\n}\n\nfunction mergeSort(auxillaryArray, startIndex, endIndex, animations) {\n    if(startIndex === endIndex)\n        return;\n    const middleIndex = Math.floor((startIndex + endIndex)/2);\n    mergeSort(auxillaryArray, startIndex, middleIndex, animations);\n    mergeSort(auxillaryArray, middleIndex + 1, endIndex, animations);\n    merge(auxillaryArray, startIndex, middleIndex, endIndex, animations);\n}\n\nfunction merge(auxillaryArray, startIndex, middleIndex, endIndex, animations) {\n    let sortArray = [];\n    let i = startIndex;\n    let j = middleIndex + 1;\n    while(i <= middleIndex && j <= endIndex) {\n        //Comparing value at ith and jth index so push them to change their color\n        animations.push([i, j]);\n        //By changing color we imply that we are comparing those two values and then again we should revert back to their original color so push them again\n        animations.push([i, j]);\n        if(auxillaryArray[i] <= auxillaryArray[j]) {\n            //We should overwrite the value at (i+startIndex)th index with ith index so push them to highlight swap their heights\n            animations.push([sortArray.length + startIndex, auxillaryArray[i]]);\n            sortArray.push(auxillaryArray[i++]);\n        }\n        else {\n            //We should overwrite the value at (i+startIndex)th index with jth index so push them to highlight swap their heights\n            animations.push([sortArray.length + startIndex, auxillaryArray[j]]);\n            sortArray.push(auxillaryArray[j++]);\n        }\n    }\n    while(i <= middleIndex) {\n        animations.push([i, i]);\n        animations.push([i, i]);\n        animations.push([sortArray.length + startIndex, auxillaryArray[i]]);\n        sortArray.push(auxillaryArray[i++]);\n    }\n    while(j <= endIndex) {\n        animations.push([j, j]);\n        animations.push([j, j]);\n        animations.push([sortArray.length + startIndex, auxillaryArray[j]]);\n        sortArray.push(auxillaryArray[j++]);\n    }\n    for (let i = startIndex; i <= endIndex; i++) {\n        auxillaryArray[i] = sortArray[i - startIndex];\n    }\n}\n\nfunction arraysAreEqual(firstArray, secondArray) {\n    if (firstArray.length !== secondArray.length) {\n        return false;\n    }\n    for (let i = 0; i < firstArray.length; i++) {\n      if (firstArray[i] !== secondArray[i]) {\n        return false;\n      }\n    }\n    return true;\n}","export function getQuickSortAnimations(array) {\n    let animations  = [];\n    let auxillaryArray = array.slice();\n    quickSort(auxillaryArray, 0, auxillaryArray.length - 1, animations);\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n    console.log(\"sort works correctly? \",arraysAreEqual(javaScriptSortedArray, auxillaryArray));\n    array = auxillaryArray;\n    return [animations, array];\n}\n\ngetQuickSortAnimations([7,2,1,6]);\n\nfunction quickSort(auxillaryArray, startIndex, endIndex, animations) {\n    let pivotIndex;\n    if (startIndex < endIndex) {\n        pivotIndex = partitionArray(auxillaryArray, startIndex, endIndex, animations);\n        quickSort(auxillaryArray, startIndex, pivotIndex - 1, animations);\n        quickSort(auxillaryArray, pivotIndex + 1, endIndex, animations);\n    }\n}\n\nfunction partitionArray(auxillaryArray, startIndex, endIndex, animations) {\n    let pivot = auxillaryArray[endIndex];\n    let pivotIndex = startIndex;\n    for (let i = startIndex; i <= endIndex - 1; i++) {\n        animations.push([i, endIndex]);\n        animations.push([i, endIndex]);\n        if (auxillaryArray[i] <= pivot) {\n            //Swap these two heights\n            animations.push([i, auxillaryArray[pivotIndex]]);\n            animations.push([pivotIndex, auxillaryArray[i]]);\n            swap(auxillaryArray, i , pivotIndex);\n            pivotIndex++;\n        }\n        else {\n            animations.push([-1, -1]);\n            animations.push([-1, -1]);\n        }\n        animations.push([-1, -1]);\n        animations.push([-1, -1]);\n    }\n    animations.push([-1, -1]);\n    animations.push([-1, -1]);\n    animations.push([-1, -1]);\n    animations.push([-1, -1]);\n    //Swap these two heights\n    animations.push([pivotIndex, auxillaryArray[endIndex]]);\n    animations.push([endIndex, auxillaryArray[pivotIndex]]);\n    swap(auxillaryArray, pivotIndex, endIndex);\n    return pivotIndex;\n}\n\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\n    let temp = auxillaryArray[firstIndex];\n    auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\n    auxillaryArray[secondIndex] = temp;\n}\n\nfunction arraysAreEqual(firstArray, secondArray) {\n    if (firstArray.length !== secondArray.length) {\n        return false;\n    }\n    for (let i = 0; i < firstArray.length; i++) {\n      if (firstArray[i] !== secondArray[i]) {\n        return false;\n      }\n    }\n    return true;\n}","export function getSelectionSortAnimations(array) {\n    let animations  = [];\n    let auxillaryArray = array.slice();\n    selectionSort(auxillaryArray, animations);\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n    console.log(\"sort works correctly? \",arraysAreEqual(javaScriptSortedArray, auxillaryArray));\n    array = auxillaryArray;\n    return [animations, array];\n}\n\nfunction selectionSort(auxillaryArray, animations) {\n    const N = auxillaryArray.length;\n    for (let i = 0; i < N - 1; i++) {\n        let minIndex = i; //Finding minimum element in unsorted array\n        for (let j = i + 1; j < N; j++) {\n            animations.push([\"comparision1\", j, minIndex]);\n            animations.push([\"comparision2\", j, minIndex]);\n            if (auxillaryArray[j] < auxillaryArray[minIndex]) {\n                minIndex = j;\n            }\n        }\n        animations.push([\"swap\", minIndex, auxillaryArray[i]]);\n        animations.push([\"swap\", i, auxillaryArray[minIndex]]);\n        // Swap the found minimum element with the first element\n        swap(auxillaryArray, minIndex, i);\n    }\n}\n\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\n    let temp = auxillaryArray[firstIndex];\n    auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\n    auxillaryArray[secondIndex] = temp;\n}\n\nfunction arraysAreEqual(firstArray, secondArray) {\n    if (firstArray.length !== secondArray.length) {\n        return false;\n    }\n    for (let i = 0; i < firstArray.length; i++) {\n      if (firstArray[i] !== secondArray[i]) {\n        return false;\n      }\n    }\n    return true;\n}","import React from 'react';\nimport './SortingVisualizer.css';\nimport {getBubbleSortAnimations} from '../SortingAlgorithms/BubbleSort';\nimport {getHeapSortAnimations} from '../SortingAlgorithms/HeapSort';\nimport {getInsertionSortAnimations} from '../SortingAlgorithms/InsertionSort';\nimport {getMergeSortAnimations} from '../SortingAlgorithms/MergeSort';\nimport {getModifiedQuickSortAnimations} from '../SortingAlgorithms/ModifiedQuickSort';\nimport {getQuickSortAnimations} from '../SortingAlgorithms/QuickSort';\nimport {getSelectionSortAnimations} from '../SortingAlgorithms/SelectionSort';\n\n//import {getInsertionSortAnimations} from '../SortingAlgorithms/InPlaceQuickSort';\n\n//Changing width,height accordingly with the browser\nlet WINDOW_WIDTH = window.innerWidth;\nlet WINDOW_HEIGHT = window.innerHeight;\nlet NUMBER_OF_ARRAY_BARS = parseInt((WINDOW_WIDTH - 200)/8);\n\n// TODO: \n// HeapSort.js\n// InPlaceQuickSort.js\n// ModifiedQuickSort.js\n// Update SortVisualizer.jsx\n// Update the CSS\n\nfunction reportWindowSize() {\n    WINDOW_WIDTH =  window.innerWidth;\n    WINDOW_HEIGHT = window.innerHeight;\n    NUMBER_OF_ARRAY_BARS = parseInt((WINDOW_WIDTH - 200)/8);\n}\nwindow.onresize = reportWindowSize; //TBD -> find a way to update state also when resized\n\n\nconst PRIMARY_COLOR = 'dodgerblue'; //Normal color of bars\nconst SECONDARY_COLOR = 'orangered'; //Color of bars when they are being compared\nconst ANIMATION_SPEED_MS = 1; //Animation Speed (how fast color changes, how fast height gets overwritten)\n\n//Tooltips for buttons\nconst DISABLED_BUTTON = \"Currently Disabled\"\nconst ENABLED_BUTTON = {\n    nlogn: \"O(NlogN) Time Complexity\",\n    nSquare: \"O(N^2) Time Complexity\",\n    plotToolTip: \"Compare all algorithms for different input sizes\",\n    generateArray: \"Generates a new random array\"\n}\n\nclass SortingVisualizer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            array: []\n        };\n    }\n\n    componentDidMount() {\n        this.resetArray();\n    }\n\n    //Generates new random array \n    resetArray() {\n        const array = []\n        for (let i = 0;i < NUMBER_OF_ARRAY_BARS;i++) {\n            array.push(randomIntFromInterval(25,WINDOW_HEIGHT-30));\n        }\n        this.setState({array: array});\n        this.restoreButtons();\n    }\n\n\n    disableButtons() {\n        document.getElementById(\"arrayGen\").disabled = true;\n        let buttonStyle = document.getElementById(\"arrayGen\").style;\n        document.getElementById(\"arrayGen\").title = DISABLED_BUTTON;\n        buttonStyle.cursor = \"default\";\n        buttonStyle.background = \"#000000\";\n\n        document.getElementById(\"mergeSort\").disabled = true;\n        buttonStyle = document.getElementById(\"mergeSort\").style;\n        document.getElementById(\"mergeSort\").title = DISABLED_BUTTON;\n        buttonStyle.cursor = \"default\";\n        buttonStyle.background = \"#000000\";\n\n        document.getElementById(\"quickSort\").disabled = true;\n        buttonStyle = document.getElementById(\"quickSort\").style;\n        document.getElementById(\"quickSort\").title = DISABLED_BUTTON;\n        buttonStyle.cursor = \"default\";\n        buttonStyle.background = \"#000000\";\n\n        document.getElementById(\"insertionSort\").disabled = true;\n        buttonStyle = document.getElementById(\"insertionSort\").style;\n        document.getElementById(\"insertionSort\").title = DISABLED_BUTTON;\n        buttonStyle.cursor = \"default\";\n        buttonStyle.background = \"#000000\";\n\n        document.getElementById(\"heapSort\").disabled = true;\n        buttonStyle = document.getElementById(\"heapSort\").style;\n        document.getElementById(\"heapSort\").title = DISABLED_BUTTON;\n        buttonStyle.cursor = \"default\";\n        buttonStyle.background = \"#000000\";\n\n        document.getElementById(\"selectionSort\").disabled = true;\n        buttonStyle = document.getElementById(\"selectionSort\").style;\n        document.getElementById(\"selectionSort\").title = DISABLED_BUTTON;\n        buttonStyle.cursor = \"default\";\n        buttonStyle.background = \"#000000\";\n\n        document.getElementById(\"bubbleSort\").disabled = true;\n        buttonStyle = document.getElementById(\"bubbleSort\").style;\n        document.getElementById(\"bubbleSort\").title = DISABLED_BUTTON;\n        buttonStyle.cursor = \"default\";\n        buttonStyle.background = \"#000000\";\n\n        document.getElementById(\"modQuickSort\").disabled = true;\n        buttonStyle = document.getElementById(\"modQuickSort\").style;\n        document.getElementById(\"modQuickSort\").title = DISABLED_BUTTON;\n        buttonStyle.cursor = \"default\";\n        buttonStyle.background = \"#000000\";\n\n        document.getElementById(\"comparisonPlot\").disabled = true;\n        buttonStyle = document.getElementById(\"comparisonPlot\").style;\n        document.getElementById(\"comparisonPlot\").title = DISABLED_BUTTON;\n        buttonStyle.cursor = \"default\";\n        buttonStyle.background = \"#000000\";\n    }\n\n\n    restoreButtons() {\n        document.getElementById(\"arrayGen\").disabled = false;\n        let buttonStyle = document.getElementById(\"arrayGen\").style;\n        document.getElementById(\"arrayGen\").title = ENABLED_BUTTON.generateArray;\n        buttonStyle.background = \"#47535E\";\n        buttonStyle.cursor = \"pointer\";\n\n        document.getElementById(\"mergeSort\").disabled = false;\n        buttonStyle = document.getElementById(\"mergeSort\").style;\n        document.getElementById(\"mergeSort\").title = ENABLED_BUTTON.nlogn;\n        buttonStyle.background = \"#47535E\";\n        buttonStyle.cursor = \"pointer\";\n\n        document.getElementById(\"quickSort\").disabled = false;\n        buttonStyle = document.getElementById(\"quickSort\").style;\n        document.getElementById(\"quickSort\").title = ENABLED_BUTTON.nSquare;\n        buttonStyle.background = \"#47535E\";\n        buttonStyle.cursor = \"pointer\";\n\n        document.getElementById(\"bubbleSort\").disabled = false;\n        buttonStyle = document.getElementById(\"bubbleSort\").style;\n        document.getElementById(\"bubbleSort\").title = ENABLED_BUTTON.nSquare;\n        buttonStyle.background = \"#47535E\";\n        buttonStyle.cursor = \"pointer\";\n\n        document.getElementById(\"selectionSort\").disabled = false;\n        buttonStyle = document.getElementById(\"selectionSort\").style;\n        document.getElementById(\"selectionSort\").title = ENABLED_BUTTON.nSquare;\n        buttonStyle.background = \"#47535E\";\n        buttonStyle.cursor = \"pointer\";\n\n        document.getElementById(\"insertionSort\").disabled = false;\n        buttonStyle = document.getElementById(\"insertionSort\").style;\n        document.getElementById(\"insertionSort\").title = ENABLED_BUTTON.nSquare;\n        buttonStyle.background = \"#47535E\";\n        buttonStyle.cursor = \"pointer\";\n\n        document.getElementById(\"heapSort\").disabled = false;\n        buttonStyle = document.getElementById(\"heapSort\").style;\n        document.getElementById(\"heapSort\").title = ENABLED_BUTTON.nlogn;\n        buttonStyle.background = \"#47535E\";\n        buttonStyle.cursor = \"pointer\";\n\n        document.getElementById(\"modQuickSort\").disabled = false;\n        buttonStyle = document.getElementById(\"modQuickSort\").style;\n        document.getElementById(\"modQuickSort\").title = ENABLED_BUTTON.nlogn;\n        buttonStyle.background = \"#47535E\";\n        buttonStyle.cursor = \"pointer\";\n\n        document.getElementById(\"comparisonPlot\").disabled = false;\n        buttonStyle = document.getElementById(\"comparisonPlot\").style;\n        document.getElementById(\"comparisonPlot\").title = ENABLED_BUTTON.plotToolTip;\n        buttonStyle.background = \"#47535E\";\n        buttonStyle.cursor = \"pointer\";\n    }\n\n\n    //Sorting Algorithms\n    bubbleSort() {\n        this.disableButtons();\n        const [animations,sortArray] = getBubbleSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const isColorChange = (i % 4 === 0) || (i % 4 === 1);\n            const arrayBars = document.getElementsByClassName('array-bar');\n            if(isColorChange === true) {\n                const color = (i % 4 === 0) ? SECONDARY_COLOR : PRIMARY_COLOR;\n                const [barOneIndex, barTwoIndex] = animations[i];\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                },i * ANIMATION_SPEED_MS);\n            }\n            else {\n                const [barIndex, newHeight] = animations[i];\n                if (barIndex === -1) {\n                    continue;\n                }\n                const barStyle = arrayBars[barIndex].style;\n                setTimeout(() => {\n                    barStyle.height = `${newHeight}px`;\n                },i * ANIMATION_SPEED_MS);  \n            }\n        }\n        // this.setState({array: sortArray})\n        const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS*animations.length/2 + 3000);\n        setTimeout(() => this.restoreButtons(), RESTORE_TIME);  \n    }\n\n    heapSort(){\n\n    }\n\n    insertionSort() {\n        this.disableButtons();\n        const [animations,sortArray] = getInsertionSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const isColorChange = (animations[i][0] === \"comparision1\") || (animations[i][0] === \"comparision2\");\n            const arrayBars = document.getElementsByClassName('array-bar');\n            if(isColorChange === true) {\n                const color = (animations[i][0] === \"comparision1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\n                const [temp, barOneIndex, barTwoIndex] = animations[i];\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                },i * ANIMATION_SPEED_MS);\n            }\n            else {\n                const [temp, barIndex, newHeight] = animations[i];\n                const barStyle = arrayBars[barIndex].style;\n                setTimeout(() => {\n                    barStyle.height = `${newHeight}px`;\n                },i * ANIMATION_SPEED_MS);  \n            }\n        }\n        // this.setState({array: sortArray})\n        const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS*animations.length/2 + 3000);\n        setTimeout(() => this.restoreButtons(), RESTORE_TIME); \n    }\n\n    mergeSort() {\n        this.disableButtons();\n        const [animations,sortArray] = getMergeSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const isColorChange = (i % 3 !== 2);\n            const arrayBars = document.getElementsByClassName('array-bar');\n            if(isColorChange === true) {\n                const [barOneIndex, barTwoIndex] = animations[i];\n                const color = (i % 3 === 0) ? SECONDARY_COLOR : PRIMARY_COLOR;\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n                //If we don't multiply by the index then every animations[i] wait for exactly ANIMATION_SPEED_MS and immediately change into final state\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                },i * ANIMATION_SPEED_MS);\n                \n            }\n            else {\n                setTimeout(() => {\n                    const [barOneIdx, newHeight] = animations[i];\n                    const barOneStyle = arrayBars[barOneIdx].style;\n                    barOneStyle.height = `${newHeight}px`;\n                  },i * ANIMATION_SPEED_MS);\n            }\n        }\n        // this.setState({array: sortArray})\n        const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS*animations.length/2 + 3000);\n        setTimeout(() => this.restoreButtons(), RESTORE_TIME); \n    }\n\n    modQuickSort(){\n\n    }\n\n    quickSort() {\n        this.disableButtons();\n        const [animations,sortArray] = getQuickSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length - 1; i++) {\n            const isColorChange = (i % 6 === 0) || (i % 6 === 1);\n            const arrayBars = document.getElementsByClassName('array-bar');\n            if(isColorChange === true) {\n                const color = (i % 6 === 0) ? SECONDARY_COLOR : PRIMARY_COLOR;\n                const [barOneIndex, barTwoIndex] = animations[i];\n                if(barOneIndex === -1) {\n                    continue;\n                }\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                },i * ANIMATION_SPEED_MS);\n            }\n            else {\n                const [barIndex, newHeight] = animations[i];\n                if (barIndex === -1) {\n                    continue;\n                }\n                const barStyle = arrayBars[barIndex].style;\n                setTimeout(() => {\n                    barStyle.height = `${newHeight}px`;\n                },i * ANIMATION_SPEED_MS);  \n            }\n        }\n        // this.setState({array: sortArray})\n        const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS*animations.length/2 + 3000);\n        setTimeout(() => this.restoreButtons(), RESTORE_TIME);  \n    }\n\n    selectionSort() {\n        this.disableButtons();\n        const [animations,sortArray] = getSelectionSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const isColorChange = (animations[i][0] === \"comparision1\") || (animations[i][0] === \"comparision2\");\n            const arrayBars = document.getElementsByClassName('array-bar');\n            if(isColorChange === true) {\n                const color = (animations[i][0] === \"comparision1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\n                const [temp, barOneIndex, barTwoIndex] = animations[i];\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                },i * ANIMATION_SPEED_MS);\n            }\n            else {\n                const [temp, barIndex, newHeight] = animations[i];\n                const barStyle = arrayBars[barIndex].style;\n                setTimeout(() => {\n                    barStyle.height = `${newHeight}px`;\n                },i * ANIMATION_SPEED_MS);  \n            }\n        }\n        // this.setState({array: sortArray})\n        const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS*animations.length/2 + 3000);\n        setTimeout(() => this.restoreButtons(), RESTORE_TIME); \n    }\n\n    comparisonPlot(){ \n        \n    }\n\n\n    render() {\n        const array = this.state.array;\n        const SORT_BUTTONS = 6;\n        const TOTAL_BUTTONS = 1 + SORT_BUTTONS;\n        return(\n            <>\n            <div className=\"array-container\" style={{position:'absolute', right:`20px`}}>\n                {array.map((value, idx) => (\n                    <div\n                        className=\"array-bar\"\n                        key={idx}\n                        style={{\n                        backgroundColor: PRIMARY_COLOR,\n                        height: `${value}px`\n                        }}\n                    ></div>\n                ))}\n            </div>\n            <div className=\"buttons\" > \n                <button title=\"Generates a new random array\" id = \"arrayGen\" style={{position:'relative',top:`${0*(WINDOW_HEIGHT-20)/TOTAL_BUTTONS}px`}} onClick={() => this.resetArray()}>\n                    Generate New Array\n                </button>\n                <button title=\"O(N^2) Time Complexity\" id = \"bubbleSort\" style={{position:'relative',top:`${0.5*(WINDOW_HEIGHT-20)/TOTAL_BUTTONS}px`}} onClick={() => this.bubbleSort()}>\n                    Bubble Sort\n                </button>\n                <button title=\"O(NlogN) Time Complexity\" id = \"heapSort\" style={{position:'relative',top:`${0.5*(WINDOW_HEIGHT-20)/TOTAL_BUTTONS}px`}} onClick={() => this.heapSort()}>\n                    Heap Sort\n                </button>\n                <button title=\"O(N^2) Time Complexity\" id = \"insertionSort\" style={{position:'relative',top:`${0.5*(WINDOW_HEIGHT-20)/TOTAL_BUTTONS}px`}} onClick={() => this.insertionSort()}>\n                    Insertion Sort\n                </button>\n                <button title=\"O(NlogN) Time Complexity\" id = \"mergeSort\" style={{position:'relative',top:`${0.5*(WINDOW_HEIGHT-20)/TOTAL_BUTTONS}px`}} onClick={() => this.mergeSort()}>\n                    Merge Sort\n                </button>\n                <button title=\"O(N^2) Time Complexity\" id = \"modQuickSort\" style={{position:'relative',top:`${0.5*(WINDOW_HEIGHT-20)/TOTAL_BUTTONS}px`}} onClick={() => this.modQuickSort()}>\n                    Modified Quick Sort\n                </button>\n                <button title=\"O(N^2) Time Complexity\" id = \"quickSort\" style={{position:'relative',top:`${0.5*(WINDOW_HEIGHT-20)/TOTAL_BUTTONS}px`}} onClick={() => this.quickSort()}>\n                    In-Place Quick Sort\n                </button>\n                <button title=\"O(N^2) Time Complexity\" id = \"selectionSort\" style={{position:'relative',top:`${0.5*(WINDOW_HEIGHT-20)/TOTAL_BUTTONS}px`}} onClick={() => this.selectionSort()}>\n                    Selection Sort\n                </button>\n                <button title=\"Compare all algorithms for different input sizes\" id = \"comparisonPlot\" style={{position:'relative',top:`${1.0*(WINDOW_HEIGHT-20)/TOTAL_BUTTONS}px`}} onClick={() => this.comparisonPlot()}>\n                    Comparison Plot\n                </button>\n            </div>    \n            </>\n        );\n    }\n}\n\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\nfunction randomIntFromInterval(min, max) {\n    // min and max included\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nexport default SortingVisualizer;","export function getInsertionSortAnimations(array) {\n    let animations  = [];\n    let auxillaryArray = array.slice();\n    insertionSort(auxillaryArray, animations);\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n    console.log(\"sort works correctly? \",arraysAreEqual(javaScriptSortedArray, auxillaryArray));\n    array = auxillaryArray;\n    return [animations, array];\n}\n\nfunction insertionSort(auxillaryArray, animations) {\n    const N = auxillaryArray.length;\n    for (let i = 1; i < N; i++) {\n        let key = auxillaryArray[i];\n        let j = i - 1;\n        animations.push([\"comparision1\", j, i]);\n        animations.push([\"comparision2\", j, i]);\n        while(j >= 0 && auxillaryArray[j] > key) {\n            animations.push([\"overwrite\", j + 1, auxillaryArray[j]]);\n            auxillaryArray[j + 1] = auxillaryArray[j];\n            j = j - 1;\n            if(j >= 0) {\n                animations.push([\"comparision1\", j, i]);\n                animations.push([\"comparision2\", j, i]);\n            }     \n        }\n        animations.push([\"overwrite\", j + 1, key]);\n        auxillaryArray[j + 1] = key;\n    }\n}\n\nfunction arraysAreEqual(firstArray, secondArray) {\n    if (firstArray.length !== secondArray.length) {\n        return false;\n    }\n    for (let i = 0; i < firstArray.length; i++) {\n      if (firstArray[i] !== secondArray[i]) {\n        return false;\n      }\n    }\n    return true;\n}","import React from 'react';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}