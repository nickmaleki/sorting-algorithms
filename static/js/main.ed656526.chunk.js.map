{"version":3,"sources":["SortingAlgorithms/MergeSort.js","SortingAlgorithms/QuickSort.js","SortingAlgorithms/SelectionSort.js","SortingAlgorithms/BubbleSort.js","SortingVisualizer/SortingVisualizer.jsx","SortingAlgorithms/InsertionSort.js","App.js","serviceWorker.js","index.js"],"names":["getMergeSortAnimations","array","animations","auxillaryArray","slice","mergeSort","startIndex","endIndex","middleIndex","Math","floor","sortArray","i","j","push","length","merge","javaScriptSortedArray","sort","a","b","console","log","firstArray","secondArray","arraysAreEqual","getQuickSortAnimations","quickSort","pivotIndex","pivot","swap","partitionArray","firstIndex","secondIndex","temp","getSelectionSortAnimations","N","minIndex","selectionSort","getBubbleSortAnimations","bubbleSort","WINDOW_WIDTH","window","innerWidth","WINDOW_HEIGHT","innerHeight","NUMBER_OF_ARRAY_BARS","parseInt","onresize","ENABLED_BUTTON","SortingVisualizer","props","state","this","resetArray","min","max","random","setState","restoreStoreButtons","document","getElementById","disabled","buttonStyle","style","title","cursor","background","disableSortButtons","isColorChange","arrayBars","getElementsByClassName","barOneIndex","barTwoIndex","color","barOneStyle","barTwoStyle","setTimeout","backgroundColor","barOneIdx","newHeight","height","RESTORE_TIME","barIndex","barStyle","key","insertionSort","getInsertionSortAnimations","className","position","right","map","value","idx","top","onClick","id","heapSort","React","Component","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ed656526.chunk.js","sourcesContent":["export function getMergeSortAnimations(array) {\n    let animations  = [];\n    let auxillaryArray = array.slice();\n    mergeSort(auxillaryArray, 0, auxillaryArray.length - 1, animations);\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n    console.log(arraysAreEqual(javaScriptSortedArray, auxillaryArray));\n    array = auxillaryArray;\n    return [animations, array];\n}\n\nfunction mergeSort(auxillaryArray, startIndex, endIndex, animations) {\n    if(startIndex === endIndex)\n        return;\n    const middleIndex = Math.floor((startIndex + endIndex)/2);\n    mergeSort(auxillaryArray, startIndex, middleIndex, animations);\n    mergeSort(auxillaryArray, middleIndex + 1, endIndex, animations);\n    merge(auxillaryArray, startIndex, middleIndex, endIndex, animations);\n}\n\nfunction merge(auxillaryArray, startIndex, middleIndex, endIndex, animations) {\n    let sortArray = [];\n    let i = startIndex;\n    let j = middleIndex + 1;\n    while(i <= middleIndex && j <= endIndex) {\n        //Comparing value at ith and jth index so push them to change their color\n        animations.push([i, j]);\n        //By changing color we imply that we are comparing those two values and then again we should revert back to their original color so push them again\n        animations.push([i, j]);\n        if(auxillaryArray[i] <= auxillaryArray[j]) {\n            //We should overwrite the value at (i+startIndex)th index with ith index so push them to highlight swap their heights\n            animations.push([sortArray.length + startIndex, auxillaryArray[i]]);\n            sortArray.push(auxillaryArray[i++]);\n        }\n        else {\n            //We should overwrite the value at (i+startIndex)th index with jth index so push them to highlight swap their heights\n            animations.push([sortArray.length + startIndex, auxillaryArray[j]]);\n            sortArray.push(auxillaryArray[j++]);\n        }\n    }\n    while(i <= middleIndex) {\n        animations.push([i, i]);\n        animations.push([i, i]);\n        animations.push([sortArray.length + startIndex, auxillaryArray[i]]);\n        sortArray.push(auxillaryArray[i++]);\n    }\n    while(j <= endIndex) {\n        animations.push([j, j]);\n        animations.push([j, j]);\n        animations.push([sortArray.length + startIndex, auxillaryArray[j]]);\n        sortArray.push(auxillaryArray[j++]);\n    }\n    for (let i = startIndex; i <= endIndex; i++) {\n        auxillaryArray[i] = sortArray[i - startIndex];\n    }\n}\n\nfunction arraysAreEqual(firstArray, secondArray) {\n    if (firstArray.length !== secondArray.length) {\n        return false;\n    }\n    for (let i = 0; i < firstArray.length; i++) {\n      if (firstArray[i] !== secondArray[i]) {\n        return false;\n      }\n    }\n    return true;\n}","export function getQuickSortAnimations(array) {\n    let animations  = [];\n    let auxillaryArray = array.slice();\n    quickSort(auxillaryArray, 0, auxillaryArray.length - 1, animations);\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n    console.log(\"sort works correctly? \",arraysAreEqual(javaScriptSortedArray, auxillaryArray));\n    array = auxillaryArray;\n    return [animations, array];\n}\n\ngetQuickSortAnimations([7,2,1,6]);\n\nfunction quickSort(auxillaryArray, startIndex, endIndex, animations) {\n    let pivotIndex;\n    if (startIndex < endIndex) {\n        pivotIndex = partitionArray(auxillaryArray, startIndex, endIndex, animations);\n        quickSort(auxillaryArray, startIndex, pivotIndex - 1, animations);\n        quickSort(auxillaryArray, pivotIndex + 1, endIndex, animations);\n    }\n}\n\nfunction partitionArray(auxillaryArray, startIndex, endIndex, animations) {\n    let pivot = auxillaryArray[endIndex];\n    let pivotIndex = startIndex;\n    for (let i = startIndex; i <= endIndex - 1; i++) {\n        animations.push([i, endIndex]);\n        animations.push([i, endIndex]);\n        if (auxillaryArray[i] <= pivot) {\n            //Swap these two heights\n            animations.push([i, auxillaryArray[pivotIndex]]);\n            animations.push([pivotIndex, auxillaryArray[i]]);\n            swap(auxillaryArray, i , pivotIndex);\n            pivotIndex++;\n        }\n        else {\n            animations.push([-1, -1]);\n            animations.push([-1, -1]);\n        }\n        animations.push([-1, -1]);\n        animations.push([-1, -1]);\n    }\n    animations.push([-1, -1]);\n    animations.push([-1, -1]);\n    animations.push([-1, -1]);\n    animations.push([-1, -1]);\n    //Swap these two heights\n    animations.push([pivotIndex, auxillaryArray[endIndex]]);\n    animations.push([endIndex, auxillaryArray[pivotIndex]]);\n    swap(auxillaryArray, pivotIndex, endIndex);\n    return pivotIndex;\n}\n\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\n    let temp = auxillaryArray[firstIndex];\n    auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\n    auxillaryArray[secondIndex] = temp;\n}\n\nfunction arraysAreEqual(firstArray, secondArray) {\n    if (firstArray.length !== secondArray.length) {\n        return false;\n    }\n    for (let i = 0; i < firstArray.length; i++) {\n      if (firstArray[i] !== secondArray[i]) {\n        return false;\n      }\n    }\n    return true;\n}","export function getSelectionSortAnimations(array) {\n    let animations  = [];\n    let auxillaryArray = array.slice();\n    selectionSort(auxillaryArray, animations);\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n    console.log(\"sort works correctly? \",arraysAreEqual(javaScriptSortedArray, auxillaryArray));\n    array = auxillaryArray;\n    return [animations, array];\n}\n\nfunction selectionSort(auxillaryArray, animations) {\n    const N = auxillaryArray.length;\n    for (let i = 0; i < N - 1; i++) {\n        let minIndex = i; //Finding minimum element in unsorted array\n        for (let j = i + 1; j < N; j++) {\n            animations.push([\"comparision1\", j, minIndex]);\n            animations.push([\"comparision2\", j, minIndex]);\n            if (auxillaryArray[j] < auxillaryArray[minIndex]) {\n                minIndex = j;\n            }\n        }\n        animations.push([\"swap\", minIndex, auxillaryArray[i]]);\n        animations.push([\"swap\", i, auxillaryArray[minIndex]]);\n        // Swap the found minimum element with the first element\n        swap(auxillaryArray, minIndex, i);\n    }\n}\n\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\n    let temp = auxillaryArray[firstIndex];\n    auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\n    auxillaryArray[secondIndex] = temp;\n}\n\nfunction arraysAreEqual(firstArray, secondArray) {\n    if (firstArray.length !== secondArray.length) {\n        return false;\n    }\n    for (let i = 0; i < firstArray.length; i++) {\n      if (firstArray[i] !== secondArray[i]) {\n        return false;\n      }\n    }\n    return true;\n}","export function getBubbleSortAnimations(array) {\n    let animations  = [];\n    let auxillaryArray = array.slice();\n    bubbleSort(auxillaryArray, animations);\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n    console.log(\"sort works correctly? \",arraysAreEqual(javaScriptSortedArray, auxillaryArray));\n    array = auxillaryArray;\n    return [animations, array];\n}\n\nfunction bubbleSort(auxillaryArray, animations) {\n    const N = auxillaryArray.length;\n    for (let i = 0; i < N - 1; i++) {\n        for (let j = 0; j < N - i -1; j++) {\n            animations.push([j, j + 1]);\n            animations.push([j, j + 1]);\n            if (auxillaryArray[j] > auxillaryArray[j + 1]) {\n                animations.push([j, auxillaryArray[j + 1]]);\n                animations.push([j + 1, auxillaryArray[j]]);\n                swap(auxillaryArray, j, j + 1);\n            }\n            else {\n                animations.push([-1, -1]);\n                animations.push([-1, -1]);\n            }\n        }\n    }\n}\n\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\n    let temp = auxillaryArray[firstIndex];\n    auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\n    auxillaryArray[secondIndex] = temp;\n}\n\nfunction arraysAreEqual(firstArray, secondArray) {\n    if (firstArray.length !== secondArray.length) {\n        return false;\n    }\n    for (let i = 0; i < firstArray.length; i++) {\n      if (firstArray[i] !== secondArray[i]) {\n        return false;\n      }\n    }\n    return true;\n}","import React from 'react';\nimport './SortingVisualizer.css';\nimport {getMergeSortAnimations} from '../SortingAlgorithms/MergeSort';\nimport {getHeapSortAnimations} from '../SortingAlgorithms/HeapSort';\nimport {getQuickSortAnimations} from '../SortingAlgorithms/QuickSort';\nimport {getInsertionSortAnimations} from '../SortingAlgorithms/InsertionSort';\nimport {getSelectionSortAnimations} from '../SortingAlgorithms/SelectionSort';\nimport {getBubbleSortAnimations} from '../SortingAlgorithms/BubbleSort';\n//Changing width,height accordingly with the browser\nlet WINDOW_WIDTH = window.innerWidth;\nlet WINDOW_HEIGHT = window.innerHeight;\nlet NUMBER_OF_ARRAY_BARS = parseInt((WINDOW_WIDTH - 200)/8);\n\n\n\n// TODO: \n// HeapSort.js\n// InPlaceQuickSort.js\n// ModifiedQuickSort.js\n// Update SortVisualizer.jsx\n// Update the CSS\n\n\nfunction reportWindowSize() {\n    WINDOW_WIDTH =  window.innerWidth;\n    WINDOW_HEIGHT = window.innerHeight;\n    NUMBER_OF_ARRAY_BARS = parseInt((WINDOW_WIDTH - 200)/8);\n}\nwindow.onresize = reportWindowSize; //TBD -> find a way to update state also when resized\n\n\nconst PRIMARY_COLOR = 'turquoise'; //Normal color of bars\nconst SECONDARY_COLOR = 'red'; //Color of bars when they are being compared\nconst ANIMATION_SPEED_MS = 1; //Animation Speed (how fast color changes, how fast height gets overwritten)\n\n//Tooltips for buttons\nconst DISABLED_BUTTON = \"Currently Disabled\"\nconst ENABLED_BUTTON = {\n    nlogn: \"O(NlogN) Time Complexity\",\n    nSquare: \"O(N^2) Time Complexity\"\n}\n\nclass SortingVisualizer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            array: []\n        };\n    }\n\n    componentDidMount() {\n        this.resetArray();\n    }\n\n\n    //Generates new random array \n    resetArray() {\n        const array = []\n        for (let i = 0;i < NUMBER_OF_ARRAY_BARS;i++) {\n            array.push(randomIntFromInterval(25,WINDOW_HEIGHT-30));\n        }\n        this.setState({array: array});\n        this.restoreStoreButtons();\n    }\n\n\n    disableSortButtons() {\n        document.getElementById(\"mergeSort\").disabled = true;\n        let buttonStyle = document.getElementById(\"mergeSort\").style;\n        document.getElementById(\"mergeSort\").title = DISABLED_BUTTON;\n        buttonStyle.cursor = \"default\";\n        buttonStyle.background = \"#000000\";\n\n        document.getElementById(\"quickSort\").disabled = true;\n        buttonStyle = document.getElementById(\"quickSort\").style;\n        document.getElementById(\"quickSort\").title = DISABLED_BUTTON;\n        buttonStyle.cursor = \"default\";\n        buttonStyle.background = \"#000000\";\n\n        document.getElementById(\"insertionSort\").disabled = true;\n        buttonStyle = document.getElementById(\"insertionSort\").style;\n        document.getElementById(\"insertionSort\").title = DISABLED_BUTTON;\n        buttonStyle.cursor = \"default\";\n        buttonStyle.background = \"#000000\";\n\n        document.getElementById(\"heapSort\").disabled = true;\n        buttonStyle = document.getElementById(\"heapSort\").style;\n        document.getElementById(\"heapSort\").title = DISABLED_BUTTON;\n        buttonStyle.cursor = \"default\";\n        buttonStyle.background = \"#000000\";\n\n        document.getElementById(\"selectionSort\").disabled = true;\n        buttonStyle = document.getElementById(\"selectionSort\").style;\n        document.getElementById(\"selectionSort\").title = DISABLED_BUTTON;\n        buttonStyle.cursor = \"default\";\n        buttonStyle.background = \"#000000\";\n\n        document.getElementById(\"bubbleSort\").disabled = true;\n        buttonStyle = document.getElementById(\"bubbleSort\").style;\n        document.getElementById(\"bubbleSort\").title = DISABLED_BUTTON;\n        buttonStyle.cursor = \"default\";\n        buttonStyle.background = \"#000000\";\n    }\n\n\n    restoreStoreButtons() {\n        document.getElementById(\"mergeSort\").disabled = false;\n        let buttonStyle = document.getElementById(\"mergeSort\").style;\n        document.getElementById(\"mergeSort\").title = ENABLED_BUTTON.nlogn;\n        buttonStyle.background = \"#47535E\";\n        buttonStyle.cursor = \"pointer\";\n\n        document.getElementById(\"quickSort\").disabled = false;\n        buttonStyle = document.getElementById(\"quickSort\").style;\n        document.getElementById(\"quickSort\").title = ENABLED_BUTTON.nSquare;\n        buttonStyle.background = \"#47535E\";\n        buttonStyle.cursor = \"pointer\";\n\n        document.getElementById(\"bubbleSort\").disabled = false;\n        buttonStyle = document.getElementById(\"bubbleSort\").style;\n        document.getElementById(\"bubbleSort\").title = ENABLED_BUTTON.nSquare;\n        buttonStyle.background = \"#47535E\";\n        buttonStyle.cursor = \"pointer\";\n\n        document.getElementById(\"selectionSort\").disabled = false;\n        buttonStyle = document.getElementById(\"selectionSort\").style;\n        document.getElementById(\"selectionSort\").title = ENABLED_BUTTON.nSquare;\n        buttonStyle.background = \"#47535E\";\n        buttonStyle.cursor = \"pointer\";\n\n        document.getElementById(\"insertionSort\").disabled = false;\n        buttonStyle = document.getElementById(\"insertionSort\").style;\n        document.getElementById(\"insertionSort\").title = ENABLED_BUTTON.nSquare;\n        buttonStyle.background = \"#47535E\";\n        buttonStyle.cursor = \"pointer\";\n\n        document.getElementById(\"heapSort\").disabled = false;\n        buttonStyle = document.getElementById(\"heapSort\").style;\n        document.getElementById(\"heapSort\").title = ENABLED_BUTTON.nlogn;\n        buttonStyle.background = \"#47535E\";\n        buttonStyle.cursor = \"pointer\";\n    }\n\n\n    //Sorting Algorithms\n    mergeSort() {\n        this.disableSortButtons();\n        const [animations,sortArray] = getMergeSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const isColorChange = (i % 3 !== 2);\n            const arrayBars = document.getElementsByClassName('array-bar');\n            if(isColorChange === true) {\n                const [barOneIndex, barTwoIndex] = animations[i];\n                const color = (i % 3 === 0) ? SECONDARY_COLOR : PRIMARY_COLOR;\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n                //If we don't multiply by the index then every animations[i] wait for exactly ANIMATION_SPEED_MS and immediately change into final state\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                },i * ANIMATION_SPEED_MS);\n                \n            }\n            else {\n                setTimeout(() => {\n                    const [barOneIdx, newHeight] = animations[i];\n                    const barOneStyle = arrayBars[barOneIdx].style;\n                    barOneStyle.height = `${newHeight}px`;\n                  },i * ANIMATION_SPEED_MS);\n            }\n        }\n        // this.setState({array: sortArray})\n        const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS*animations.length/2 + 3000);\n        setTimeout(() => this.restoreStoreButtons(), RESTORE_TIME); \n    }\n\n    quickSort() {\n        this.disableSortButtons();\n        const [animations,sortArray] = getQuickSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length - 1; i++) {\n            const isColorChange = (i % 6 === 0) || (i % 6 === 1);\n            const arrayBars = document.getElementsByClassName('array-bar');\n            if(isColorChange === true) {\n                const color = (i % 6 === 0) ? SECONDARY_COLOR : PRIMARY_COLOR;\n                const [barOneIndex, barTwoIndex] = animations[i];\n                if(barOneIndex === -1) {\n                    continue;\n                }\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                },i * ANIMATION_SPEED_MS);\n            }\n            else {\n                const [barIndex, newHeight] = animations[i];\n                if (barIndex === -1) {\n                    continue;\n                }\n                const barStyle = arrayBars[barIndex].style;\n                setTimeout(() => {\n                    barStyle.height = `${newHeight}px`;\n                },i * ANIMATION_SPEED_MS);  \n            }\n        }\n        // this.setState({array: sortArray})\n        const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS*animations.length/2 + 3000);\n        setTimeout(() => this.restoreStoreButtons(), RESTORE_TIME);  \n    }\n\n\n    bubbleSort() {\n        this.disableSortButtons();\n        const [animations,sortArray] = getBubbleSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const isColorChange = (i % 4 === 0) || (i % 4 === 1);\n            const arrayBars = document.getElementsByClassName('array-bar');\n            if(isColorChange === true) {\n                const color = (i % 4 === 0) ? SECONDARY_COLOR : PRIMARY_COLOR;\n                const [barOneIndex, barTwoIndex] = animations[i];\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                },i * ANIMATION_SPEED_MS);\n            }\n            else {\n                const [barIndex, newHeight] = animations[i];\n                if (barIndex === -1) {\n                    continue;\n                }\n                const barStyle = arrayBars[barIndex].style;\n                setTimeout(() => {\n                    barStyle.height = `${newHeight}px`;\n                },i * ANIMATION_SPEED_MS);  \n            }\n        }\n        // this.setState({array: sortArray})\n        const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS*animations.length/2 + 3000);\n        setTimeout(() => this.restoreStoreButtons(), RESTORE_TIME);  \n    }\n\n\n    insertionSort() {\n        this.disableSortButtons();\n        const [animations,sortArray] = getInsertionSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const isColorChange = (animations[i][0] === \"comparision1\") || (animations[i][0] === \"comparision2\");\n            const arrayBars = document.getElementsByClassName('array-bar');\n            if(isColorChange === true) {\n                const color = (animations[i][0] === \"comparision1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\n                const [temp, barOneIndex, barTwoIndex] = animations[i];\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                },i * ANIMATION_SPEED_MS);\n            }\n            else {\n                const [temp, barIndex, newHeight] = animations[i];\n                const barStyle = arrayBars[barIndex].style;\n                setTimeout(() => {\n                    barStyle.height = `${newHeight}px`;\n                },i * ANIMATION_SPEED_MS);  \n            }\n        }\n        // this.setState({array: sortArray})\n        const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS*animations.length/2 + 3000);\n        setTimeout(() => this.restoreStoreButtons(), RESTORE_TIME); \n    }\n\n\n    selectionSort() {\n        this.disableSortButtons();\n        const [animations,sortArray] = getSelectionSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const isColorChange = (animations[i][0] === \"comparision1\") || (animations[i][0] === \"comparision2\");\n            const arrayBars = document.getElementsByClassName('array-bar');\n            if(isColorChange === true) {\n                const color = (animations[i][0] === \"comparision1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\n                const [temp, barOneIndex, barTwoIndex] = animations[i];\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                },i * ANIMATION_SPEED_MS);\n            }\n            else {\n                const [temp, barIndex, newHeight] = animations[i];\n                const barStyle = arrayBars[barIndex].style;\n                setTimeout(() => {\n                    barStyle.height = `${newHeight}px`;\n                },i * ANIMATION_SPEED_MS);  \n            }\n        }\n        // this.setState({array: sortArray})\n        const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS*animations.length/2 + 3000);\n        setTimeout(() => this.restoreStoreButtons(), RESTORE_TIME); \n    }\n\n\n    render() {\n        const array = this.state.array;\n        const SORT_BUTTONS = 6;\n        const TOTAL_BUTTONS = 1 + SORT_BUTTONS;\n        return(\n            <>\n            <div className=\"array-container\" style={{position:'absolute', right:`20px`}}>\n                {array.map((value, idx) => (\n                    <div\n                        className=\"array-bar\"\n                        key={idx}\n                        style={{\n                        backgroundColor: PRIMARY_COLOR,\n                        height: `${value}px`\n                        }}\n                    ></div>\n                ))}\n            </div>\n            <div className=\"buttons\" > \n                <button title=\"Generates a new random array\" style={{position:'relative',top:`${0*(WINDOW_HEIGHT-20)/TOTAL_BUTTONS}px`}} onClick={() => this.resetArray()}>\n                    Generate New Array\n                </button>\n                <button title=\"O(NlogN) Time Complexity\" id = \"mergeSort\" style={{position:'relative',top:`${0.5*(WINDOW_HEIGHT-20)/TOTAL_BUTTONS}px`}} onClick={() => this.mergeSort()}>\n                    Merge Sort\n                </button>\n                <button title=\"O(N^2) Time Complexity\" id = \"quickSort\" style={{position:'relative',top:`${1.5*(WINDOW_HEIGHT-20)/TOTAL_BUTTONS}px`}} onClick={() => this.quickSort()}>\n                    Quick Sort\n                </button>\n                <button title=\"O(N^2) Time Complexity\" id = \"bubbleSort\" style={{position:'relative',top:`${2.5*(WINDOW_HEIGHT-20)/TOTAL_BUTTONS}px`}} onClick={() => this.bubbleSort()}>\n                    Bubble Sort\n                </button>\n                <button title=\"O(N^2) Time Complexity\" id = \"insertionSort\" style={{position:'relative',top:`${3.5*(WINDOW_HEIGHT-20)/TOTAL_BUTTONS}px`}} onClick={() => this.insertionSort()}>\n                    Insertion Sort\n                </button>\n                <button title=\"O(NlogN) Time Complexity\" id = \"heapSort\" style={{position:'relative',top:`${4.5*(WINDOW_HEIGHT-20)/TOTAL_BUTTONS}px`}} onClick={() => this.heapSort()}>\n                    Heap Sort\n                </button>\n                <button title=\"O(N^2) Time Complexity\" id = \"selectionSort\" style={{position:'relative',top:`${5.5*(WINDOW_HEIGHT-20)/TOTAL_BUTTONS}px`}} onClick={() => this.selectionSort()}>\n                    Selection Sort\n                </button>\n            </div>    \n            </>\n        );\n    }\n}\n\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\nfunction randomIntFromInterval(min, max) {\n    // min and max included\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nexport default SortingVisualizer;","export function getInsertionSortAnimations(array) {\n    let animations  = [];\n    let auxillaryArray = array.slice();\n    insertionSort(auxillaryArray, animations);\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n    console.log(\"sort works correctly? \",arraysAreEqual(javaScriptSortedArray, auxillaryArray));\n    array = auxillaryArray;\n    return [animations, array];\n}\n\nfunction insertionSort(auxillaryArray, animations) {\n    const N = auxillaryArray.length;\n    for (let i = 1; i < N; i++) {\n        let key = auxillaryArray[i];\n        let j = i - 1;\n        animations.push([\"comparision1\", j, i]);\n        animations.push([\"comparision2\", j, i]);\n        while(j >= 0 && auxillaryArray[j] > key) {\n            animations.push([\"overwrite\", j + 1, auxillaryArray[j]]);\n            auxillaryArray[j + 1] = auxillaryArray[j];\n            j = j - 1;\n            if(j >= 0) {\n                animations.push([\"comparision1\", j, i]);\n                animations.push([\"comparision2\", j, i]);\n            }     \n        }\n        animations.push([\"overwrite\", j + 1, key]);\n        auxillaryArray[j + 1] = key;\n    }\n}\n\nfunction arraysAreEqual(firstArray, secondArray) {\n    if (firstArray.length !== secondArray.length) {\n        return false;\n    }\n    for (let i = 0; i < firstArray.length; i++) {\n      if (firstArray[i] !== secondArray[i]) {\n        return false;\n      }\n    }\n    return true;\n}","import React from 'react';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}