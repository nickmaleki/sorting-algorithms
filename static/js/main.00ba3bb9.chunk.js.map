{"version":3,"sources":["SortingAlgorithms/HeapSort.js","SortingAlgorithms/BubbleSort.js","SortingAlgorithms/InsertionSort.js","SortingAlgorithms/MergeSort.js","SortingAlgorithms/QuickSort.js","SortingAlgorithms/SelectionSort.js","Components/Chart.js","SortingVisualizer/SortingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["array_length","getBubbleSortAnimations","array","animations","auxillaryArray","slice","N","length","i","j","push","swap","animatedBubbleSort","javaScriptSortedArray","sort","a","b","console","log","firstArray","secondArray","arraysAreEqual","firstIndex","secondIndex","temp","bubbleSort","arr","list","getHeapSortAnimations","animation","Math","floor","heap_root","animatedHeapSort","input","left","right","max","index_A","index_B","heapSort","insertionSort","forEach","item","num","getMergeSortAnimations","animatedMergeSort","startIndex","endIndex","middleIndex","sortArray","merge","mergeSort","mid","arr1","arr2","sorted","shift","concat","mergeArrays","getQuickSortAnimations","animatedQuickSort","pivotIndex","pivot","partitionArray","start","pointer","quickSort","end","getSelectionSortAnimations","minIndex","animatedSelectionSort","selectionSort","min","Chart","props","state","chartData","className","data","this","options","title","display","displayTitle","text","fontSize","legend","displayLegend","position","legendPosition","scales","yAxes","scaleLabel","labelString","xAxes","Component","defaultProps","WINDOW_WIDTH","window","innerWidth","WINDOW_HEIGHT","innerHeight","NUMBER_OF_ARRAY_BARS","parseInt","bubbleSortData","heapSortData","insertionSortData","mergeSortData","modifiedQuickSortData","quickSortData","selectionSortData","onresize","DISABLED_BUTTON","ENABLED_BUTTON","SortingVisualizer","chartDataRandom","chartDataSorted","chartDataReversed","showGraphs","resetArray","random","setState","restoreButtons","reverse","document","getElementById","disabled","buttonStyle","style","cursor","background","disableButtons","isColorChange","arrayBars","getElementsByClassName","color","barOneIndex","barTwoIndex","barOneStyle","barTwoStyle","setTimeout","backgroundColor","barIndex","newHeight","barStyle","height","RESTORE_TIME","key","animatedInsertionSort","getInsertionSortAnimations","barOneIdx","resetData","t0","arraySizes","t1","index","performance","now","getChartRandomData","labels","datasets","label","getChartSortedData","getChartReverseData","getAllData","map","value","idx","id","top","onClick","reverseArray","modQuickSort","comparisonPlot","React","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.00ba3bb9.chunk.js","sourcesContent":["// vector based and insert one item at a time\r\nexport function getHeapSortAnimations(array) {\r\n    let animations = [];\r\n    let auxillaryArray = array.slice();\r\n    animatedHeapSort(auxillaryArray, animations);\r\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n    console.log(\"Heap sort works correctly? \", arraysAreEqual(javaScriptSortedArray, auxillaryArray));\r\n    array = auxillaryArray;\r\n    return [animations, array];\r\n}\r\n\r\nvar array_length;\r\n\r\nfunction animatedHeapSort(auxillaryArray, animation) {\r\n    array_length = auxillaryArray.length;\r\n\r\n    for (var i = Math.floor(array_length / 2); i >= 0; i -= 1) {\r\n        heap_root(auxillaryArray, i);\r\n    }\r\n\r\n    for (i = auxillaryArray.length - 1; i > 0; i--) {\r\n        swap(auxillaryArray, 0, i);\r\n        array_length--;\r\n        heap_root(auxillaryArray, 0);\r\n    }\r\n}\r\n\r\nfunction heap_root(input, i) {\r\n    var left = 2 * i + 1;\r\n    var right = 2 * i + 2;\r\n    var max = i;\r\n\r\n    if (left < array_length && input[left] > input[max]) {\r\n        max = left;\r\n    }\r\n\r\n    if (right < array_length && input[right] > input[max]) {\r\n        max = right;\r\n    }\r\n\r\n    if (max != i) {\r\n        swap(input, i, max);\r\n        heap_root(input, max);\r\n    }\r\n}\r\n\r\nfunction swap(input, index_A, index_B) {\r\n    var temp = input[index_A];\r\n\r\n    input[index_A] = input[index_B];\r\n    input[index_B] = temp;\r\n}\r\n\r\nfunction arraysAreEqual(firstArray, secondArray) {\r\n    if (firstArray.length !== secondArray.length) {\r\n        return false;\r\n    }\r\n    for (let i = 0; i < firstArray.length; i++) {\r\n        if (firstArray[i] !== secondArray[i]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\nexport function heapSort(auxillaryArray){\r\n    array_length = auxillaryArray.length;\r\n\r\n    for (var i = Math.floor(array_length / 2); i >= 0; i -= 1) {\r\n        heap_root(auxillaryArray, i);\r\n    }\r\n\r\n    for (i = auxillaryArray.length - 1; i > 0; i--) {\r\n        swap(auxillaryArray, 0, i);\r\n        array_length--;\r\n        heap_root(auxillaryArray, 0);\r\n    }\r\n}","export function getBubbleSortAnimations(array) {\n    let animations = [];\n    let auxillaryArray = array.slice();\n    animatedBubbleSort(auxillaryArray, animations);\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n    console.log(\"Bubble sort works correctly? \", arraysAreEqual(javaScriptSortedArray, auxillaryArray));\n    array = auxillaryArray;\n    return [animations, array];\n}\n\nfunction animatedBubbleSort(auxillaryArray, animations) {\n    const N = auxillaryArray.length;\n    for (let i = 0; i < N - 1; i++) {\n        for (let j = 0; j < N - i - 1; j++) {\n            animations.push([j, j + 1]);\n            animations.push([j, j + 1]);\n            if (auxillaryArray[j] > auxillaryArray[j + 1]) {\n                animations.push([j, auxillaryArray[j + 1]]);\n                animations.push([j + 1, auxillaryArray[j]]);\n                swap(auxillaryArray, j, j + 1);\n            }\n            else {\n                animations.push([-1, -1]);\n                animations.push([-1, -1]);\n            }\n        }\n    }\n}\n\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\n    let temp = auxillaryArray[firstIndex];\n    auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\n    auxillaryArray[secondIndex] = temp;\n}\n\nfunction arraysAreEqual(firstArray, secondArray) {\n    if (firstArray.length !== secondArray.length) {\n        return false;\n    }\n    for (let i = 0; i < firstArray.length; i++) {\n        if (firstArray[i] !== secondArray[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nexport function bubbleSort(arr) {\n    const swap = (list, a, b) => [list[a], list[b]] = [list[b], list[a]];\n\n    for (let i = arr.length; i > 0; i--) {\n        for (let j = 0; j < i - 1; j++) {\n            if (arr[j] > arr[j + 1]) swap(arr, j, j + 1);\n        };\n    };\n\n    return arr;\n}","export function getInsertionSortAnimations(array) {\n    let animations = [];\n    let auxillaryArray = array.slice();\n    animatedInsertionSort(auxillaryArray, animations);\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n    console.log(\"Insertion sort works correctly? \", arraysAreEqual(javaScriptSortedArray, auxillaryArray));\n    array = auxillaryArray;\n    return [animations, array];\n}\n\nfunction animatedInsertionSort(auxillaryArray, animations) {\n    const N = auxillaryArray.length;\n    for (let i = 1; i < N; i++) {\n        let key = auxillaryArray[i];\n        let j = i - 1;\n        animations.push([\"comparision1\", j, i]);\n        animations.push([\"comparision2\", j, i]);\n        while (j >= 0 && auxillaryArray[j] > key) {\n            animations.push([\"overwrite\", j + 1, auxillaryArray[j]]);\n            auxillaryArray[j + 1] = auxillaryArray[j];\n            j = j - 1;\n            if (j >= 0) {\n                animations.push([\"comparision1\", j, i]);\n                animations.push([\"comparision2\", j, i]);\n            }\n        }\n        animations.push([\"overwrite\", j + 1, key]);\n        auxillaryArray[j + 1] = key;\n    }\n}\n\nfunction arraysAreEqual(firstArray, secondArray) {\n    if (firstArray.length !== secondArray.length) {\n        return false;\n    }\n    for (let i = 0; i < firstArray.length; i++) {\n        if (firstArray[i] !== secondArray[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n\nexport function insertionSort(arr) {\n    arr.forEach((item, i) => {\n        let num = arr[i];\n        let j;\n\n        for (j = i - 1; j >= 0 && arr[j] > num; j--) {\n            arr[j + 1] = arr[j];\n        };\n        arr[j + 1] = num;\n    });\n\n    return arr;\n}","export function getMergeSortAnimations(array) {\n    let animations = [];\n    let auxillaryArray = array.slice();\n    animatedMergeSort(auxillaryArray, 0, auxillaryArray.length - 1, animations);\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n    console.log(\"Merge sort works correctly? \", arraysAreEqual(javaScriptSortedArray, auxillaryArray));\n    array = auxillaryArray;\n    return [animations, array];\n}\n\nfunction animatedMergeSort(auxillaryArray, startIndex, endIndex, animations) {\n    if (startIndex === endIndex)\n        return;\n    const middleIndex = Math.floor((startIndex + endIndex) / 2);\n    animatedMergeSort(auxillaryArray, startIndex, middleIndex, animations);\n    animatedMergeSort(auxillaryArray, middleIndex + 1, endIndex, animations);\n    merge(auxillaryArray, startIndex, middleIndex, endIndex, animations);\n}\n\nfunction merge(auxillaryArray, startIndex, middleIndex, endIndex, animations) {\n    let sortArray = [];\n    let i = startIndex;\n    let j = middleIndex + 1;\n    while (i <= middleIndex && j <= endIndex) {\n        //Comparing value at ith and jth index so push them to change their color\n        animations.push([i, j]);\n        //By changing color we imply that we are comparing those two values and then again we should revert back to their original color so push them again\n        animations.push([i, j]);\n        if (auxillaryArray[i] <= auxillaryArray[j]) {\n            //We should overwrite the value at (i+startIndex)th index with ith index so push them to highlight swap their heights\n            animations.push([sortArray.length + startIndex, auxillaryArray[i]]);\n            sortArray.push(auxillaryArray[i++]);\n        }\n        else {\n            //We should overwrite the value at (i+startIndex)th index with jth index so push them to highlight swap their heights\n            animations.push([sortArray.length + startIndex, auxillaryArray[j]]);\n            sortArray.push(auxillaryArray[j++]);\n        }\n    }\n    while (i <= middleIndex) {\n        animations.push([i, i]);\n        animations.push([i, i]);\n        animations.push([sortArray.length + startIndex, auxillaryArray[i]]);\n        sortArray.push(auxillaryArray[i++]);\n    }\n    while (j <= endIndex) {\n        animations.push([j, j]);\n        animations.push([j, j]);\n        animations.push([sortArray.length + startIndex, auxillaryArray[j]]);\n        sortArray.push(auxillaryArray[j++]);\n    }\n    for (let i = startIndex; i <= endIndex; i++) {\n        auxillaryArray[i] = sortArray[i - startIndex];\n    }\n}\n\nfunction arraysAreEqual(firstArray, secondArray) {\n    if (firstArray.length !== secondArray.length) {\n        return false;\n    }\n    for (let i = 0; i < firstArray.length; i++) {\n        if (firstArray[i] !== secondArray[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nconst mergeArrays = (arr1, arr2) => {\n    let sorted = [];\n\n    while (arr1.length && arr2.length) {\n        if (arr1[0] < arr2[0]) sorted.push(arr1.shift());\n        else sorted.push(arr2.shift());\n    };\n\n    return sorted.concat(arr1.slice().concat(arr2.slice()));\n};\n\nexport function mergeSort(arr) {\n    if (arr.length <= 1) return arr;\n    let mid = Math.floor(arr.length / 2),\n        left = mergeSort(arr.slice(0, mid)),\n        right = mergeSort(arr.slice(mid));\n\n    return mergeArrays(left, right);\n};","// any random item or the first or the last item of your input can be pivot\nexport function getQuickSortAnimations(array) {\n    let animations = [];\n    let auxillaryArray = array.slice();\n    animatedQuickSort(auxillaryArray, 0, auxillaryArray.length - 1, animations);\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n    console.log(\"Quick sort works correctly? \", arraysAreEqual(javaScriptSortedArray, auxillaryArray));\n    array = auxillaryArray;\n    return [animations, array];\n}\n\nfunction animatedQuickSort(auxillaryArray, startIndex, endIndex, animations) {\n    let pivotIndex;\n    if (startIndex < endIndex) {\n        pivotIndex = partitionArray(auxillaryArray, startIndex, endIndex, animations);\n        animatedQuickSort(auxillaryArray, startIndex, pivotIndex - 1, animations);\n        animatedQuickSort(auxillaryArray, pivotIndex + 1, endIndex, animations);\n    }\n}\n\nfunction partitionArray(auxillaryArray, startIndex, endIndex, animations) {\n    let pivot = auxillaryArray[endIndex];\n    let pivotIndex = startIndex;\n    for (let i = startIndex; i <= endIndex - 1; i++) {\n        animations.push([i, endIndex]);\n        animations.push([i, endIndex]);\n        if (auxillaryArray[i] <= pivot) {\n            //Swap these two heights\n            animations.push([i, auxillaryArray[pivotIndex]]);\n            animations.push([pivotIndex, auxillaryArray[i]]);\n            swap(auxillaryArray, i, pivotIndex);\n            pivotIndex++;\n        }\n        else {\n            animations.push([-1, -1]);\n            animations.push([-1, -1]);\n        }\n        animations.push([-1, -1]);\n        animations.push([-1, -1]);\n    }\n    animations.push([-1, -1]);\n    animations.push([-1, -1]);\n    animations.push([-1, -1]);\n    animations.push([-1, -1]);\n    //Swap these two heights\n    animations.push([pivotIndex, auxillaryArray[endIndex]]);\n    animations.push([endIndex, auxillaryArray[pivotIndex]]);\n    swap(auxillaryArray, pivotIndex, endIndex);\n    return pivotIndex;\n}\n\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\n    let temp = auxillaryArray[firstIndex];\n    auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\n    auxillaryArray[secondIndex] = temp;\n}\n\nfunction arraysAreEqual(firstArray, secondArray) {\n    if (firstArray.length !== secondArray.length) {\n        return false;\n    }\n    for (let i = 0; i < firstArray.length; i++) {\n        if (firstArray[i] !== secondArray[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n\nconst pivot = (arr, start = 0, end = arr.length + 1) => {\n    const swap = (list, a, b) => [list[a], list[b]] = [list[b], list[a]];\n\n    let pivot = arr[start],\n        pointer = start;\n\n    for (let i = start; i < arr.length; i++) {\n        if (arr[i] < pivot) {\n            pointer++;\n            swap(arr, pointer, i);\n        }\n    };\n    swap(arr, start, pointer);\n\n    return pointer;\n}\n\n\nexport function quickSort(arr, start = 0, end = arr.length) {\n    let pivotIndex = pivot(arr, start, end);\n\n    if (start >= end) return arr;\n    quickSort(arr, start, pivotIndex);\n    quickSort(arr, pivotIndex + 1, end);\n\n    return arr;\n};\n","export function getSelectionSortAnimations(array) {\n    let animations = [];\n    let auxillaryArray = array.slice();\n    animatedSelectionSort(auxillaryArray, animations);\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n    console.log(\"Selection sort works correctly? \", arraysAreEqual(javaScriptSortedArray, auxillaryArray));\n    array = auxillaryArray;\n    return [animations, array];\n}\n\nfunction animatedSelectionSort(auxillaryArray, animations) {\n    const N = auxillaryArray.length;\n    for (let i = 0; i < N - 1; i++) {\n        let minIndex = i; //Finding minimum element in unsorted array\n        for (let j = i + 1; j < N; j++) {\n            animations.push([\"comparision1\", j, minIndex]);\n            animations.push([\"comparision2\", j, minIndex]);\n            if (auxillaryArray[j] < auxillaryArray[minIndex]) {\n                minIndex = j;\n            }\n        }\n        animations.push([\"swap\", minIndex, auxillaryArray[i]]);\n        animations.push([\"swap\", i, auxillaryArray[minIndex]]);\n        // Swap the found minimum element with the first element\n        swap(auxillaryArray, minIndex, i);\n    }\n}\n\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\n    let temp = auxillaryArray[firstIndex];\n    auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\n    auxillaryArray[secondIndex] = temp;\n}\n\nfunction arraysAreEqual(firstArray, secondArray) {\n    if (firstArray.length !== secondArray.length) {\n        return false;\n    }\n    for (let i = 0; i < firstArray.length; i++) {\n        if (firstArray[i] !== secondArray[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n\nexport function selectionSort(arr) {\n    const swap = (list, a, b) => [list[a], list[b]] = [list[b], list[a]];\n\n    arr.forEach((item, i) => {\n        let min = i;\n        for (let j = i + 1; j < arr.length; j++) {\n            if (arr[j] < arr[min]) min = j;\n        };\n        swap(arr, i, min);\n    });\n\n    return arr;\n}","import React, { Component } from 'react';\r\nimport { Bar, Line, Pie } from 'react-chartjs-2';\r\n\r\nclass Chart extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            chartData: props.chartData\r\n        }\r\n    }\r\n\r\n    static defaultProps = {\r\n        displayTitle: true,\r\n        displayLegend: true,\r\n        legendPosition: 'right',\r\n        title: 'algorithm'\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"chart\">\r\n                <Line\r\n                    data={this.state.chartData}\r\n                    options={{\r\n                        title: {\r\n                            display: this.props.displayTitle,\r\n                            text: this.props.title,\r\n                            fontSize: 25\r\n                        },\r\n                        legend: {\r\n                            display: this.props.displayLegend,\r\n                            position: this.props.legendPosition\r\n                        },\r\n                        scales: {\r\n                            yAxes: [{\r\n                                scaleLabel: {\r\n                                    display: true,\r\n                                    labelString: 'Time to Execute (ms)'\r\n                                }\r\n                            }],\r\n                            xAxes: [{\r\n                                scaleLabel: {\r\n                                    display: true,\r\n                                    labelString: 'Input Size'\r\n                                }\r\n                            }]\r\n                        },\r\n                        // backgroundColor: [\r\n                        //     'rgba(255, 99, 132, 0.6)',\r\n                        //     'rgba(54, 162, 235, 0.6)',\r\n                        //     'rgba(255, 206, 86, 0.6)',\r\n                        //     'rgba(75, 192, 192, 0.6)',\r\n                        //     'rgba(153, 102, 255, 0.6)',\r\n                        //     'rgba(255, 159, 64, 0.6)',\r\n                        //     'rgba(255, 99, 132, 0.6)'\r\n                        // ]\r\n                        //   \"Heap Sort\"\r\n                        //   \"Insertion Sort\"\r\n                        //   \"Merge Sort\"\r\n                        //   \"Modified Quick Sort\"\r\n                        //   \"Quick Sort\"\r\n                        //   \"Selection Sort\"\r\n                    }}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Chart;\r\n","import React from 'react';\nimport './SortingVisualizer.css';\nimport { getBubbleSortAnimations, bubbleSort } from '../SortingAlgorithms/BubbleSort';\nimport { getHeapSortAnimations, heapSort } from '../SortingAlgorithms/HeapSort';\nimport { getInsertionSortAnimations, insertionSort } from '../SortingAlgorithms/InsertionSort';\nimport { getMergeSortAnimations, mergeSort } from '../SortingAlgorithms/MergeSort';\nimport { getModifiedQuickSortAnimations, modifiedQuickSort } from '../SortingAlgorithms/ModifiedQuickSort';\nimport { getQuickSortAnimations, quickSort } from '../SortingAlgorithms/QuickSort';\nimport { getSelectionSortAnimations, selectionSort } from '../SortingAlgorithms/SelectionSort';\nimport Chart from '../Components/Chart';\n\n//Changing width,height accordingly with the browser\nlet WINDOW_WIDTH = window.innerWidth;\nlet WINDOW_HEIGHT = window.innerHeight;\nlet NUMBER_OF_ARRAY_BARS = parseInt((WINDOW_WIDTH - 200) / 8);\n\nlet bubbleSortData = [];\nlet heapSortData = [];\nlet insertionSortData = [];\nlet mergeSortData = [];\nlet modifiedQuickSortData = [];\nlet quickSortData = [];\nlet selectionSortData = [];\n\n\nfunction reportWindowSize() {\n    WINDOW_WIDTH = window.innerWidth;\n    WINDOW_HEIGHT = window.innerHeight;\n    NUMBER_OF_ARRAY_BARS = parseInt((WINDOW_WIDTH - 200) / 8);\n}\nwindow.onresize = reportWindowSize; //TBD -> find a way to update state also when resized\n\n\nconst PRIMARY_COLOR = 'dodgerblue'; //Normal color of bars\nconst SECONDARY_COLOR = 'orangered'; //Color of bars when they are being compared\nconst ANIMATION_SPEED_MS = 1; //Animation Speed (how fast color changes, how fast height gets overwritten)\n\n//Tooltips for buttons\nconst DISABLED_BUTTON = \"Currently Disabled\"\nconst ENABLED_BUTTON = {\n    nlogn: \"O(NlogN) Time Complexity\",\n    nSquare: \"O(N^2) Time Complexity\",\n    plotToolTip: \"Compare all algorithms for different input sizes\",\n    generateRandomArray: \"Generates a new random unsorted array\",\n    generateSortedArray: \"Generates a new sorted array\",\n    generateReversedArray: \"Generates a new reversed array\"\n}\n\nclass SortingVisualizer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            array: [],\n            chartDataRandom: {},\n            chartDataSorted: {},\n            chartDataReversed: {},\n            showGraphs: false\n        };\n    }\n\n    componentDidMount() {\n        this.resetArray();\n        //this.getChartData();\n    }\n\n    //Generates new random array \n    resetArray() {\n        const array = []\n        for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n            array.push(randomIntFromInterval(25, WINDOW_HEIGHT - 30));\n        }\n        this.setState({ array: array });\n        this.restoreButtons();\n    }\n\n    //Sorts a new array\n    sortArray() {\n        this.resetArray();\n        const sorted = this.state.array.slice().sort((a, b) => a - b); //Adjusted sort function because sort w/o args uses string comparison, not number\n        this.setState({ array: sorted });\n    }\n\n    //Sorts and reverses a new array\n    reverseArray() {\n        this.resetArray();\n        const reverse = this.state.array.slice().sort((a, b) => a - b).reverse(); //Adjusted sort function because sort w/o args uses string comparison, not number\n        this.setState({ array: reverse });\n    }\n\n    disableButtons() {\n        document.getElementById(\"arrayGen\").disabled = true;\n        let buttonStyle = document.getElementById(\"arrayGen\").style;\n        document.getElementById(\"arrayGen\").title = DISABLED_BUTTON;\n        buttonStyle.cursor = \"default\";\n        buttonStyle.background = \"#000000\";\n\n        document.getElementById(\"sortArray\").disabled = true;\n        buttonStyle = document.getElementById(\"sortArray\").style;\n        document.getElementById(\"sortArray\").title = DISABLED_BUTTON;\n        buttonStyle.cursor = \"default\";\n        buttonStyle.background = \"#000000\";\n\n        document.getElementById(\"reverseArray\").disabled = true;\n        buttonStyle = document.getElementById(\"reverseArray\").style;\n        document.getElementById(\"reverseArray\").title = DISABLED_BUTTON;\n        buttonStyle.cursor = \"default\";\n        buttonStyle.background = \"#000000\";\n\n        document.getElementById(\"mergeSort\").disabled = true;\n        buttonStyle = document.getElementById(\"mergeSort\").style;\n        document.getElementById(\"mergeSort\").title = DISABLED_BUTTON;\n        buttonStyle.cursor = \"default\";\n        buttonStyle.background = \"#000000\";\n\n        document.getElementById(\"quickSort\").disabled = true;\n        buttonStyle = document.getElementById(\"quickSort\").style;\n        document.getElementById(\"quickSort\").title = DISABLED_BUTTON;\n        buttonStyle.cursor = \"default\";\n        buttonStyle.background = \"#000000\";\n\n        document.getElementById(\"insertionSort\").disabled = true;\n        buttonStyle = document.getElementById(\"insertionSort\").style;\n        document.getElementById(\"insertionSort\").title = DISABLED_BUTTON;\n        buttonStyle.cursor = \"default\";\n        buttonStyle.background = \"#000000\";\n\n        document.getElementById(\"heapSort\").disabled = true;\n        buttonStyle = document.getElementById(\"heapSort\").style;\n        document.getElementById(\"heapSort\").title = DISABLED_BUTTON;\n        buttonStyle.cursor = \"default\";\n        buttonStyle.background = \"#000000\";\n\n        document.getElementById(\"selectionSort\").disabled = true;\n        buttonStyle = document.getElementById(\"selectionSort\").style;\n        document.getElementById(\"selectionSort\").title = DISABLED_BUTTON;\n        buttonStyle.cursor = \"default\";\n        buttonStyle.background = \"#000000\";\n\n        document.getElementById(\"bubbleSort\").disabled = true;\n        buttonStyle = document.getElementById(\"bubbleSort\").style;\n        document.getElementById(\"bubbleSort\").title = DISABLED_BUTTON;\n        buttonStyle.cursor = \"default\";\n        buttonStyle.background = \"#000000\";\n\n        document.getElementById(\"modQuickSort\").disabled = true;\n        buttonStyle = document.getElementById(\"modQuickSort\").style;\n        document.getElementById(\"modQuickSort\").title = DISABLED_BUTTON;\n        buttonStyle.cursor = \"default\";\n        buttonStyle.background = \"#000000\";\n\n        document.getElementById(\"comparisonPlot\").disabled = true;\n        buttonStyle = document.getElementById(\"comparisonPlot\").style;\n        document.getElementById(\"comparisonPlot\").title = DISABLED_BUTTON;\n        buttonStyle.cursor = \"progress\";\n        buttonStyle.background = \"#000000\";\n    }\n\n    restoreButtons() {\n        document.getElementById(\"arrayGen\").disabled = false;\n        let buttonStyle = document.getElementById(\"arrayGen\").style;\n        document.getElementById(\"arrayGen\").title = ENABLED_BUTTON.generateRandomArray;\n        buttonStyle.background = \"#47535E\";\n        buttonStyle.cursor = \"pointer\";\n\n        document.getElementById(\"sortArray\").disabled = false;\n        buttonStyle = document.getElementById(\"sortArray\").style;\n        document.getElementById(\"sortArray\").title = ENABLED_BUTTON.generateSortedArray;\n        buttonStyle.background = \"#47535E\";\n        buttonStyle.cursor = \"pointer\";\n\n        document.getElementById(\"reverseArray\").disabled = false;\n        buttonStyle = document.getElementById(\"reverseArray\").style;\n        document.getElementById(\"reverseArray\").title = ENABLED_BUTTON.generateReversedArray;\n        buttonStyle.background = \"#47535E\";\n        buttonStyle.cursor = \"pointer\";\n\n        document.getElementById(\"mergeSort\").disabled = false;\n        buttonStyle = document.getElementById(\"mergeSort\").style;\n        document.getElementById(\"mergeSort\").title = ENABLED_BUTTON.nlogn;\n        buttonStyle.background = \"#47535E\";\n        buttonStyle.cursor = \"pointer\";\n\n        document.getElementById(\"quickSort\").disabled = false;\n        buttonStyle = document.getElementById(\"quickSort\").style;\n        document.getElementById(\"quickSort\").title = ENABLED_BUTTON.nSquare;\n        buttonStyle.background = \"#47535E\";\n        buttonStyle.cursor = \"pointer\";\n\n        document.getElementById(\"bubbleSort\").disabled = false;\n        buttonStyle = document.getElementById(\"bubbleSort\").style;\n        document.getElementById(\"bubbleSort\").title = ENABLED_BUTTON.nSquare;\n        buttonStyle.background = \"#47535E\";\n        buttonStyle.cursor = \"pointer\";\n\n        document.getElementById(\"selectionSort\").disabled = false;\n        buttonStyle = document.getElementById(\"selectionSort\").style;\n        document.getElementById(\"selectionSort\").title = ENABLED_BUTTON.nSquare;\n        buttonStyle.background = \"#47535E\";\n        buttonStyle.cursor = \"pointer\";\n\n        document.getElementById(\"insertionSort\").disabled = false;\n        buttonStyle = document.getElementById(\"insertionSort\").style;\n        document.getElementById(\"insertionSort\").title = ENABLED_BUTTON.nSquare;\n        buttonStyle.background = \"#47535E\";\n        buttonStyle.cursor = \"pointer\";\n\n        document.getElementById(\"heapSort\").disabled = false;\n        buttonStyle = document.getElementById(\"heapSort\").style;\n        document.getElementById(\"heapSort\").title = ENABLED_BUTTON.nlogn;\n        buttonStyle.background = \"#47535E\";\n        buttonStyle.cursor = \"pointer\";\n\n        document.getElementById(\"modQuickSort\").disabled = false;\n        buttonStyle = document.getElementById(\"modQuickSort\").style;\n        document.getElementById(\"modQuickSort\").title = ENABLED_BUTTON.nlogn;\n        buttonStyle.background = \"#47535E\";\n        buttonStyle.cursor = \"pointer\";\n\n        document.getElementById(\"comparisonPlot\").disabled = false;\n        buttonStyle = document.getElementById(\"comparisonPlot\").style;\n        document.getElementById(\"comparisonPlot\").title = ENABLED_BUTTON.plotToolTip;\n        buttonStyle.background = \"#47535E\";\n        buttonStyle.cursor = \"progress\";\n    }\n\n\n    //Sorting Algorithms\n    bubbleSort() {\n        this.disableButtons();\n        const [animations, sortArray] = getBubbleSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const isColorChange = (i % 4 === 0) || (i % 4 === 1);\n            const arrayBars = document.getElementsByClassName('array-bar');\n            if (isColorChange === true) {\n                const color = (i % 4 === 0) ? SECONDARY_COLOR : PRIMARY_COLOR;\n                const [barOneIndex, barTwoIndex] = animations[i];\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                }, i * ANIMATION_SPEED_MS * 0.5);\n            }\n            else {\n                const [barIndex, newHeight] = animations[i];\n                if (barIndex === -1) {\n                    continue;\n                }\n                const barStyle = arrayBars[barIndex].style;\n                setTimeout(() => {\n                    barStyle.height = `${newHeight}px`;\n                }, i * ANIMATION_SPEED_MS * 0.5);\n            }\n        }\n        // this.setState({array: sortArray})\n        const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS * animations.length / 2 + 3000);\n        setTimeout(() => this.restoreButtons(), RESTORE_TIME);\n    }\n\n    heapSort() {\n        this.disableButtons();\n        const [animations, sortArray] = getHeapSortAnimations(this.state.array);\n        // for (let i = 0; i < animations.length; i++) {\n        //     const isColorChange = (animations[i][0] === \"comparision1\") || (animations[i][0] === \"comparision2\");\n        //     const arrayBars = document.getElementsByClassName('array-bar');\n        //     if (isColorChange === true) {\n        //         const color = (animations[i][0] === \"comparision1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\n        //         const [temp, barOneIndex, barTwoIndex] = animations[i];\n        //         const barOneStyle = arrayBars[barOneIndex].style;\n        //         const barTwoStyle = arrayBars[barTwoIndex].style;\n        //         setTimeout(() => {\n        //             barOneStyle.backgroundColor = color;\n        //             barTwoStyle.backgroundColor = color;\n        //         }, i * ANIMATION_SPEED_MS);\n        //     }\n        //     else {\n        //         const [temp, barIndex, newHeight] = animations[i];\n        //         const barStyle = arrayBars[barIndex].style;\n        //         setTimeout(() => {\n        //             barStyle.height = `${newHeight}px`;\n        //         }, i * ANIMATION_SPEED_MS);\n        //     }\n        // }\n        // // this.setState({array: sortArray})\n        // const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS * animations.length / 2 + 3000);\n        // setTimeout(() => this.restoreButtons(), RESTORE_TIME);\n    }\n\n\n    insertionSort() {\n        this.disableButtons();\n        const [animations, sortArray] = getInsertionSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const isColorChange = (animations[i][0] === \"comparision1\") || (animations[i][0] === \"comparision2\");\n            const arrayBars = document.getElementsByClassName('array-bar');\n            if (isColorChange === true) {\n                const color = (animations[i][0] === \"comparision1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\n                const [temp, barOneIndex, barTwoIndex] = animations[i];\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                }, i * ANIMATION_SPEED_MS);\n            }\n            else {\n                const [temp, barIndex, newHeight] = animations[i];\n                const barStyle = arrayBars[barIndex].style;\n                setTimeout(() => {\n                    barStyle.height = `${newHeight}px`;\n                }, i * ANIMATION_SPEED_MS);\n            }\n        }\n        // this.setState({array: sortArray})\n        const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS * animations.length / 2 + 3000);\n        setTimeout(() => this.restoreButtons(), RESTORE_TIME);\n    }\n\n    mergeSort() {\n        this.disableButtons();\n        const [animations, sortArray] = getMergeSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const isColorChange = (i % 3 !== 2);\n            const arrayBars = document.getElementsByClassName('array-bar');\n            if (isColorChange === true) {\n                const [barOneIndex, barTwoIndex] = animations[i];\n                const color = (i % 3 === 0) ? SECONDARY_COLOR : PRIMARY_COLOR;\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n                //If we don't multiply by the index then every animations[i] wait for exactly ANIMATION_SPEED_MS and immediately change into final state\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                }, i * ANIMATION_SPEED_MS);\n\n            }\n            else {\n                setTimeout(() => {\n                    const [barOneIdx, newHeight] = animations[i];\n                    const barOneStyle = arrayBars[barOneIdx].style;\n                    barOneStyle.height = `${newHeight}px`;\n                }, i * ANIMATION_SPEED_MS);\n            }\n        }\n        // this.setState({array: sortArray})\n        const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS * animations.length / 2 + 3000);\n        setTimeout(() => this.restoreButtons(), RESTORE_TIME);\n    }\n\n    modQuickSort() {\n\n    }\n\n    quickSort() {\n        this.disableButtons();\n        const [animations, sortArray] = getQuickSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length - 1; i++) {\n            const isColorChange = (i % 6 === 0) || (i % 6 === 1);\n            const arrayBars = document.getElementsByClassName('array-bar');\n            if (isColorChange === true) {\n                const color = (i % 6 === 0) ? SECONDARY_COLOR : PRIMARY_COLOR;\n                const [barOneIndex, barTwoIndex] = animations[i];\n                if (barOneIndex === -1) {\n                    continue;\n                }\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                }, i * ANIMATION_SPEED_MS);\n            }\n            else {\n                const [barIndex, newHeight] = animations[i];\n                if (barIndex === -1) {\n                    continue;\n                }\n                const barStyle = arrayBars[barIndex].style;\n                setTimeout(() => {\n                    barStyle.height = `${newHeight}px`;\n                }, i * ANIMATION_SPEED_MS);\n            }\n        }\n        // this.setState({array: sortArray})\n        const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS * animations.length / 2 + 3000);\n        setTimeout(() => this.restoreButtons(), RESTORE_TIME);\n    }\n\n    selectionSort() {\n        this.disableButtons();\n        const [animations, sortArray] = getSelectionSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const isColorChange = (animations[i][0] === \"comparision1\") || (animations[i][0] === \"comparision2\");\n            const arrayBars = document.getElementsByClassName('array-bar');\n            if (isColorChange === true) {\n                const color = (animations[i][0] === \"comparision1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\n                const [temp, barOneIndex, barTwoIndex] = animations[i];\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                }, i * ANIMATION_SPEED_MS);\n            }\n            else {\n                const [temp, barIndex, newHeight] = animations[i];\n                const barStyle = arrayBars[barIndex].style;\n                setTimeout(() => {\n                    barStyle.height = `${newHeight}px`;\n                }, i * ANIMATION_SPEED_MS);\n            }\n        }\n        // this.setState({array: sortArray})\n        const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS * animations.length / 2 + 3000);\n        setTimeout(() => this.restoreButtons(), RESTORE_TIME);\n    }\n\n\n    getChartRandomData() {\n        this.resetData();\n        var arraySizes = [1000, 2000, 4000, 5000, 10000, 40000, 50000];\n        var array = []\n        var t0, t1 = 0;\n        for (var index = 0; index < arraySizes.length; ++index) { //Iterate through each array size\n            array = [];\n            for (let i = 0; i < arraySizes[index]; i++) { array.push(Math.random()); } //Generate an array based on the current array size\n            t0 = performance.now();\n            bubbleSort(array.slice());\n            t1 = performance.now();\n            bubbleSortData.push(t1 - t0);\n\n            t0 = performance.now();\n            heapSort(array.slice());\n            t1 = performance.now();\n            heapSortData.push(t1 - t0);\n\n            t0 = performance.now();\n            insertionSort(array.slice());\n            t1 = performance.now();\n            insertionSortData.push(t1 - t0);\n\n            t0 = performance.now();\n            mergeSort(array.slice());\n            t1 = performance.now();\n            mergeSortData.push(t1 - t0);\n\n            t0 = performance.now();\n            modifiedQuickSort(array.slice());\n            t1 = performance.now();\n            modifiedQuickSortData.push(t1 - t0);\n\n            t0 = performance.now();\n            quickSort(array.slice());\n            t1 = performance.now();\n            quickSortData.push(t1 - t0);\n\n            t0 = performance.now();\n            selectionSort(array.slice());\n            t1 = performance.now();\n            selectionSortData.push(t1 - t0);\n        }\n    }\n    getChartSortedData() {\n        this.resetData();\n        var arraySizes = [1000, 2000, 4000, 5000, 10000, 40000, 50000];\n        var array = []\n        var t0, t1 = 0;\n        for (var index = 0; index < arraySizes.length; ++index) { //Iterate through each array size\n            array = [];\n            for (let i = 0; i < arraySizes[index]; i++) { array.push(Math.random()); } //Generate an array based on the current array size\n            array.sort((a, b) => a - b); //Adjusted sort function because sort w/o args uses string comparison, not number\n            t0 = performance.now();\n            bubbleSort(array.slice());\n            t1 = performance.now();\n            bubbleSortData.push(t1 - t0);\n\n            t0 = performance.now();\n            heapSort(array.slice());\n            t1 = performance.now();\n            heapSortData.push(t1 - t0);\n\n            t0 = performance.now();\n            insertionSort(array.slice());\n            t1 = performance.now();\n            insertionSortData.push(t1 - t0);\n\n            t0 = performance.now();\n            mergeSort(array.slice());\n            t1 = performance.now();\n            mergeSortData.push(t1 - t0);\n\n            t0 = performance.now();\n            modifiedQuickSort(array.slice());\n            t1 = performance.now();\n            modifiedQuickSortData.push(t1 - t0);\n\n            t0 = performance.now();\n            quickSort(array.slice());\n            t1 = performance.now();\n            quickSortData.push(t1 - t0);\n\n            t0 = performance.now();\n            selectionSort(array.slice());\n            t1 = performance.now();\n            selectionSortData.push(t1 - t0);\n        }\n    }\n    getChartReverseData() {\n        this.resetData();\n        var arraySizes = [1000, 2000, 4000, 5000, 10000, 40000, 50000];\n        var array = []\n        var t0, t1 = 0;\n        for (var index = 0; index < arraySizes.length; ++index) { //Iterate through each array size\n            array = [];\n            for (let i = 0; i < arraySizes[index]; i++) { array.push(Math.random()); } //Generate an array based on the current array size\n            array.sort((a, b) => a - b).reverse();\n            t0 = performance.now();\n            bubbleSort(array.slice());\n            t1 = performance.now();\n            bubbleSortData.push(t1 - t0);\n\n            t0 = performance.now();\n            heapSort(array.slice());\n            t1 = performance.now();\n            heapSortData.push(t1 - t0);\n\n            t0 = performance.now();\n            insertionSort(array.slice());\n            t1 = performance.now();\n            insertionSortData.push(t1 - t0);\n\n            t0 = performance.now();\n            mergeSort(array.slice());\n            t1 = performance.now();\n            mergeSortData.push(t1 - t0);\n\n            t0 = performance.now();\n            modifiedQuickSort(array.slice());\n            t1 = performance.now();\n            modifiedQuickSortData.push(t1 - t0);\n\n            t0 = performance.now();\n            quickSort(array.slice());\n            t1 = performance.now();\n            quickSortData.push(t1 - t0);\n\n            t0 = performance.now();\n            selectionSort(array.slice());\n            t1 = performance.now();\n            selectionSortData.push(t1 - t0);\n        }\n    }\n    resetData() {\n        bubbleSortData = [];\n        heapSortData = [];\n        insertionSortData = [];\n        mergeSortData = [];\n        modifiedQuickSortData = [];\n        quickSortData = [];\n        selectionSortData = [];\n    }\n    getAllData() {\n        this.getChartRandomData();\n        //console.log(\"bubble\", bubbleSortData);\n        this.setState({\n            chartDataRandom: {\n                labels: ['1,000', '2,000', '4,000', '5,000', '10,000', '40,000', '50,000'],\n                datasets: [\n                    {\n                        label: 'Bubble Sort',\n                        backgroundColor: 'rgba(255, 99, 132, 0.6)',\n                        data: bubbleSortData,\n                    }, {\n                        label: 'Heap Sort',\n                        backgroundColor: 'rgba(54, 162, 235, 0.6)',\n                        data: heapSortData,\n                    }, {\n                        label: 'Insertion Sort',\n                        backgroundColor: 'rgba(255, 206, 86, 0.6)',\n                        data: insertionSortData,\n                    }, {\n                        label: 'Merge Sort',\n                        backgroundColor: 'rgba(75, 192, 192, 0.6)',\n                        data: mergeSortData,\n                    }, {\n                        label: 'Modified Quick Sort',\n                        backgroundColor: 'rgba(153, 102, 255, 0.6)',\n                        data: modifiedQuickSortData,\n                    }, {\n                        label: 'Quick Sort',\n                        backgroundColor: 'rgba(255, 159, 64, 0.6)',\n                        data: quickSortData,\n                    }, {\n                        label: 'Selection Sort',\n                        backgroundColor: 'rgba(99, 255, 132, 0.6)',\n                        data: selectionSortData,\n                    }\n                ]\n            }\n        });\n\n        this.getChartSortedData();\n        //console.log(\"bubblesort\", bubbleSortData);\n        this.setState({\n            chartDataSorted: {\n                labels: ['1,000', '2,000', '4,000', '5,000', '10,000', '40,000', '50,000'],\n                datasets: [\n                    {\n                        label: 'Bubble Sort',\n                        backgroundColor: 'rgba(255, 99, 132, 0.6)',\n                        data: bubbleSortData,\n                    }, {\n                        label: 'Heap Sort',\n                        backgroundColor: 'rgba(54, 162, 235, 0.6)',\n                        data: heapSortData,\n                    }, {\n                        label: 'Insertion Sort',\n                        backgroundColor: 'rgba(255, 206, 86, 0.6)',\n                        data: insertionSortData,\n                    }, {\n                        label: 'Merge Sort',\n                        backgroundColor: 'rgba(75, 192, 192, 0.6)',\n                        data: mergeSortData,\n                    }, {\n                        label: 'Modified Quick Sort',\n                        backgroundColor: 'rgba(153, 102, 255, 0.6)',\n                        data: modifiedQuickSortData,\n                    }, {\n                        label: 'Quick Sort',\n                        backgroundColor: 'rgba(255, 159, 64, 0.6)',\n                        data: quickSortData,\n                    }, {\n                        label: 'Selection Sort',\n                        backgroundColor: 'rgba(99, 255, 132, 0.6)',\n                        data: selectionSortData,\n                    }\n                ]\n            }\n        });\n\n        this.getChartReverseData();\n        //console.log(\"bubblereverse\", bubbleSortData);\n        this.setState({\n            chartDataReversed: {\n                labels: ['1,000', '2,000', '4,000', '5,000', '10,000', '40,000', '50,000'],\n                datasets: [\n                    {\n                        label: 'Bubble Sort',\n                        backgroundColor: 'rgba(255, 99, 132, 0.6)',\n                        data: bubbleSortData,\n                    }, {\n                        label: 'Heap Sort',\n                        backgroundColor: 'rgba(54, 162, 235, 0.6)',\n                        data: heapSortData,\n                    }, {\n                        label: 'Insertion Sort',\n                        backgroundColor: 'rgba(255, 206, 86, 0.6)',\n                        data: insertionSortData,\n                    }, {\n                        label: 'Merge Sort',\n                        backgroundColor: 'rgba(75, 192, 192, 0.6)',\n                        data: mergeSortData,\n                    }, {\n                        label: 'Modified Quick Sort',\n                        backgroundColor: 'rgba(153, 102, 255, 0.6)',\n                        data: modifiedQuickSortData,\n                    }, {\n                        label: 'Quick Sort',\n                        backgroundColor: 'rgba(255, 159, 64, 0.6)',\n                        data: quickSortData,\n                    }, {\n                        label: 'Selection Sort',\n                        backgroundColor: 'rgba(99, 255, 132, 0.6)',\n                        data: selectionSortData,\n                    }\n                ]\n            }\n        });\n    }\n\n    comparisonPlot() {\n        this.disableButtons();\n        this.getAllData()\n        this.setState({ showGraphs: true })\n    }\n\n    render() {\n        const array = this.state.array;\n        const SORT_BUTTONS = 6;\n        const TOTAL_BUTTONS = 1 + SORT_BUTTONS;\n        if (this.state.showGraphs) {\n            return (\n                <>\n                    <div className=\"Charts\">\n                        <div className=\"App-header\" >\n                            <h1>Time Complexity Analysis</h1>\n                        </div>\n                        <Chart chartData={this.state.chartDataRandom} title=\"Algorithms Tested With Random Data\" />\n                        <div style={{ height: `50px` }}></div>\n                        <Chart chartData={this.state.chartDataSorted} title=\"Algorithms Tested With Sorted Data\" />\n                        <div style={{ height: `50px` }}></div>\n                        <Chart chartData={this.state.chartDataReversed} title=\"Algorithms Tested With Reversely Sorted Data\" />\n                    </div>\n                </>\n            );\n\n        } else {\n            return (\n                <>\n                    <div className=\"array-container\" style={{ position: 'absolute', right: `20px` }}>\n                        {array.map((value, idx) => (\n                            <div\n                                className=\"array-bar\"\n                                key={idx}\n                                style={{\n                                    backgroundColor: PRIMARY_COLOR,\n                                    height: `${value}px`\n                                }}\n                            ></div>\n                        ))}\n                    </div>\n                    <div className=\"buttons\" >\n                        <button title=\"Generates a new random unsorted array\" id=\"arrayGen\" style={{ position: 'relative', top: `${0 * (WINDOW_HEIGHT - 20) / TOTAL_BUTTONS}px` }} onClick={() => this.resetArray()}>\n                            Generate an Unsorted Array\n                    </button>\n                        <button title=\"Generates a new sorted array\" id=\"sortArray\" style={{ position: 'relative', top: `${0 * (WINDOW_HEIGHT - 20) / TOTAL_BUTTONS}px` }} onClick={() => this.sortArray()}>\n                            Generate a Sorted Array\n                    </button>\n                        <button title=\"Generates a new reversed array\" id=\"reverseArray\" style={{ position: 'relative', top: `${0 * (WINDOW_HEIGHT - 20) / TOTAL_BUTTONS}px` }} onClick={() => this.reverseArray()}>\n                            Generate a Sorted Reversed Array\n                    </button>\n                        <button title=\"O(N^2) Time Complexity\" id=\"bubbleSort\" style={{ position: 'relative', top: `${0.5 * (WINDOW_HEIGHT - 20) / TOTAL_BUTTONS}px` }} onClick={() => this.bubbleSort()}>\n                            Bubble Sort\n                    </button>\n                        <button title=\"O(NlogN) Time Complexity\" id=\"heapSort\" style={{ position: 'relative', top: `${0.5 * (WINDOW_HEIGHT - 20) / TOTAL_BUTTONS}px` }} onClick={() => this.heapSort()}>\n                            Heap Sort\n                    </button>\n                        <button title=\"O(N^2) Time Complexity\" id=\"insertionSort\" style={{ position: 'relative', top: `${0.5 * (WINDOW_HEIGHT - 20) / TOTAL_BUTTONS}px` }} onClick={() => this.insertionSort()}>\n                            Insertion Sort\n                    </button>\n                        <button title=\"O(NlogN) Time Complexity\" id=\"mergeSort\" style={{ position: 'relative', top: `${0.5 * (WINDOW_HEIGHT - 20) / TOTAL_BUTTONS}px` }} onClick={() => this.mergeSort()}>\n                            Merge Sort\n                    </button>\n                        <button title=\"O(N^2) Time Complexity\" id=\"modQuickSort\" style={{ position: 'relative', top: `${0.5 * (WINDOW_HEIGHT - 20) / TOTAL_BUTTONS}px` }} onClick={() => this.modQuickSort()}>\n                            Modified Quick Sort\n                    </button>\n                        <button title=\"O(N^2) Time Complexity\" id=\"quickSort\" style={{ position: 'relative', top: `${0.5 * (WINDOW_HEIGHT - 20) / TOTAL_BUTTONS}px` }} onClick={() => this.quickSort()}>\n                            In-Place Quick Sort\n                    </button>\n                        <button title=\"O(N^2) Time Complexity\" id=\"selectionSort\" style={{ position: 'relative', top: `${0.5 * (WINDOW_HEIGHT - 20) / TOTAL_BUTTONS}px` }} onClick={() => this.selectionSort()}>\n                            Selection Sort\n                    </button>\n                        <button title=\"Compare all algorithms for different input sizes\" id=\"comparisonPlot\" style={{ position: 'relative', top: `${1.0 * (WINDOW_HEIGHT - 20) / TOTAL_BUTTONS}px` }} onClick={() => this.comparisonPlot()}>\n                            Comparison Plot\n                    </button>\n\n                    </div>\n                </>\n            );\n        }\n\n    }\n}\n\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\nfunction randomIntFromInterval(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min); //min max inclusive\n}\n\nexport default SortingVisualizer;","import React from 'react';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}