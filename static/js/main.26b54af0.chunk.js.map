{"version":3,"sources":["SortingAlgorithms/BubbleSort.js","SortingAlgorithms/MergeSort.js","SortingAlgorithms/QuickSort.js","SortingAlgorithms/SelectionSort.js","SortingVisualizer/SortingVisualizer.jsx","SortingAlgorithms/InsertionSort.js","App.js","serviceWorker.js","index.js"],"names":["getBubbleSortAnimations","array","animations","auxillaryArray","slice","N","length","i","j","push","swap","bubbleSort","javaScriptSortedArray","sort","a","b","console","log","firstArray","secondArray","arraysAreEqual","firstIndex","secondIndex","temp","getMergeSortAnimations","mergeSort","startIndex","endIndex","middleIndex","Math","floor","sortArray","merge","getQuickSortAnimations","quickSort","pivotIndex","pivot","partitionArray","getSelectionSortAnimations","minIndex","selectionSort","WINDOW_WIDTH","window","innerWidth","WINDOW_HEIGHT","innerHeight","NUMBER_OF_ARRAY_BARS","parseInt","onresize","DISABLED_BUTTON","ENABLED_BUTTON","SortingVisualizer","props","state","this","resetArray","min","max","random","setState","restoreButtons","sorted","reverse","document","getElementById","disabled","buttonStyle","style","title","cursor","background","disableButtons","isColorChange","arrayBars","getElementsByClassName","color","barOneIndex","barTwoIndex","barOneStyle","barTwoStyle","setTimeout","backgroundColor","barIndex","newHeight","barStyle","height","RESTORE_TIME","key","insertionSort","getInsertionSortAnimations","barOneIdx","className","position","right","map","value","idx","id","top","onClick","reverseArray","heapSort","modQuickSort","comparisonPlot","React","Component","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.26b54af0.chunk.js","sourcesContent":["export function getBubbleSortAnimations(array) {\n    let animations = [];\n    let auxillaryArray = array.slice();\n    bubbleSort(auxillaryArray, animations);\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n    console.log(\"sort works correctly? \", arraysAreEqual(javaScriptSortedArray, auxillaryArray));\n    array = auxillaryArray;\n    return [animations, array];\n}\n\nfunction bubbleSort(auxillaryArray, animations) {\n    const N = auxillaryArray.length;\n    for (let i = 0; i < N - 1; i++) {\n        for (let j = 0; j < N - i - 1; j++) {\n            animations.push([j, j + 1]);\n            animations.push([j, j + 1]);\n            if (auxillaryArray[j] > auxillaryArray[j + 1]) {\n                animations.push([j, auxillaryArray[j + 1]]);\n                animations.push([j + 1, auxillaryArray[j]]);\n                swap(auxillaryArray, j, j + 1);\n            }\n            else {\n                animations.push([-1, -1]);\n                animations.push([-1, -1]);\n            }\n        }\n    }\n}\n\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\n    let temp = auxillaryArray[firstIndex];\n    auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\n    auxillaryArray[secondIndex] = temp;\n}\n\nfunction arraysAreEqual(firstArray, secondArray) {\n    if (firstArray.length !== secondArray.length) {\n        return false;\n    }\n    for (let i = 0; i < firstArray.length; i++) {\n        if (firstArray[i] !== secondArray[i]) {\n            return false;\n        }\n    }\n    return true;\n}","export function getMergeSortAnimations(array) {\n    let animations = [];\n    let auxillaryArray = array.slice();\n    mergeSort(auxillaryArray, 0, auxillaryArray.length - 1, animations);\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n    console.log(arraysAreEqual(javaScriptSortedArray, auxillaryArray));\n    array = auxillaryArray;\n    return [animations, array];\n}\n\nfunction mergeSort(auxillaryArray, startIndex, endIndex, animations) {\n    if (startIndex === endIndex)\n        return;\n    const middleIndex = Math.floor((startIndex + endIndex) / 2);\n    mergeSort(auxillaryArray, startIndex, middleIndex, animations);\n    mergeSort(auxillaryArray, middleIndex + 1, endIndex, animations);\n    merge(auxillaryArray, startIndex, middleIndex, endIndex, animations);\n}\n\nfunction merge(auxillaryArray, startIndex, middleIndex, endIndex, animations) {\n    let sortArray = [];\n    let i = startIndex;\n    let j = middleIndex + 1;\n    while (i <= middleIndex && j <= endIndex) {\n        //Comparing value at ith and jth index so push them to change their color\n        animations.push([i, j]);\n        //By changing color we imply that we are comparing those two values and then again we should revert back to their original color so push them again\n        animations.push([i, j]);\n        if (auxillaryArray[i] <= auxillaryArray[j]) {\n            //We should overwrite the value at (i+startIndex)th index with ith index so push them to highlight swap their heights\n            animations.push([sortArray.length + startIndex, auxillaryArray[i]]);\n            sortArray.push(auxillaryArray[i++]);\n        }\n        else {\n            //We should overwrite the value at (i+startIndex)th index with jth index so push them to highlight swap their heights\n            animations.push([sortArray.length + startIndex, auxillaryArray[j]]);\n            sortArray.push(auxillaryArray[j++]);\n        }\n    }\n    while (i <= middleIndex) {\n        animations.push([i, i]);\n        animations.push([i, i]);\n        animations.push([sortArray.length + startIndex, auxillaryArray[i]]);\n        sortArray.push(auxillaryArray[i++]);\n    }\n    while (j <= endIndex) {\n        animations.push([j, j]);\n        animations.push([j, j]);\n        animations.push([sortArray.length + startIndex, auxillaryArray[j]]);\n        sortArray.push(auxillaryArray[j++]);\n    }\n    for (let i = startIndex; i <= endIndex; i++) {\n        auxillaryArray[i] = sortArray[i - startIndex];\n    }\n}\n\nfunction arraysAreEqual(firstArray, secondArray) {\n    if (firstArray.length !== secondArray.length) {\n        return false;\n    }\n    for (let i = 0; i < firstArray.length; i++) {\n        if (firstArray[i] !== secondArray[i]) {\n            return false;\n        }\n    }\n    return true;\n}","// any random item or the first or the last item of your input can be pivot\nexport function getQuickSortAnimations(array) {\n    let animations = [];\n    let auxillaryArray = array.slice();\n    quickSort(auxillaryArray, 0, auxillaryArray.length - 1, animations);\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n    console.log(\"sort works correctly? \", arraysAreEqual(javaScriptSortedArray, auxillaryArray));\n    array = auxillaryArray;\n    return [animations, array];\n}\n\ngetQuickSortAnimations([7, 2, 1, 6]);\n\nfunction quickSort(auxillaryArray, startIndex, endIndex, animations) {\n    let pivotIndex;\n    if (startIndex < endIndex) {\n        pivotIndex = partitionArray(auxillaryArray, startIndex, endIndex, animations);\n        quickSort(auxillaryArray, startIndex, pivotIndex - 1, animations);\n        quickSort(auxillaryArray, pivotIndex + 1, endIndex, animations);\n    }\n}\n\nfunction partitionArray(auxillaryArray, startIndex, endIndex, animations) {\n    let pivot = auxillaryArray[endIndex];\n    let pivotIndex = startIndex;\n    for (let i = startIndex; i <= endIndex - 1; i++) {\n        animations.push([i, endIndex]);\n        animations.push([i, endIndex]);\n        if (auxillaryArray[i] <= pivot) {\n            //Swap these two heights\n            animations.push([i, auxillaryArray[pivotIndex]]);\n            animations.push([pivotIndex, auxillaryArray[i]]);\n            swap(auxillaryArray, i, pivotIndex);\n            pivotIndex++;\n        }\n        else {\n            animations.push([-1, -1]);\n            animations.push([-1, -1]);\n        }\n        animations.push([-1, -1]);\n        animations.push([-1, -1]);\n    }\n    animations.push([-1, -1]);\n    animations.push([-1, -1]);\n    animations.push([-1, -1]);\n    animations.push([-1, -1]);\n    //Swap these two heights\n    animations.push([pivotIndex, auxillaryArray[endIndex]]);\n    animations.push([endIndex, auxillaryArray[pivotIndex]]);\n    swap(auxillaryArray, pivotIndex, endIndex);\n    return pivotIndex;\n}\n\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\n    let temp = auxillaryArray[firstIndex];\n    auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\n    auxillaryArray[secondIndex] = temp;\n}\n\nfunction arraysAreEqual(firstArray, secondArray) {\n    if (firstArray.length !== secondArray.length) {\n        return false;\n    }\n    for (let i = 0; i < firstArray.length; i++) {\n        if (firstArray[i] !== secondArray[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n\n// export function getInPlaceQuickSortAnimations(array) {\n//     let animations  = [];\n//     let auxillaryArray = array.slice();\n//     quickSort(auxillaryArray, animations);\n//     const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n//     console.log(\"sort works correctly? \",arraysAreEqual(javaScriptSortedArray, auxillaryArray));\n//     array = auxillaryArray;\n//     return [animations, array];\n//   }\n\n//   function inPlaceQuickSort(auxillaryArray, animations){ \n\n//   }\n\n\n//   const pivot = (arr, start = 0, end = arr.length + 1) => {\n//       const swap = (list, a, b) => [list[a], list[b]] = [list[b], list[a]];\n\n//       let pivot = arr[start],\n//           pointer = start;\n\n//       for (let i = start; i < arr.length; i++) {\n//         if (arr[i] < pivot  ) {\n//           pointer++;\n//           swap(arr, pointer, i);\n//         }\n//       };\n//       swap(arr, start, pointer);\n\n//       return pointer;\n//     }\n\n//     const quickSort = (arr, start = 0, end = arr.length) => {\n//       let pivotIndex = pivot(arr, start, end);\n\n//       if (start >= end) return arr;\n//       quickSort(arr, start, pivotIndex);\n//       quickSort(arr, pivotIndex + 1, end);\n\n//       return arr;\n//     };","export function getSelectionSortAnimations(array) {\n    let animations = [];\n    let auxillaryArray = array.slice();\n    selectionSort(auxillaryArray, animations);\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n    console.log(\"sort works correctly? \", arraysAreEqual(javaScriptSortedArray, auxillaryArray));\n    array = auxillaryArray;\n    return [animations, array];\n}\n\nfunction selectionSort(auxillaryArray, animations) {\n    const N = auxillaryArray.length;\n    for (let i = 0; i < N - 1; i++) {\n        let minIndex = i; //Finding minimum element in unsorted array\n        for (let j = i + 1; j < N; j++) {\n            animations.push([\"comparision1\", j, minIndex]);\n            animations.push([\"comparision2\", j, minIndex]);\n            if (auxillaryArray[j] < auxillaryArray[minIndex]) {\n                minIndex = j;\n            }\n        }\n        animations.push([\"swap\", minIndex, auxillaryArray[i]]);\n        animations.push([\"swap\", i, auxillaryArray[minIndex]]);\n        // Swap the found minimum element with the first element\n        swap(auxillaryArray, minIndex, i);\n    }\n}\n\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\n    let temp = auxillaryArray[firstIndex];\n    auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\n    auxillaryArray[secondIndex] = temp;\n}\n\nfunction arraysAreEqual(firstArray, secondArray) {\n    if (firstArray.length !== secondArray.length) {\n        return false;\n    }\n    for (let i = 0; i < firstArray.length; i++) {\n        if (firstArray[i] !== secondArray[i]) {\n            return false;\n        }\n    }\n    return true;\n}","import React from 'react';\nimport './SortingVisualizer.css';\nimport { getBubbleSortAnimations } from '../SortingAlgorithms/BubbleSort';\nimport { getHeapSortAnimations } from '../SortingAlgorithms/HeapSort';\nimport { getInsertionSortAnimations } from '../SortingAlgorithms/InsertionSort';\nimport { getMergeSortAnimations } from '../SortingAlgorithms/MergeSort';\nimport { getModifiedQuickSortAnimations } from '../SortingAlgorithms/ModifiedQuickSort';\nimport { getQuickSortAnimations } from '../SortingAlgorithms/QuickSort';\nimport { getSelectionSortAnimations } from '../SortingAlgorithms/SelectionSort';\n\n//import {getInsertionSortAnimations} from '../SortingAlgorithms/InPlaceQuickSort';\n\n//Changing width,height accordingly with the browser\nlet WINDOW_WIDTH = window.innerWidth;\nlet WINDOW_HEIGHT = window.innerHeight;\nlet NUMBER_OF_ARRAY_BARS = parseInt((WINDOW_WIDTH - 200) / 8);\n\n// TODO: \n// HeapSort.js\n// InPlaceQuickSort.js\n// ModifiedQuickSort.js\n// Update SortVisualizer.jsx\n// Update the CSS\n\nfunction reportWindowSize() {\n    WINDOW_WIDTH = window.innerWidth;\n    WINDOW_HEIGHT = window.innerHeight;\n    NUMBER_OF_ARRAY_BARS = parseInt((WINDOW_WIDTH - 200) / 8);\n}\nwindow.onresize = reportWindowSize; //TBD -> find a way to update state also when resized\n\n\nconst PRIMARY_COLOR = 'dodgerblue'; //Normal color of bars\nconst SECONDARY_COLOR = 'orangered'; //Color of bars when they are being compared\nconst ANIMATION_SPEED_MS = 1; //Animation Speed (how fast color changes, how fast height gets overwritten)\n\n//Tooltips for buttons\nconst DISABLED_BUTTON = \"Currently Disabled\"\nconst ENABLED_BUTTON = {\n    nlogn: \"O(NlogN) Time Complexity\",\n    nSquare: \"O(N^2) Time Complexity\",\n    plotToolTip: \"Compare all algorithms for different input sizes\",\n    generateRandomArray: \"Generates a new random unsorted array\",\n    generateSortedArray: \"Generates a new sorted array\",\n    generateReversedArray: \"Generates a new reversed array\"\n}\n\nclass SortingVisualizer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            array: []\n        };\n    }\n\n    componentDidMount() {\n        this.resetArray();\n    }\n\n    //Generates new random array \n    resetArray() {\n        const array = []\n        for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n            array.push(randomIntFromInterval(25, WINDOW_HEIGHT - 30));\n        }\n        this.setState({ array: array });\n        this.restoreButtons();\n    }\n\n    //Sorts a new array\n    sortArray() {\n        this.resetArray();\n        const sorted = this.state.array.sort(function (a, b) { return a - b; }); //Adjusted sort function because sort w/o args uses string comparison, not number\n        this.setState({ array: sorted });\n    }\n\n    //Sorts and reverses a new array\n    reverseArray() {\n        this.resetArray();\n        const reverse = this.state.array.sort(function (a, b) { return a - b; }).reverse(); //Adjusted sort function because sort w/o args uses string comparison, not number\n        this.setState({ array: reverse });\n    }\n\n\n    disableButtons() {\n        document.getElementById(\"arrayGen\").disabled = true;\n        let buttonStyle = document.getElementById(\"arrayGen\").style;\n        document.getElementById(\"arrayGen\").title = DISABLED_BUTTON;\n        buttonStyle.cursor = \"default\";\n        buttonStyle.background = \"#000000\";\n\n        document.getElementById(\"sortArray\").disabled = true;\n        buttonStyle = document.getElementById(\"sortArray\").style;\n        document.getElementById(\"sortArray\").title = DISABLED_BUTTON;\n        buttonStyle.cursor = \"default\";\n        buttonStyle.background = \"#000000\";\n\n        document.getElementById(\"reverseArray\").disabled = true;\n        buttonStyle = document.getElementById(\"reverseArray\").style;\n        document.getElementById(\"reverseArray\").title = DISABLED_BUTTON;\n        buttonStyle.cursor = \"default\";\n        buttonStyle.background = \"#000000\";\n\n        document.getElementById(\"mergeSort\").disabled = true;\n        buttonStyle = document.getElementById(\"mergeSort\").style;\n        document.getElementById(\"mergeSort\").title = DISABLED_BUTTON;\n        buttonStyle.cursor = \"default\";\n        buttonStyle.background = \"#000000\";\n\n        document.getElementById(\"quickSort\").disabled = true;\n        buttonStyle = document.getElementById(\"quickSort\").style;\n        document.getElementById(\"quickSort\").title = DISABLED_BUTTON;\n        buttonStyle.cursor = \"default\";\n        buttonStyle.background = \"#000000\";\n\n        document.getElementById(\"insertionSort\").disabled = true;\n        buttonStyle = document.getElementById(\"insertionSort\").style;\n        document.getElementById(\"insertionSort\").title = DISABLED_BUTTON;\n        buttonStyle.cursor = \"default\";\n        buttonStyle.background = \"#000000\";\n\n        document.getElementById(\"heapSort\").disabled = true;\n        buttonStyle = document.getElementById(\"heapSort\").style;\n        document.getElementById(\"heapSort\").title = DISABLED_BUTTON;\n        buttonStyle.cursor = \"default\";\n        buttonStyle.background = \"#000000\";\n\n        document.getElementById(\"selectionSort\").disabled = true;\n        buttonStyle = document.getElementById(\"selectionSort\").style;\n        document.getElementById(\"selectionSort\").title = DISABLED_BUTTON;\n        buttonStyle.cursor = \"default\";\n        buttonStyle.background = \"#000000\";\n\n        document.getElementById(\"bubbleSort\").disabled = true;\n        buttonStyle = document.getElementById(\"bubbleSort\").style;\n        document.getElementById(\"bubbleSort\").title = DISABLED_BUTTON;\n        buttonStyle.cursor = \"default\";\n        buttonStyle.background = \"#000000\";\n\n        document.getElementById(\"modQuickSort\").disabled = true;\n        buttonStyle = document.getElementById(\"modQuickSort\").style;\n        document.getElementById(\"modQuickSort\").title = DISABLED_BUTTON;\n        buttonStyle.cursor = \"default\";\n        buttonStyle.background = \"#000000\";\n\n        document.getElementById(\"comparisonPlot\").disabled = true;\n        buttonStyle = document.getElementById(\"comparisonPlot\").style;\n        document.getElementById(\"comparisonPlot\").title = DISABLED_BUTTON;\n        buttonStyle.cursor = \"default\";\n        buttonStyle.background = \"#000000\";\n    }\n\n\n    restoreButtons() {\n        document.getElementById(\"arrayGen\").disabled = false;\n        let buttonStyle = document.getElementById(\"arrayGen\").style;\n        document.getElementById(\"arrayGen\").title = ENABLED_BUTTON.generateRandomArray;\n        buttonStyle.background = \"#47535E\";\n        buttonStyle.cursor = \"pointer\";\n\n        document.getElementById(\"sortArray\").disabled = false;\n        buttonStyle = document.getElementById(\"sortArray\").style;\n        document.getElementById(\"sortArray\").title = ENABLED_BUTTON.generateSortedArray;\n        buttonStyle.background = \"#47535E\";\n        buttonStyle.cursor = \"pointer\";\n\n        document.getElementById(\"reverseArray\").disabled = false;\n        buttonStyle = document.getElementById(\"reverseArray\").style;\n        document.getElementById(\"reverseArray\").title = ENABLED_BUTTON.generateReversedArray;\n        buttonStyle.background = \"#47535E\";\n        buttonStyle.cursor = \"pointer\";\n\n        document.getElementById(\"mergeSort\").disabled = false;\n        buttonStyle = document.getElementById(\"mergeSort\").style;\n        document.getElementById(\"mergeSort\").title = ENABLED_BUTTON.nlogn;\n        buttonStyle.background = \"#47535E\";\n        buttonStyle.cursor = \"pointer\";\n\n        document.getElementById(\"quickSort\").disabled = false;\n        buttonStyle = document.getElementById(\"quickSort\").style;\n        document.getElementById(\"quickSort\").title = ENABLED_BUTTON.nSquare;\n        buttonStyle.background = \"#47535E\";\n        buttonStyle.cursor = \"pointer\";\n\n        document.getElementById(\"bubbleSort\").disabled = false;\n        buttonStyle = document.getElementById(\"bubbleSort\").style;\n        document.getElementById(\"bubbleSort\").title = ENABLED_BUTTON.nSquare;\n        buttonStyle.background = \"#47535E\";\n        buttonStyle.cursor = \"pointer\";\n\n        document.getElementById(\"selectionSort\").disabled = false;\n        buttonStyle = document.getElementById(\"selectionSort\").style;\n        document.getElementById(\"selectionSort\").title = ENABLED_BUTTON.nSquare;\n        buttonStyle.background = \"#47535E\";\n        buttonStyle.cursor = \"pointer\";\n\n        document.getElementById(\"insertionSort\").disabled = false;\n        buttonStyle = document.getElementById(\"insertionSort\").style;\n        document.getElementById(\"insertionSort\").title = ENABLED_BUTTON.nSquare;\n        buttonStyle.background = \"#47535E\";\n        buttonStyle.cursor = \"pointer\";\n\n        document.getElementById(\"heapSort\").disabled = false;\n        buttonStyle = document.getElementById(\"heapSort\").style;\n        document.getElementById(\"heapSort\").title = ENABLED_BUTTON.nlogn;\n        buttonStyle.background = \"#47535E\";\n        buttonStyle.cursor = \"pointer\";\n\n        document.getElementById(\"modQuickSort\").disabled = false;\n        buttonStyle = document.getElementById(\"modQuickSort\").style;\n        document.getElementById(\"modQuickSort\").title = ENABLED_BUTTON.nlogn;\n        buttonStyle.background = \"#47535E\";\n        buttonStyle.cursor = \"pointer\";\n\n        document.getElementById(\"comparisonPlot\").disabled = false;\n        buttonStyle = document.getElementById(\"comparisonPlot\").style;\n        document.getElementById(\"comparisonPlot\").title = ENABLED_BUTTON.plotToolTip;\n        buttonStyle.background = \"#47535E\";\n        buttonStyle.cursor = \"pointer\";\n    }\n\n\n    //Sorting Algorithms\n    bubbleSort() {\n        this.disableButtons();\n        const [animations, sortArray] = getBubbleSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const isColorChange = (i % 4 === 0) || (i % 4 === 1);\n            const arrayBars = document.getElementsByClassName('array-bar');\n            if (isColorChange === true) {\n                const color = (i % 4 === 0) ? SECONDARY_COLOR : PRIMARY_COLOR;\n                const [barOneIndex, barTwoIndex] = animations[i];\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                }, i * ANIMATION_SPEED_MS * 0.5);\n            }\n            else {\n                const [barIndex, newHeight] = animations[i];\n                if (barIndex === -1) {\n                    continue;\n                }\n                const barStyle = arrayBars[barIndex].style;\n                setTimeout(() => {\n                    barStyle.height = `${newHeight}px`;\n                }, i * ANIMATION_SPEED_MS * 0.5);\n            }\n        }\n        // this.setState({array: sortArray})\n        const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS * animations.length / 2 + 3000);\n        setTimeout(() => this.restoreButtons(), RESTORE_TIME);\n    }\n\n    heapSort() {\n\n    }\n\n    insertionSort() {\n        this.disableButtons();\n        const [animations, sortArray] = getInsertionSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const isColorChange = (animations[i][0] === \"comparision1\") || (animations[i][0] === \"comparision2\");\n            const arrayBars = document.getElementsByClassName('array-bar');\n            if (isColorChange === true) {\n                const color = (animations[i][0] === \"comparision1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\n                const [temp, barOneIndex, barTwoIndex] = animations[i];\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                }, i * ANIMATION_SPEED_MS);\n            }\n            else {\n                const [temp, barIndex, newHeight] = animations[i];\n                const barStyle = arrayBars[barIndex].style;\n                setTimeout(() => {\n                    barStyle.height = `${newHeight}px`;\n                }, i * ANIMATION_SPEED_MS);\n            }\n        }\n        // this.setState({array: sortArray})\n        const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS * animations.length / 2 + 3000);\n        setTimeout(() => this.restoreButtons(), RESTORE_TIME);\n    }\n\n    mergeSort() {\n        this.disableButtons();\n        const [animations, sortArray] = getMergeSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const isColorChange = (i % 3 !== 2);\n            const arrayBars = document.getElementsByClassName('array-bar');\n            if (isColorChange === true) {\n                const [barOneIndex, barTwoIndex] = animations[i];\n                const color = (i % 3 === 0) ? SECONDARY_COLOR : PRIMARY_COLOR;\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n                //If we don't multiply by the index then every animations[i] wait for exactly ANIMATION_SPEED_MS and immediately change into final state\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                }, i * ANIMATION_SPEED_MS);\n\n            }\n            else {\n                setTimeout(() => {\n                    const [barOneIdx, newHeight] = animations[i];\n                    const barOneStyle = arrayBars[barOneIdx].style;\n                    barOneStyle.height = `${newHeight}px`;\n                }, i * ANIMATION_SPEED_MS);\n            }\n        }\n        // this.setState({array: sortArray})\n        const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS * animations.length / 2 + 3000);\n        setTimeout(() => this.restoreButtons(), RESTORE_TIME);\n    }\n\n    modQuickSort() {\n\n    }\n\n    quickSort() {\n        this.disableButtons();\n        const [animations, sortArray] = getQuickSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length - 1; i++) {\n            const isColorChange = (i % 6 === 0) || (i % 6 === 1);\n            const arrayBars = document.getElementsByClassName('array-bar');\n            if (isColorChange === true) {\n                const color = (i % 6 === 0) ? SECONDARY_COLOR : PRIMARY_COLOR;\n                const [barOneIndex, barTwoIndex] = animations[i];\n                if (barOneIndex === -1) {\n                    continue;\n                }\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                }, i * ANIMATION_SPEED_MS);\n            }\n            else {\n                const [barIndex, newHeight] = animations[i];\n                if (barIndex === -1) {\n                    continue;\n                }\n                const barStyle = arrayBars[barIndex].style;\n                setTimeout(() => {\n                    barStyle.height = `${newHeight}px`;\n                }, i * ANIMATION_SPEED_MS);\n            }\n        }\n        // this.setState({array: sortArray})\n        const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS * animations.length / 2 + 3000);\n        setTimeout(() => this.restoreButtons(), RESTORE_TIME);\n    }\n\n    selectionSort() {\n        this.disableButtons();\n        const [animations, sortArray] = getSelectionSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const isColorChange = (animations[i][0] === \"comparision1\") || (animations[i][0] === \"comparision2\");\n            const arrayBars = document.getElementsByClassName('array-bar');\n            if (isColorChange === true) {\n                const color = (animations[i][0] === \"comparision1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\n                const [temp, barOneIndex, barTwoIndex] = animations[i];\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                }, i * ANIMATION_SPEED_MS);\n            }\n            else {\n                const [temp, barIndex, newHeight] = animations[i];\n                const barStyle = arrayBars[barIndex].style;\n                setTimeout(() => {\n                    barStyle.height = `${newHeight}px`;\n                }, i * ANIMATION_SPEED_MS);\n            }\n        }\n        // this.setState({array: sortArray})\n        const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS * animations.length / 2 + 3000);\n        setTimeout(() => this.restoreButtons(), RESTORE_TIME);\n    }\n\n    comparisonPlot() {\n\n    }\n\n\n    render() {\n        const array = this.state.array;\n        const SORT_BUTTONS = 6;\n        const TOTAL_BUTTONS = 1 + SORT_BUTTONS;\n        return (\n            <>\n                <div className=\"array-container\" style={{ position: 'absolute', right: `20px` }}>\n                    {array.map((value, idx) => (\n                        <div\n                            className=\"array-bar\"\n                            key={idx}\n                            style={{\n                                backgroundColor: PRIMARY_COLOR,\n                                height: `${value}px`\n                            }}\n                        ></div>\n                    ))}\n                </div>\n                <div className=\"buttons\" >\n                    <button title=\"Generates a new random unsorted array\" id=\"arrayGen\" style={{ position: 'relative', top: `${0 * (WINDOW_HEIGHT - 20) / TOTAL_BUTTONS}px` }} onClick={() => this.resetArray()}>\n                        Generate an Unsorted Array\n                </button>\n                    <button title=\"Generates a new sorted array\" id=\"sortArray\" style={{ position: 'relative', top: `${0 * (WINDOW_HEIGHT - 20) / TOTAL_BUTTONS}px` }} onClick={() => this.sortArray()}>\n                        Generate a Sorted Array\n                </button>\n                    <button title=\"Generates a new reversed array\" id=\"reverseArray\" style={{ position: 'relative', top: `${0 * (WINDOW_HEIGHT - 20) / TOTAL_BUTTONS}px` }} onClick={() => this.reverseArray()}>\n                        Generate a Sorted Reversed Array\n                </button>\n                    <button title=\"O(N^2) Time Complexity\" id=\"bubbleSort\" style={{ position: 'relative', top: `${0.5 * (WINDOW_HEIGHT - 20) / TOTAL_BUTTONS}px` }} onClick={() => this.bubbleSort()}>\n                        Bubble Sort\n                </button>\n                    <button title=\"O(NlogN) Time Complexity\" id=\"heapSort\" style={{ position: 'relative', top: `${0.5 * (WINDOW_HEIGHT - 20) / TOTAL_BUTTONS}px` }} onClick={() => this.heapSort()}>\n                        Heap Sort\n                </button>\n                    <button title=\"O(N^2) Time Complexity\" id=\"insertionSort\" style={{ position: 'relative', top: `${0.5 * (WINDOW_HEIGHT - 20) / TOTAL_BUTTONS}px` }} onClick={() => this.insertionSort()}>\n                        Insertion Sort\n                </button>\n                    <button title=\"O(NlogN) Time Complexity\" id=\"mergeSort\" style={{ position: 'relative', top: `${0.5 * (WINDOW_HEIGHT - 20) / TOTAL_BUTTONS}px` }} onClick={() => this.mergeSort()}>\n                        Merge Sort\n                </button>\n                    <button title=\"O(N^2) Time Complexity\" id=\"modQuickSort\" style={{ position: 'relative', top: `${0.5 * (WINDOW_HEIGHT - 20) / TOTAL_BUTTONS}px` }} onClick={() => this.modQuickSort()}>\n                        Modified Quick Sort\n                </button>\n                    <button title=\"O(N^2) Time Complexity\" id=\"quickSort\" style={{ position: 'relative', top: `${0.5 * (WINDOW_HEIGHT - 20) / TOTAL_BUTTONS}px` }} onClick={() => this.quickSort()}>\n                        In-Place Quick Sort\n                </button>\n                    <button title=\"O(N^2) Time Complexity\" id=\"selectionSort\" style={{ position: 'relative', top: `${0.5 * (WINDOW_HEIGHT - 20) / TOTAL_BUTTONS}px` }} onClick={() => this.selectionSort()}>\n                        Selection Sort\n                </button>\n                    <button title=\"Compare all algorithms for different input sizes\" id=\"comparisonPlot\" style={{ position: 'relative', top: `${1.0 * (WINDOW_HEIGHT - 20) / TOTAL_BUTTONS}px` }} onClick={() => this.comparisonPlot()}>\n                        Comparison Plot\n                </button>\n                </div>\n            </>\n        );\n    }\n}\n\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\nfunction randomIntFromInterval(min, max) {\n    // min and max included\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nexport default SortingVisualizer;","export function getInsertionSortAnimations(array) {\n    let animations = [];\n    let auxillaryArray = array.slice();\n    insertionSort(auxillaryArray, animations);\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n    console.log(\"sort works correctly? \", arraysAreEqual(javaScriptSortedArray, auxillaryArray));\n    array = auxillaryArray;\n    return [animations, array];\n}\n\nfunction insertionSort(auxillaryArray, animations) {\n    const N = auxillaryArray.length;\n    for (let i = 1; i < N; i++) {\n        let key = auxillaryArray[i];\n        let j = i - 1;\n        animations.push([\"comparision1\", j, i]);\n        animations.push([\"comparision2\", j, i]);\n        while (j >= 0 && auxillaryArray[j] > key) {\n            animations.push([\"overwrite\", j + 1, auxillaryArray[j]]);\n            auxillaryArray[j + 1] = auxillaryArray[j];\n            j = j - 1;\n            if (j >= 0) {\n                animations.push([\"comparision1\", j, i]);\n                animations.push([\"comparision2\", j, i]);\n            }\n        }\n        animations.push([\"overwrite\", j + 1, key]);\n        auxillaryArray[j + 1] = key;\n    }\n}\n\nfunction arraysAreEqual(firstArray, secondArray) {\n    if (firstArray.length !== secondArray.length) {\n        return false;\n    }\n    for (let i = 0; i < firstArray.length; i++) {\n        if (firstArray[i] !== secondArray[i]) {\n            return false;\n        }\n    }\n    return true;\n}","import React from 'react';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}